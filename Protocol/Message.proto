syntax = "proto3";
option csharp_namespace = "Protocol";

enum LogType {
	LogType_LogType_SecGetReportData2Flow = 0;
	LogType_LogType_SecFBRoundStartFlow = 1;
	LogType_LogType_SecFBRoundEndFlow = 2;
	LogType_LogType_SecRoleFightFlow_BigWorldStart = 3;
	LogType_LogType_SecRoleFightFlow_BigWorldEnd = 4;
	LogType_LogType_SecRoleFightFlow_InstStart = 5;
	LogType_LogType_SecRoleFightFlow_InstEnd = 6;
	LogType_LogType_SecWorldInfoFlow_Start = 7;
	LogType_LogType_SecWorldInfoFlow_End = 8;
	LogType_LogType_SecWorldStartFlow = 9;
	LogType_LogType_SecWorldSEndFlow = 10;
}

// MessageId: 20404 (Notify)
message DOLLARZa {
	int32 mLa = 141;
	int64 kTa = 205;
	int64 Nth = 86;
	int64 Fth = 225;
	int32 InstId = 20;
	int32 Vth = 80;
}

message DOLLARTa {
	int32 SkillId = 1;
	int32 Level = 2;
}

message Vrh {
	int32 roleId = 1;
	int32 Level = 2;
	int32 Exp = 3;
	int32 Breakthrough = 4;
	repeated Xks KTa = 5;
	repeated DOLLARTa DOLLARTa = 6;
}

// MessageId: 26143 (Request)
message WZa {
	int64 kTa = 237;
	string NTa = 109;
	Vrh FTa = 172;
	Vrh HTa = 244;
	Vrh jTa = 230;
	Vrh WTa = 39;
}

// MessageId: 15467 (Response)
message QZa {
	int64 kTa = 153;
	ErrorCode ErrorCode = 69;
}

// MessageId: 24479 (Request)
message KZa {
	bytes kLa = 205;
}

// MessageId: 20696 (Response)
message XZa {
	DErrorResult Error = 160;
}

// MessageId: 18558 (Request)
//message YZa {
//	int64 kTa = 231;
//	string YTa = 171;
//	int64 JTa = 110;
//	int32 zTa = 41;
//	int32 ZTa = 69;
//	int32 Hth = 117;
//	int32 DOLLARth = 9;
//	int32 eLa = 66;
//	int64 jth = 220;
//	int64 Wth = 36;
//	int32 Qth = 122;
//	int32 Kth = 166;
//	int32 Xth = 134;
//	int32 Yth = 18;
//	int32 zth = 189;
//	int32 TAs = 1;
//	int32 Jth = 72;
//	int32 Zth = 107;
//	int32 eih = 238;
//)

// MessageId: 27526 (Response)
message zZa {
	int64 kTa = 225;
	DErrorResult Error = 31;
}

//message Hrh {
//	int32 aLa = 1;
//	Vrh hLa = 2;
//	int64 uLa = 3;
//	int64 ILa = 4;
//	int32 TLa = 5;
//	int32 LLa = 6;
//	int32 ULa = 7;
//	int32 xLa = 8;
//	int32 DLa = 9;
//	int32 ALa = 10;
//	int32 RLa = 11;
//	int32 PLa = 12;
//	int32 bLa = 13;
//	int32 qLa = 14;
//	int32 GLa = 15;
//	int32 BLa = 16;
//	int32 wLa = 17;
//	repeated Vector tih = 18;
//}

// MessageId: 28338 (Request)
message JZa {
	int64 kTa = 48;
	string ClientTime = 217;
	//repeated Hrh cLa = 190;
	int32 mLa = 4;
}

// MessageId: 18741 (Response)
message ZZa {
	int64 kTa = 52;
	DErrorResult Error = 219;
}

// MessageId: 16235 (Request)
//message eeh {
//	int64 kTa = 197;
//	string ClientTime = 5;
//	int32 zTa = 34;
//	int32 ZTa = 8;
//	int32 Hth = 14;
//	int32 DOLLARth = 43;
//	int32 eLa = 200;
//	int32 jth = 76;
//	int32 Wth = 255;
//	int32 Qth = 224;
//	int32 Kth = 189;
//	int32 Xth = 176;
//	int32 Yth = 7;
//	int32 zth = 227;
//	int32 Jth = 83;
//	int32 Zth = 220;
//	int32 eih = 161;
//}

// MessageId: 20917 (Response)
message teh {
	int64 kTa = 212;
	DErrorResult Error = 185;
}

// MessageId: 23385 (Request)
message ieh {
	int64 kTa = 252;
	string NTa = 79;
	Vrh FTa = 60;
	Vrh HTa = 135;
	Vrh jTa = 133;
	Vrh WTa = 102;
}

// MessageId: 27347 (Response)
message reh {
	int64 kTa = 221;
	DErrorResult Error = 251;
}

// MessageId: 20704 (Request)
//message oeh {
//	int64 kTa = 166;
//	string YTa = 224;
//	int32 JTa = 68;
//	int32 zTa = 70;
//	int32 ZTa = 32;
//	int32 Hth = 55;
//	int32 DOLLARth = 127;
//	int32 eLa = 179;
//	int64 jth = 221;
//	int64 Wth = 254;
//	int32 Qth = 82;
//	int32 Kth = 232;
//	int32 Xth = 170;
///	int32 Yth = 110;
//	int32 zth = 234;
//	int32 Jth = 128;
//	int32 Zth = 241;
//	int32 eih = 21;
//	int32 TAs = 74;
//}

// MessageId: 19068 (Response)
message aeh {
	int64 kTa = 218;
	DErrorResult Error = 195;
}

enum MSG_ROUTE_ENUM {
	MSG_ROUTE_ENUM_RouteNone = 0;
	MSG_ROUTE_ENUM_Gateway = 1;
	MSG_ROUTE_ENUM_GameServer = 2;
}

enum EMsgFunction {
	EMsgFunction_FunctionNone = 0;
	EMsgFunction_BattleInfo = 1;
}

enum ErrorCode {
	ErrorCode_Success = 0;
	ErrorCode_RequestParamError = 1;
	ErrorCode_InternalError = 2;
	ErrorCode_UnKnownError = 3;
	ErrorCode_ServerNotReady = 4;
	ErrorCode_ServerFullLoad = 5;
	ErrorCode_InvalidUserId = 6;
	ErrorCode_InvalidToken = 7;
	ErrorCode_InvalidRequest = 8;
	ErrorCode_GmFail = 9;
	ErrorCode_GmParamError = 10;
	ErrorCode_GmException = 11;
	ErrorCode_NotEnableGm = 12;
	ErrorCode_NotElegantName = 13;
	ErrorCode_ContainsDirtyWord = 14;
	ErrorCode_DirtyWordServerError = 15;
	ErrorCode_DirtyWordServerReturnEmpty = 16;
	ErrorCode_DirtyWordCheckException = 17;
	ErrorCode_ComponentNotExist = 18;
	ErrorCode_ServerFullLoadGame = 19;
	ErrorCode_ServerFullLoadGate = 20;
	ErrorCode_PlayerLoggingInFlag = 21;
	ErrorCode_GateLoginException = 22;
	ErrorCode_GateLoginSeverSelectErr = 23;
	ErrorCode_GateTokenAccessErr = 24;
	ErrorCode_GateTokenAccessException = 25;
	ErrorCode_GateLoginUserIdErr = 26;
	ErrorCode_GateLoginNodeIdErr = 27;
	ErrorCode_GateLoginCreateCharacterErr = 28;
	ErrorCode_GateCreateCharacterException = 29;
	ErrorCode_GateEnterGameAddressNotFound = 30;
	ErrorCode_GateEnterGameException = 31;
	ErrorCode_GateEnterGameCreatePlayerErr = 32;
	ErrorCode_GateEnterGameAddPlayerErr = 33;
	ErrorCode_GameGateNodeNotFound = 34;
	ErrorCode_GamePlayerAdminExist = 35;
	ErrorCode_GameReloginGateNodeNotFound = 36;
	ErrorCode_GameReloginPlayerNotFound = 37;
	ErrorCode_ServerNotOpen = 38;
	ErrorCode_ServerMaintenance = 39;
	ErrorCode_InvalidLoginType = 40;
	ErrorCode_InvalidGateway = 41;
	ErrorCode_SDKServerError = 42;
	ErrorCode_TokenNotAuthrized = 43;
	ErrorCode_HadBan = 44;
	ErrorCode_NotInUserIdWhiteList = 45;
	ErrorCode_NoHealthyGamesvr = 46;
	ErrorCode_NoHealthyGateway = 47;
	ErrorCode_GarFailed = 48;
	ErrorCode_GarSdkCheckFail = 49;
	ErrorCode_GarNoneUserInfo = 50;
	ErrorCode_GarQueryUserInfoError = 51;
	ErrorCode_GarNoRegion = 52;
	ErrorCode_InternalExceptionCode = 53;
	ErrorCode_DecodeExceptionCode = 54;
	ErrorCode_EncodeExceptionCode = 55;
	ErrorCode_InvalidRequestExceptionCode = 56;
	ErrorCode_MessageOutOfLimitExceptionCode = 57;
	ErrorCode_MessageNoHandler = 58;
	ErrorCode_EncryptionNoCreate = 59;
	ErrorCode_DecryptFail = 60;
	ErrorCode_PlayerNotInTheScene = 61;
	ErrorCode_NonReentrantExceptionCode = 62;
	ErrorCode_PlayerLoggedOut = 63;
	ErrorCode_MsgFunctionClose = 64;
	ErrorCode_SeqNoError = 65;
	ErrorCode_InvalidMessageType = 66;
	ErrorCode_InvalidMessageHeader = 67;
	ErrorCode_InvalidSeqNo = 68;
	ErrorCode_InvalidMessageId = 69;
	ErrorCode_ProtobufDecodeFailed = 70;
	ErrorCode_ErrProtoSeedCheck = 71;
	ErrorCode_MessageCouldNotBeRouted = 72;
	ErrorCode_ClosedRegister = 100000;
	ErrorCode_RegisterOutOfLimit = 100001;
	ErrorCode_HaveNoCharacter = 100002;
	ErrorCode_InvalidCharacterName = 100003;
	ErrorCode_CreateCharacterFailed = 100004;
	ErrorCode_CreateCharacterDuplicateKey = 100005;
	ErrorCode_PlayerAlreadyLogin = 100006;
	ErrorCode_PlayerLoggingIn = 100007;
	ErrorCode_ErrLoginGWReconnecting = 100008;
	ErrorCode_LoginRetry = 100009;
	ErrorCode_QueryPlayerDataFailed = 100010;
	ErrorCode_CheckPlayerDataFailed = 100011;
	ErrorCode_CheckPlayerDataFailedDebug = 100012;
	ErrorCode_LogoutUnknownError = 100013;
	ErrorCode_AccountLoggedInElsewhere = 100014;
	ErrorCode_AccountIsBlocked = 100015;
	ErrorCode_DataOverflow = 100016;
	ErrorCode_AccountBeKick = 100017;
	ErrorCode_AppVersionNotMatch = 100018;
	ErrorCode_LauncherVersionIsTooLow = 100019;
	ErrorCode_ResourceVersionIsTooLow = 100020;
	ErrorCode_CloseConnection = 100021;
	ErrorCode_ErrAcquirePlayerLockFailed = 100022;
	ErrorCode_ErrPlayerLoggingOut = 100023;
	ErrorCode_MessageChecksumFailed = 100024;
	ErrorCode_LoginTimeout = 100025;
	ErrorCode_ErrWeaponDefault = 200000;
	ErrorCode_ErrWeaponLevelLimit = 200001;
	ErrorCode_ErrWeaponBreachLimit = 200002;
	ErrorCode_ErrWeaponConsumeInvalid = 200003;
	ErrorCode_ErrWeaponPkgFull = 200004;
	ErrorCode_ErrRoleNoConfig = 200005;
	ErrorCode_ErrRoleIsActive = 200006;
	ErrorCode_ErrRoleNotActive = 200007;
	ErrorCode_ErrRoleOverNotEnough = 200008;
	ErrorCode_ErrRoleLevelNotEnough = 200009;
	ErrorCode_ErrRoleException = 200010;
	ErrorCode_ErrRoleNotExchange = 200011;
	ErrorCode_ErrRoleResonNotActive = 200012;
	ErrorCode_ErrRoleResonIsActive = 200013;
	ErrorCode_ErrRoleConfigNotRight = 200014;
	ErrorCode_ErrRoleLevelMax = 200015;
	ErrorCode_ErrRolePerResonNotActive = 200016;
	ErrorCode_ErrRoleConditionNotFind = 200017;
	ErrorCode_ErrRoleConditionNoEnough = 200018;
	ErrorCode_ErrRoleInvalidNameLength = 200019;
	ErrorCode_ErrRoleExpInvalid = 200020;
	ErrorCode_ErrRoleActiveNeedNoEnough = 200021;
	ErrorCode_ErrRoleResonMaxLevel = 200022;
	ErrorCode_ErrRoleProtoError = 200023;
	ErrorCode_ErrRoleItemListEmpty = 200024;
	ErrorCode_ErrRoleItemListCountOutRange = 200025;
	ErrorCode_ErrRoleItemExpError = 200026;
	ErrorCode_ErrRolePhantPosError = 200027;
	ErrorCode_ErrRolePhantSameError = 200028;
	ErrorCode_ErrRolePhantEmptyError = 200029;
	ErrorCode_ErrRoleItemListNoEnough = 200030;
	ErrorCode_ErrRoleGetSkillByIdFailed = 200031;
	ErrorCode_ErrRoleFavorLevelNotEnough = 200032;
	ErrorCode_ErrRolSkillNodeType = 200033;
	ErrorCode_ErrRolSkillNodeTypeActive = 200034;
	ErrorCode_ErrRolSkillNodeTypeUlock = 200035;
	ErrorCode_ErrRolSkillPointsNotEnough = 200036;
	ErrorCode_ErrTrialRoleExist = 200037;
	ErrorCode_ErrTrialRoleNotExist = 200038;
	ErrorCode_ErrTrialRoleRegionDataExist = 200039;
	ErrorCode_ErrTrialRoleBtObjDataExist = 200040;
	ErrorCode_ErrTrialRoleRegionExist = 200041;
	ErrorCode_ErrTrialRoleRegionNotExist = 200042;
	ErrorCode_ErrLoadEquipDefault = 200043;
	ErrorCode_ErrLoadEquipInvalidPos = 200044;
	ErrorCode_ErrLoadEquipInvalidRole = 200045;
	ErrorCode_ErrLoadEquipRoleConfig = 200046;
	ErrorCode_ErrPhantomIdNotExist = 200047;
	ErrorCode_ErrPhantomNotExist = 200048;
	ErrorCode_ErrPhantomLvupMax = 200049;
	ErrorCode_ErrPhantomLvupMismatchItemId = 200050;
	ErrorCode_ErrPhantomLvupNoItem = 200051;
	ErrorCode_ErrPhantomLvupLimit = 200052;
	ErrorCode_ErrPhantomItemType = 200053;
	ErrorCode_ErrPhantomInvalidPos = 200054;
	ErrorCode_ErrPhantomConfigNotFound = 200055;
	ErrorCode_ErrPhantomItemNotExist = 200056;
	ErrorCode_ErrPhantomPropNotExist = 200057;
	ErrorCode_ErrPhantomQaulityNotExist = 200058;
	ErrorCode_ErrPhantomBreachNotExist = 200059;
	ErrorCode_ErrPhantomLevelNotEnough = 200060;
	ErrorCode_ErrPhantomExpItemNotExist = 200061;
	ErrorCode_ErrPhantomSubPropRandomErr = 200062;
	ErrorCode_ErrPhantomSubPropNotEnough = 200063;
	ErrorCode_ErrPhantomSubPropGenDupicate = 200064;
	ErrorCode_ErrPhantomSubStrengthenPropNotExist = 200065;
	ErrorCode_ErrPhantomLevelConfigNotExist = 200066;
	ErrorCode_ErrPhantomLevelUpConsumeItemNotEnough = 200067;
	ErrorCode_ErrPhantomLevelUpMaterialLock = 200068;
	ErrorCode_ErrPhantomLevelUpConsumeItemErr = 200069;
	ErrorCode_ErrPhantomLevelUpRepeatItem = 200070;
	ErrorCode_ErrPhantomMainPropNotExist = 200071;
	ErrorCode_ErrPhantomGrowthNotExist = 200072;
	ErrorCode_ErrPhantomBreachItemCount = 200073;
	ErrorCode_ErrPhantomBreachRepeatItem = 200074;
	ErrorCode_ErrPhantomDecomposeEquiped = 200075;
	ErrorCode_ErrPhantomDecomposeFail = 200076;
	ErrorCode_ErrPhantomBreachBindItem = 200077;
	ErrorCode_ErrPhantomBreachErrItem = 200078;
	ErrorCode_ErrPhantomRecommendNoData = 200079;
	ErrorCode_ErrPhantomCannotTakeOff = 200080;
	ErrorCode_ErrPhantomCannotReplace = 200081;
	ErrorCode_ErrVisionSkillFavoriteTypeLimit = 200082;
	ErrorCode_ErrVisionSkillFavoriteCountLimit = 200083;
	ErrorCode_ErrVisionSkillCfgNotFound = 200084;
	ErrorCode_ErrVisionSkillNotFound = 200085;
	ErrorCode_ErrVisionSkillLevelUpMax = 200086;
	ErrorCode_ErrVisionSkillLevelUpLimit = 200087;
	ErrorCode_ErrVisionSkillSlotNotFound = 200088;
	ErrorCode_ErrVisionSkillEquipTypeLimit = 200089;
	ErrorCode_ErrVisionSkillUnEquipLimit = 200090;
	ErrorCode_ErrVisionSkillGemCfgNotFound = 200091;
	ErrorCode_ErrVisionSkillEquipLimit = 200092;
	ErrorCode_ErrVisionSkillGemLimit = 200093;
	ErrorCode_ErrVisionSkillOperFail = 200094;
	ErrorCode_ErrVisionSkillSlotEquipLimit = 200095;
	ErrorCode_ErrExploreSkillRouletteRepeat = 200096;
	ErrorCode_ErrItemCfgNotFound = 200097;
	ErrorCode_ErrItemNotFound = 200098;
	ErrorCode_ErrItemNotEnough = 200099;
	ErrorCode_ErrItemDecomposeLimit = 200100;
	ErrorCode_ErrItemUseLevelLimit = 200101;
	ErrorCode_ErrItemLockLimit = 200102;
	ErrorCode_ErrItemInvalidParams = 200103;
	ErrorCode_ErrItemDecomposeFail = 200104;
	ErrorCode_ErrItemUseFail = 200105;
	ErrorCode_ErrExchangeRewardCostItemNotEnough = 200106;
	ErrorCode_ExchangeRewardSuccess = 200107;
	ErrorCode_ErrPkgCapacityNotEnough = 200108;
	ErrorCode_ErrGiftOptionalCount = 200109;
	ErrorCode_ErrGiftOptionalNotExists = 200110;
	ErrorCode_ErrGiftNotExists = 200111;
	ErrorCode_ErrItemCount = 200112;
	ErrorCode_ErrItemIdNotContain = 200113;
	ErrorCode_ErrItemTypeNotContain = 200114;
	ErrorCode_ErrCalabashMaxLevel = 200115;
	ErrorCode_ErrCalabashConfig = 200116;
	ErrorCode_ErrCalabashLevelUp = 200117;
	ErrorCode_ErrCalabashExp = 200118;
	ErrorCode_ErrCalabashDevelopNoReward = 200119;
	ErrorCode_ErrCalabashMonsterNotFound = 200120;
	ErrorCode_PropRewardTips = 200121;
	ErrorCode_ErrEnergyMaxCharge = 200122;
	ErrorCode_ErrStateCanotTeleport = 200123;
	ErrorCode_ErrStateCannotEnterInst = 200124;
	ErrorCode_ErrStateCannotOnline = 200125;
	ErrorCode_ErrStateCannotChangeFormation = 200126;
	ErrorCode_ErrReportPlayerCountLimit = 200127;
	ErrorCode_ErrReportPlayerReasonNotFound = 200128;
	ErrorCode_ErrReportMessageLengthLimit = 200129;
	ErrorCode_ErrCookingToolFixed = 200130;
	ErrorCode_ErrCookingFormulaNotFound = 200131;
	ErrorCode_ErrCookingCount = 200132;
	ErrorCode_ErrCookingProcessNotFound = 200133;
	ErrorCode_ErrCookingLevelNotFound = 200134;
	ErrorCode_ErrCookingLevelLimt = 200135;
	ErrorCode_ErrCookingInteractiveNotFound = 200136;
	ErrorCode_ErrCookingFuncNotOpen = 200137;
	ErrorCode_ErrChallengeNotFound = 200138;
	ErrorCode_ErrChallengeNoTeam = 200139;
	ErrorCode_ErrChallengeTeamLimit = 200140;
	ErrorCode_ErrChallengeTeamMemLimit = 200141;
	ErrorCode_ErrChallengeChangeFormation = 200142;
	ErrorCode_ErrChallengeFunNotOpen = 200143;
	ErrorCode_ErrChallengeSeasonUpdate = 200144;
	ErrorCode_ErrChallengeLockRoleLimit = 200145;
	ErrorCode_ErrChallengeRoleLocked = 200146;
	ErrorCode_ErrChallengeNoRoleAlive = 200147;
	ErrorCode_ErrChallengeFormationEmpty = 200148;
	ErrorCode_ErrCycleChallengeNoRoleAlive = 200149;
	ErrorCode_ErrCycleChallengeFormationEmpty = 200150;
	ErrorCode_ErrInfluenceLocked = 200151;
	ErrorCode_ErrInfluenceRewardNotFound = 200152;
	ErrorCode_ErrInfluenceConfigNotFound = 200153;
	ErrorCode_ErrReputationLimit = 200154;
	ErrorCode_ErrInfluenceRewardFailed = 200155;
	ErrorCode_ErrInfluenceFunNotOpen = 200156;
	ErrorCode_ErrForgeFuncNotOpen = 200157;
	ErrorCode_ErrForgeCountLimit = 200158;
	ErrorCode_ErrForgeLocked = 200159;
	ErrorCode_ErrForgeConfigNotFound = 200160;
	ErrorCode_ErrForgeUnlocked = 200161;
	ErrorCode_ErrSynthesisFuncNotOpen = 200162;
	ErrorCode_ErrSynthesisConfigNotFound = 200163;
	ErrorCode_ErrSynthesisCountLimit = 200164;
	ErrorCode_ErrSynthesisLocked = 200165;
	ErrorCode_ErrSynthesisLevelNotFound = 200166;
	ErrorCode_ErrSynthesisLevelLimit = 200167;
	ErrorCode_ErrSynthesisCannotUnlock = 200168;
	ErrorCode_ErrSynthesisUnlocked = 200169;
	ErrorCode_ErrTrialRoleCannotMatch = 200170;
	ErrorCode_ErrPhantomFormationTeleport = 200171;
	ErrorCode_ErrPhantomFormationEnterInst = 200172;
	ErrorCode_ErrPhantomFormationMultiPlay = 200173;
	ErrorCode_ErrPhantomFormationAdvice = 200174;
	ErrorCode_ErrPhantomFormationChangeFormation = 200175;
	ErrorCode_ErrPhantomFormationRepeat = 200176;
	ErrorCode_ErrPhantomFormationChangeFailed = 200177;
	ErrorCode_ErrRoleChangeRoleCreateFailed = 200178;
	ErrorCode_ErrRoleChangeRoleUpdateCreateFailed = 200179;
	ErrorCode_ErrRoleChangeRoleNotUnlock = 200180;
	ErrorCode_ErrRoleChangeMultiPlay = 200181;
	ErrorCode_ErrRoleChangeInst = 200182;
	ErrorCode_ErrRoleChangeElementFunc = 200183;
	ErrorCode_ErrPhantomFormationCannotJoin = 200184;
	ErrorCode_ErrPhantomFormationHost = 200185;
	ErrorCode_ErrRoleChangeShowAllRole = 200186;
	ErrorCode_ErrInteractBoardEntityNotFound = 200187;
	ErrorCode_ErrInteractBoardRange = 200188;
	ErrorCode_ErrInteractBoardSystemNotFound = 200189;
	ErrorCode_ErrInteractBoardEntityConfig = 200190;
	ErrorCode_ErrInteractEntranceNotFound = 200191;
	ErrorCode_ErrInteractEntranceNotMatch = 200192;
	ErrorCode_ErrItemMaxUseCount = 200193;
	ErrorCode_ErrFuncNotExist = 200194;
	ErrorCode_ErrPhantomChangeInBattle = 200195;
	ErrorCode_ErrItemCanNotDestroy = 200196;
	ErrorCode_ErrPhantomEquipSourceCost = 200197;
	ErrorCode_ErrPhantomEquipTargetCost = 200198;
	ErrorCode_ErrPhantomEquipDuplicate = 200199;
	ErrorCode_ErrPhantomAutoEquipFromOther = 200200;
	ErrorCode_ErrPhantomConsumeItemCount = 200201;
	ErrorCode_ErrPhantomConsumeItemDuplicate = 200202;
	ErrorCode_ErrPhantomConsumeItemIncrDuplicate = 200203;
	ErrorCode_ErrPhantomConsumeItem = 200204;
	ErrorCode_ErrPhantomConsumeNoExp = 200205;
	ErrorCode_ErrPhantomBreachPos = 200206;
	ErrorCode_ErrPhantomBreachSuspend = 200207;
	ErrorCode_ErrPhantomBreachQuality = 200208;
	ErrorCode_ErrPhantomBreachExp = 200209;
	ErrorCode_ErrPhantomBreachConsumeItem = 200210;
	ErrorCode_ErrPhantomBreachNoSuspend = 200211;
	ErrorCode_ErrPhantomSpecialSkillRole = 200212;
	ErrorCode_ErrPhantomNotEquip = 200213;
	ErrorCode_ErrPhantomSpecilSkillPos = 200214;
	ErrorCode_ErrPhantomSubPropPlanConfig = 200215;
	ErrorCode_ErrPhantomMainPropGenFail = 200216;
	ErrorCode_ErrLivenessFuncNotOpen = 200217;
	ErrorCode_ErrLivenessTaskNotFound = 200218;
	ErrorCode_ErrLivenessTaskDataNotFound = 200219;
	ErrorCode_ErrLivenessTaskNotFinish = 200220;
	ErrorCode_ErrLivenessTaskRewarded = 200221;
	ErrorCode_ErrLivenessRewardNotFound = 200222;
	ErrorCode_ErrLivenessGoalNotReach = 200223;
	ErrorCode_ErrLivenessRewardParam = 200224;
	ErrorCode_ErrLivenessTaskRewardParam = 200225;
	ErrorCode_ErrWeaponLevelUpComsumeCount = 200226;
	ErrorCode_ErrWeaponConsumeSelf = 200227;
	ErrorCode_ErrWeaponConsumeItemNotFound = 200228;
	ErrorCode_ErrWeaponConsumeItemIdNotFound = 200229;
	ErrorCode_ErrWeaponLocked = 200230;
	ErrorCode_ErrWeaponConsumeDuplicate = 200231;
	ErrorCode_ErrWeaponEquiped = 200232;
	ErrorCode_ErrWeaponLevelUpItemDuplicate = 200233;
	ErrorCode_ErrWeaponLevelUpNoExp = 200234;
	ErrorCode_ErrWeaponLevelUpLevel = 200235;
	ErrorCode_ErrPhantomMainPropNotMatch = 200236;
	ErrorCode_ErrPhantomSubPropNotMatch = 200237;
	ErrorCode_ErrPhantomEquiped = 200238;
	ErrorCode_ErrAdviceNotInit = 200239;
	ErrorCode_ErrTowerChallengeNotOpen = 200240;
	ErrorCode_ErrTowerNotInChallenge = 200241;
	ErrorCode_ErrTowerConfigNotFound = 200242;
	ErrorCode_ErrTowerChallengeNotInOpenTime = 200243;
	ErrorCode_ErrTowerInChallenge = 200244;
	ErrorCode_ErrTowerFormationCount = 200245;
	ErrorCode_ErrTowerFormationRoleDuplicate = 200246;
	ErrorCode_ErrTowerRoleCost = 200247;
	ErrorCode_ErrTowerDifficultyNotClear = 200248;
	ErrorCode_ErrTowerFloorNotClear = 200249;
	ErrorCode_ErrTowerAreaNotClear = 200250;
	ErrorCode_ErrTowerRecommendNotSettle = 200251;
	ErrorCode_ErrTowerRewardNotFound = 200252;
	ErrorCode_ErrTowerNoReward = 200253;
	ErrorCode_ErrTowerRewarded = 200254;
	ErrorCode_ErrTowerRewardTarget = 200255;
	ErrorCode_ErrTowerSeasonUpdate = 200256;
	ErrorCode_ErrLordGymConfigNotFound = 200257;
	ErrorCode_ErrLordGymNotInPlay = 200258;
	ErrorCode_ErrLordGymLock = 200259;
	ErrorCode_ErrLordGymBtTreeNotFound = 200260;
	ErrorCode_ErrRoleSexFuncNotOpen = 200261;
	ErrorCode_ErrPhantomSubPropLocked = 200262;
	ErrorCode_ErrPhantomIdentifyNoCost = 200263;
	ErrorCode_ErrGiftPackType = 200264;
	ErrorCode_ErrGiftPackUseLimit = 200265;
	ErrorCode_ErrCdKeyNotEnable = 200266;
	ErrorCode_ErrCdKeyRequestCount = 200267;
	ErrorCode_ErrCdKeyRequestErr = 200268;
	ErrorCode_ErrCdKeyRequestDataErr = 200269;
	ErrorCode_ErrCdKeyException = 200270;
	ErrorCode_ErrCdKeyProcessCount = 200271;
	ErrorCode_ErrCdKeyNotFound = 200272;
	ErrorCode_ErrCdKeyBatchNotFound = 200273;
	ErrorCode_ErrCdKeyNotInValidTime = 200274;
	ErrorCode_ErrCdKeyBatchMaxCount = 200275;
	ErrorCode_ErrCdKeyEachPlayerMaxCount = 200276;
	ErrorCode_ErrCdKeyGroupCount = 200277;
	ErrorCode_ErrCdKeyCondition = 200278;
	ErrorCode_ErrCdKeyAddCountFail = 200279;
	ErrorCode_ErrCdKeyLength = 200280;
	ErrorCode_ErrCdKeyCharacter = 200281;
	ErrorCode_ErrGiftPackRandomErr = 200282;
	ErrorCode_ErrReconnectUserWhiteList = 200283;
	ErrorCode_ErrReconnectChannelWhiteList = 200284;
	ErrorCode_ErrReconnectIpInvalid = 200285;
	ErrorCode_ErrReconnectIpWhiteList = 200286;
	ErrorCode_ErrCdKeyExpire = 200287;
	ErrorCode_ErrWeaponResonLevelLimit = 200288;
	ErrorCode_ErrWeaponConfigNotFound = 200289;
	ErrorCode_ErrWeaponResonConfigNotFound = 200290;
	ErrorCode_ErrWeaponResonConsumeItem = 200291;
	ErrorCode_ErrWeaponResonConsumeGold = 200292;
	ErrorCode_ErrDestroyItemDuplicate = 200293;
	ErrorCode_ErrDestroyWeapon = 200294;
	ErrorCode_ErrCannotDestroyItem = 200295;
	ErrorCode_ErrCannotDestroyPhantom = 200296;
	ErrorCode_ErrCannotDestroyWeaponForm = 200297;
	ErrorCode_ErrCannotDestroyItemUnknown = 200298;
	ErrorCode_ErrWeaponConsumeQuality = 200299;
	ErrorCode_ErrPhantomSkinChangeCd = 200300;
	ErrorCode_ErrPhantomSkinUnlock = 200301;
	ErrorCode_ErrPhantomSkinMatch = 200302;
	ErrorCode_ErrLoginGameTainted = 200303;
	ErrorCode_ErrCookLimitCount = 200304;
	ErrorCode_ErrCookLimitTime = 200305;
	ErrorCode_ErrForgeLimitCount = 200306;
	ErrorCode_ErrForgeLimitTime = 200307;
	ErrorCode_ErrSynthesisLimitCount = 200308;
	ErrorCode_ErrSynthesisLimitTime = 200309;
	ErrorCode_ErrLoginIpBan = 200310;
	ErrorCode_ErrLoginDeviceBan = 200311;
	ErrorCode_ErrRoleNameEmpty = 200312;
	ErrorCode_ErrAdviceLength = 200313;
	ErrorCode_ErrPhantomRefiningCount = 200314;
	ErrorCode_ErrPhantomRefiningScore = 200315;
	ErrorCode_ErrPhantomRefiningTotalScore = 200316;
	ErrorCode_ErrPhantomRefiningDeveloped = 200317;
	ErrorCode_ErrPhotoMemoryCollectConfig = 200318;
	ErrorCode_ErrPhotoMemoryFuncNotOpen = 200319;
	ErrorCode_ErrPhotoMemoryCollectLock = 200320;
	ErrorCode_ErrPhotoMemoryCollectRewarded = 200321;
	ErrorCode_ErrRoleCount = 200322;
	ErrorCode_ErrCookFormulaUnlocked = 200323;
	ErrorCode_ErrForgeFormulaUnlocked = 200324;
	ErrorCode_ErrSynthesisFormulaUnlocked = 200325;
	ErrorCode_ErrCookFormulaBuyCount = 200326;
	ErrorCode_ErrForgeFormulaBuyCount = 200327;
	ErrorCode_ErrSynthesisFormulaBuyCount = 200328;
	ErrorCode_ErrCdKeyDailyVerifyCount = 200329;
	ErrorCode_ErrLongShanTaskNotFound = 200330;
	ErrorCode_ErrLongShanActivityClosed = 200331;
	ErrorCode_ErrLongShanTaskNotAccept = 200332;
	ErrorCode_ErrLongShanTaskNotComplete = 200333;
	ErrorCode_ErrLongShanTaskRewarded = 200334;
	ErrorCode_ErrTowerDefenceRewardParamErr = 200335;
	ErrorCode_ErrTowerDefenceInstanceNotFound = 200336;
	ErrorCode_ErrTowerDefenceActivityNotOpen = 200337;
	ErrorCode_ErrTowerDefenceActivityDataNotFound = 200338;
	ErrorCode_ErrTowerDefenceInstDataNotFound = 200339;
	ErrorCode_ErrTowerDefenceInstRewarded = 200340;
	ErrorCode_ErrTowerDefenceInstScoreNotEnough = 200341;
	ErrorCode_ErrTowerDefenceScoreRewarded = 200342;
	ErrorCode_ErrTowerDefenceScoreRewardNotEnough = 200343;
	ErrorCode_ErrTowerDefenceScoreRewardNotFound = 200344;
	ErrorCode_ErrTowerDefenceInstBuffNotEnable = 200345;
	ErrorCode_ErrTowerDefencePhantomDuplicate = 200346;
	ErrorCode_ErrTowerDefencePhantomNotSelect = 200347;
	ErrorCode_ErrorTowerDefenceInstNotOpen = 200348;
	ErrorCode_ErrorTowerDefenceInstCondition = 200349;
	ErrorCode_ErrNameModifyCd = 200350;
	ErrorCode_ErrNameVerifying = 200351;
	ErrorCode_ErrTimePointRewardActivityConfigNotFound = 200352;
	ErrorCode_ErrTimePointRewardActivityNotOpen = 200353;
	ErrorCode_ErrTimePointRewardActivityRewarded = 200354;
	ErrorCode_ErrTimePointRewardActivityTime = 200355;
	ErrorCode_ErrCDKeyVerifying = 200356;
	ErrorCode_ErrorTowerDefenceInstLocked = 200357;
	ErrorCode_ErrTrackMoonEntrustLocked = 200358;
	ErrorCode_ErrTrackMoonRoleLocked = 200359;
	ErrorCode_ErrTrackMoonBuildLocked = 200360;
	ErrorCode_ErrTrackMoonBuildEntity = 200361;
	ErrorCode_ErrCopyUserRequestErr = 200362;
	ErrorCode_ErrCopyUserInserting = 200363;
	ErrorCode_ErrCopyUserErr = 200364;
	ErrorCode_ErrCopyUserDataErr = 200365;
	ErrorCode_ErrCopyUserInsertErr = 200366;
	ErrorCode_ErrCopyUserInsertFailed = 200367;
	ErrorCode_ErrRiskHarvestBuffGroupNotFound = 200368;
	ErrorCode_ErrRiskHarvestActivityClosePlay = 200369;
	ErrorCode_ErrRiskHarvestModeChangeClosePlay = 200370;
	ErrorCode_ErrRiskHarvestLeaveClosePlay = 200371;
	ErrorCode_ErrRiskHarvestInstNotFound = 200372;
	ErrorCode_ErrRiskHarvestActivityNotOpen = 200373;
	ErrorCode_ErrRiskHarvestInstDataNotFound = 200374;
	ErrorCode_ErrRiskHarvestInstRewarded = 200375;
	ErrorCode_ErrRiskHarvestInstNotPass = 200376;
	ErrorCode_ErrRiskHarvestScoreRewardNotFound = 200377;
	ErrorCode_ErrRiskHarvestScoreRewarded = 200378;
	ErrorCode_ErrRiskHarvestScoreNotEnough = 200379;
	ErrorCode_ErrRiskHarvestRoleTrial = 200380;
	ErrorCode_ErrRiskHarvestMatching = 200381;
	ErrorCode_ErrRiskHarvestNotDefaultWorld = 200382;
	ErrorCode_ErrRiskHarvestMultiMode = 200383;
	ErrorCode_ErrRiskHarvestInstLocked = 200384;
	ErrorCode_ErrRiskHarvestInstTeleportEntityNotFound = 200385;
	ErrorCode_ErrRiskHarvestInstOpen = 200386;
	ErrorCode_ErrRiskHarvestPlayOpenFailed = 200387;
	ErrorCode_ErrRiskHarvestPlayDataNotFound = 200388;
	ErrorCode_ErrRiskHarvestBuffNoReward = 200389;
	ErrorCode_ErrRiskHarvestBuffRewarded = 200390;
	ErrorCode_ErrRiskHarvestBuffLocked = 200391;
	ErrorCode_ErrRiskHarvestBuffCountRewardNotFound = 200392;
	ErrorCode_ErrRiskHarvestBuffCountRewarded = 200393;
	ErrorCode_ErrRiskHarvestBuffCountNotEnough = 200394;
	ErrorCode_ErrRiskHarvestInstScoreNotEnough = 200395;
	ErrorCode_ErrItemDisuseLimit = 200396;
	ErrorCode_ErrItemDisuseFunc = 200397;
	ErrorCode_ErrPhantomRefiningMaxCount = 200398;
	ErrorCode_ErrPhantomRefiningDulplicate = 200399;
	ErrorCode_ErrPhantomNotNormal = 200400;
	ErrorCode_ErrGetSelfPsnOnlineId = 200401;
	ErrorCode_ErrGetPsnUserPlayerErr = 200402;
	ErrorCode_ErrTowerDefenceHostLeave = 200403;
	ErrorCode_ErrRiskHarvestNotInInst = 200404;
	ErrorCode_ErrEnterInstTypeErr = 200405;
	ErrorCode_ErrInputSettingCount = 200406;
	ErrorCode_ErrInputSettingDeviceType = 200407;
	ErrorCode_ErrInputSettingActionCount = 200408;
	ErrorCode_ErrInputSettingAxisCount = 200409;
	ErrorCode_ErrInputCombinationActionCount = 200410;
	ErrorCode_ErrInputCombinationAxisCount = 200411;
	ErrorCode_ErrInputSettingActionName = 200412;
	ErrorCode_ErrInputSettingAxisName = 200413;
	ErrorCode_ErrInputCombinationActionName = 200414;
	ErrorCode_ErrInputCombinationAxisName = 200415;
	ErrorCode_ErrInputActionKeyNameLength = 200416;
	ErrorCode_ErrInputActionKeyLength = 200417;
	ErrorCode_ErrInputAxisKeyNameLength = 200418;
	ErrorCode_ErrInputAxisKeyLength = 200419;
	ErrorCode_ErrInputCombinationActionKeyNameLength = 200420;
	ErrorCode_ErrInputCombinationActionKeyLength = 200421;
	ErrorCode_ErrInputCombinationActionKeyListLength = 200422;
	ErrorCode_ErrInputCombinationAxisKeyNameLength = 200423;
	ErrorCode_ErrInputCombinationAxisKeyLength = 200424;
	ErrorCode_ErrInputCombinationAxisKeyListLength = 200425;
	ErrorCode_ErrInputDeviceSubTypeLength = 200426;
	ErrorCode_ErrPSNAccountBlocked = 200427;
	ErrorCode_ErrRoleNameInvalid = 200428;
	ErrorCode_ErrMapDefault = 300000;
	ErrorCode_ErrMapMarkNumLimit = 300001;
	ErrorCode_ErrMapNoFogConfig = 300002;
	ErrorCode_ErrMapFogAlreadyUnlock = 300003;
	ErrorCode_ErrFormationEmpty = 300004;
	ErrorCode_ErrFormationUnknown = 300005;
	ErrorCode_ErrFormationDead = 300006;
	ErrorCode_ErrFormationRoleRepeat = 300007;
	ErrorCode_ErrFormationRoleNotActive = 300008;
	ErrorCode_ErrFormationRoleIndexOut = 300009;
	ErrorCode_ErrFormationRoleCountOut = 300010;
	ErrorCode_ErrFightFormationRoleNotExist = 300011;
	ErrorCode_ErrFightFormationRoleIdNotMatch = 300012;
	ErrorCode_ErrFightFormationRoleCountNotMatch = 300013;
	ErrorCode_ErrFightFormationRoleCareerNotMatch = 300014;
	ErrorCode_ErrFightFormationRoleElementNotMatch = 300015;
	ErrorCode_ErrFightFormationCannotTrial = 300016;
	ErrorCode_ErrFightFormationTrialRoleNotMatch = 300017;
	ErrorCode_ErrFormationOverSize = 300018;
	ErrorCode_ErrSwitchRoleIsDead = 300019;
	ErrorCode_ErrUpdateFormationCurRoleIsDead = 300020;
	ErrorCode_ErrUpdateFormationRoleIdsIsNull = 300021;
	ErrorCode_ErrFormationIdOutOfRange = 300022;
	ErrorCode_ErrCanNotCancelCurFormation = 300023;
	ErrorCode_ErrCurRoleNotInFormationRoleIds = 300024;
	ErrorCode_ErrUpateFormationNotInSingleWorld = 300025;
	ErrorCode_ErrSwitchRoleTypeSignleWorld = 300026;
	ErrorCode_ErrSwitchRoleTypeMultiWorld = 300027;
	ErrorCode_ErrSwitchRoleTypeFbInstance = 300028;
	ErrorCode_ErrSwitchRoleTypeUndefine = 300029;
	ErrorCode_ErrSingWorldCanNotUpdateFightRoles = 300030;
	ErrorCode_ErrUpdateFightRolesIsNull = 300031;
	ErrorCode_ErrUpdateFightRolesCurIdNotExist = 300032;
	ErrorCode_ErrInStroyCharacterCanNotSwitchRole = 300033;
	ErrorCode_ErrSwitchRoleNotInFightRoles = 300034;
	ErrorCode_ErrCanNotSwitchRepeat = 300035;
	ErrorCode_ErrSwitchRoleEntityIdNotExist = 300036;
	ErrorCode_ErrSwitchRoleEntityNotExist = 300037;
	ErrorCode_ErrSitchRoleEntityIsDead = 300038;
	ErrorCode_ErrorTeamOperaFail = 300039;
	ErrorCode_ErrorPlayerAlreadyHaveTeam = 300040;
	ErrorCode_ErrorTeamInviteContentInvalid = 300041;
	ErrorCode_ErrorPlayerInBanTime = 300042;
	ErrorCode_ErrorPlayerInInviteCd = 300043;
	ErrorCode_ErrorPlayerAlreadyInTeam = 300044;
	ErrorCode_ErrorKickOutPermissionNotEnough = 300045;
	ErrorCode_ErrorTeamIsFull = 300046;
	ErrorCode_ErrorTeamServiceNotReady = 300047;
	ErrorCode_ErrorTeamPlayerJoinRepeat = 300048;
	ErrorCode_ErrorPlayerNotInTeam = 300049;
	ErrorCode_ErrorInvitePlayerNotExist = 300050;
	ErrorCode_ErrorKickPlayerNotInTeam = 300051;
	ErrorCode_ErrorDismissPermissionNotEnough = 300052;
	ErrorCode_ErrorTeamRoleIdNotActive = 300053;
	ErrorCode_ErrorTeamRoleIdRepeat = 300054;
	ErrorCode_ErrorJoinOtherWorldOtherNotExist = 300055;
	ErrorCode_ErrorJoinOtherWorldOtherNotInScene = 300056;
	ErrorCode_ErrorJoinOtherWorldSceneNotExist = 300057;
	ErrorCode_ErrorTeamNotExist = 300058;
	ErrorCode_ErrRewardCfgNotFound = 300059;
	ErrorCode_ErrTeleportIdNotExist = 300060;
	ErrorCode_ErrTeleportIdNotActivate = 300061;
	ErrorCode_ErrTeleportCreatureIdNotExist = 300062;
	ErrorCode_ErrTeleportIdAlreadyActivate = 300063;
	ErrorCode_ErrTeleportGmGetPlayerFailed = 300064;
	ErrorCode_ErrTeleportGmGetCreatureGenCfgFailed = 300065;
	ErrorCode_ErrTgmNotExitst = 300066;
	ErrorCode_ErrTgmNotPlayer = 300067;
	ErrorCode_ErrTgmNotGenCfg = 300068;
	ErrorCode_ErrTgmInsId = 300069;
	ErrorCode_ErrTeleportEntityNotExist = 300070;
	ErrorCode_ErrTeleportComponentNotExist = 300071;
	ErrorCode_ErrTeleportComponentNotMatch = 300072;
	ErrorCode_ErrAreaEnterRepeated = 300073;
	ErrorCode_ErrAreaIdNotExist = 300074;
	ErrorCode_ErrAreaIdNoNeedRecord = 300075;
	ErrorCode_ErrPlayerIsNotDead = 300076;
	ErrorCode_ErrPlayerCanNotRevive = 300077;
	ErrorCode_ErrPlayerReviveCountReachMax = 300078;
	ErrorCode_ErrPlayerReviveDelayNotReach = 300079;
	ErrorCode_ErrAutoReviveNotRequest = 300080;
	ErrorCode_ErrReviveRegionExisted = 300081;
	ErrorCode_ErrReviveRegionNotExisted = 300082;
	ErrorCode_ErrReviveRegionConfigNotExist = 300083;
	ErrorCode_ErrCanNotUseItemRevive = 300084;
	ErrorCode_ErrIsMatching = 300085;
	ErrorCode_ErrNotInMatcing = 300086;
	ErrorCode_ErrMatchPoolNotExist = 300087;
	ErrorCode_ErrNotFindMatchResult = 300088;
	ErrorCode_ErrConfirmResultRepeat = 300089;
	ErrorCode_ErrAlreadyHaveFbTeam = 300090;
	ErrorCode_ErrFbTeamNotExist = 300091;
	ErrorCode_ErrPlayerNotInFbTeam = 300092;
	ErrorCode_ErrHostCanNotReady = 300093;
	ErrorCode_ErrChangeReadyRepeat = 300094;
	ErrorCode_ErrFbTeamHaveSameRole = 300095;
	ErrorCode_ErrReadyStateCanNotChangeRole = 300096;
	ErrorCode_ErrChangeSameRole = 300097;
	ErrorCode_ErrNotHaveKickPermission = 300098;
	ErrorCode_ErrBeKickNotInFbTeam = 300099;
	ErrorCode_ErrNotHaveFightPermission = 300100;
	ErrorCode_ErrFbTeamNotAllReady = 300101;
	ErrorCode_ErrFbInstIdNotExist = 300102;
	ErrorCode_ErrFbMatchRoleNotMatch = 300103;
	ErrorCode_ErrSingleInstCanNotMatch = 300104;
	ErrorCode_ErrWaitOtherEnterSceneForbidMatch = 300105;
	ErrorCode_ErrIsEnteringOtherSceneForbidMatch = 300106;
	ErrorCode_InstPlayBtObjNotFound = 300107;
	ErrorCode_InstPlayNotSuccess = 300108;
	ErrorCode_InstPlayAlreadyGetReward = 300109;
	ErrorCode_InstPlayExchangeRewardFail = 300110;
	ErrorCode_InstPlaySetterRepeat = 300111;
	ErrorCode_InstEntranceNotUnlock = 300112;
	ErrorCode_InstEntranceNotOpen = 300113;
	ErrorCode_EnterInstLevelNotEnough = 300114;
	ErrorCode_EnterInstWorldLevelNotEnough = 300115;
	ErrorCode_EnterInstQuestNotEnough = 300116;
	ErrorCode_ErrForbidEnterInstInMatch = 300117;
	ErrorCode_ErrForbidEnterInstInEnteringOtherWorld = 300118;
	ErrorCode_ErrForbidEnterInstInWaitingOtherEnterWorld = 300119;
	ErrorCode_ErrEnterInstTypeNotMatch = 300120;
	ErrorCode_ErrNotHaveGetRewardCount = 300121;
	ErrorCode_ErrInMatching = 300122;
	ErrorCode_ErrNotInMatching = 300123;
	ErrorCode_ErrNotFindValidMatchServer = 300124;
	ErrorCode_ErrNotFindMatchServerPrx = 300125;
	ErrorCode_ErrNotHaveMatchTeamInfo = 300126;
	ErrorCode_ErrAlreadyConfirmMatchResult = 300127;
	ErrorCode_ErrMatchTeamNotInReadyState = 300128;
	ErrorCode_ErrMatchRoleNotActive = 300129;
	ErrorCode_ErrMatchReadyRepeat = 300130;
	ErrorCode_ErrMatchPlayerNotReady = 300131;
	ErrorCode_ErrMatchNotHostCanNotKick = 300132;
	ErrorCode_ErrMatchNotHostCanNotSetMatching = 300133;
	ErrorCode_ErrSetMatchFlagRepeat = 300134;
	ErrorCode_ErrPlayerNotInMatchTeam = 300135;
	ErrorCode_ErrGetMatchPoolFail = 300136;
	ErrorCode_ErrPlayerInMatchPool = 300137;
	ErrorCode_ErrPlayerNotInMatchPool = 300138;
	ErrorCode_ErrPlayerInMatchTeamCanNotCancel = 300139;
	ErrorCode_ErrPlayerIsConfirmResult = 300140;
	ErrorCode_ErrNotFindMatchTeam = 300141;
	ErrorCode_ErrPlayerIsReadyCanNotChangeRole = 300142;
	ErrorCode_ErrNotHostCanNotSetMultRoles = 300143;
	ErrorCode_ErrCanNotSetRepeatRole = 300144;
	ErrorCode_ErrPlayerNotReadyCanNotCancel = 300145;
	ErrorCode_ErrRoleRepeatCanNotReady = 300146;
	ErrorCode_ErrBeKickNotInMatchTeam = 300147;
	ErrorCode_ErrNotHostCanNotKick = 300148;
	ErrorCode_ErrNotHostCanNotSetTeamState = 300149;
	ErrorCode_ErrTeamMatchingCanNotStartInst = 300150;
	ErrorCode_ErrMatchTeamHavePlayerNotReady = 300151;
	ErrorCode_ErrNotHostCanNotEnterInst = 300152;
	ErrorCode_ErrMatchTeamIsNotEnterInstState = 300153;
	ErrorCode_ErrMatchInstIdNotExist = 300154;
	ErrorCode_ErrSingleInstanceCanNotMatch = 300155;
	ErrorCode_ErrOnlineStateCanNotMatch = 300156;
	ErrorCode_ErrTeamHaveSameRoleCanNotBegin = 300157;
	ErrorCode_ErrNotJoinChatChannel = 300158;
	ErrorCode_ErrChatChannelNotFound = 300159;
	ErrorCode_ErrChatChannelTypeNotMatch = 300160;
	ErrorCode_ErrChatContentTooLong = 300161;
	ErrorCode_ErrFightRoleIsAllDied = 300162;
	ErrorCode_ErrLoadingSceneIdNotMatch = 300163;
	ErrorCode_ErrLoadingPlayerNotInScene = 300164;
	ErrorCode_ErrPlayerIsSceneLoadingCanNotBeKick = 300165;
	ErrorCode_ErrTeamPlayerIsSceneLoadingCanNotDissolve = 300166;
	ErrorCode_ErrIsSceneLoadingCanNotDissolve = 300167;
	ErrorCode_ErrSceneLoadingCanNotEnterInst = 300168;
	ErrorCode_ErrActivateResetPointNotEntity = 300169;
	ErrorCode_ErrHostIsLoadingScene = 300170;
	ErrorCode_ErrHostIsLoadingSceneCanNotApply = 300171;
	ErrorCode_ErrIsLoadingSceneCanNotAcceptApply = 300172;
	ErrorCode_ErrNotFindHostWorldScene = 300173;
	ErrorCode_ErrCanNotRepeatCreateNeedSaveScene = 300174;
	ErrorCode_DeadStateCanNotAgreeOherEnter = 300175;
	ErrorCode_HostIsDeadStateCanNotEnter = 300176;
	ErrorCode_ErrSceneIsLoadingCanNotLeave = 300177;
	ErrorCode_ErrInstCanNotReChallenge = 300178;
	ErrorCode_ErrInstMemberNotEnoughCanNotReChallenge = 300179;
	ErrorCode_ErrInstHavePlayerLeaveCanNotReChallenge = 300180;
	ErrorCode_ErrInstHavePlayerNotDeadCanNotReChallenge = 300181;
	ErrorCode_ErrInstNotSettleCanNotReChallenge = 300182;
	ErrorCode_ErrInstCanNotRepetApplyRechallenge = 300183;
	ErrorCode_ErrInstCanNotRepetReceiveRechallenge = 300184;
	ErrorCode_ErrInstOwnerCanIniviteRechallenge = 300185;
	ErrorCode_ErrInstOwnerCanNotReceiveRechallenge = 300186;
	ErrorCode_ErrPlayerIsLogoutCanNotCreateScene = 300187;
	ErrorCode_ErrPlayerIsCreatingScene = 300188;
	ErrorCode_ErrPlayerCreateSceneFail = 300189;
	ErrorCode_ErrBigWorldCanNotReset = 300190;
	ErrorCode_ErrMultiGameModeCanNotReset = 300191;
	ErrorCode_ErrIsEnterSceneApplyingCanNotDoRepeate = 300192;
	ErrorCode_ErrIsQueryLobbyFriendDetailCanNotDoRepeate = 300193;
	ErrorCode_ErrIsQueryLobbyPlayerDetailCanNotDoRepeate = 300194;
	ErrorCode_ErrPlayerIsLoadingCanNotDoTeleport = 300195;
	ErrorCode_ErrPlayerIsTeleportCanNotDoTeleport = 300196;
	ErrorCode_ErrTeleportPositionIllegal = 300197;
	ErrorCode_ErrPlayerIsLoadingCanNotRevive = 300198;
	ErrorCode_ErrPlayerIsTeleportCanNotRevive = 300199;
	ErrorCode_ErrPlayerIsInTeleportCanNotBeKick = 300200;
	ErrorCode_ErrTeamPlayerIsInTeleportCanNotDissolve = 300201;
	ErrorCode_ErrHostIsInTeleportCanNotApply = 300202;
	ErrorCode_ErrIsInTeleportCanNotAcceptApply = 300203;
	ErrorCode_ErrStrNotIllegal = 400000;
	ErrorCode_ErrBasicInfoPhotoUnlocked = 400001;
	ErrorCode_ErrBasicInfoFrameUnlocked = 400002;
	ErrorCode_ErrCanNotGetSelfBasicInfo = 400003;
	ErrorCode_ErrMailNotExist = 400004;
	ErrorCode_ErrMailAlreadyRead = 400005;
	ErrorCode_ErrNoMailCanGet = 400006;
	ErrorCode_ErrMailNoAttachment = 400007;
	ErrorCode_ErrMailAttachmentIsGet = 400008;
	ErrorCode_ErrMailAttachmentNotGet = 400009;
	ErrorCode_ErrMailNotRead = 400010;
	ErrorCode_ErrNoMailCanDelete = 400011;
	ErrorCode_ErrMailItemBagFull = 400012;
	ErrorCode_ErrMailFuncNotOpen = 400013;
	ErrorCode_ErrMailOverSize = 400014;
	ErrorCode_ErrMailTakeLimit = 400015;
	ErrorCode_ErrMailAttachmentItemInvalidCount = 400016;
	ErrorCode_ErrMailAttachmentItemNoConf = 400017;
	ErrorCode_ErrMailNoConf = 400018;
	ErrorCode_ErrShopIdNotExit = 400019;
	ErrorCode_ErrShopInfoExist = 400020;
	ErrorCode_ErrShopTimeLimit = 400021;
	ErrorCode_ErrShopMoneyId = 400022;
	ErrorCode_ErrShopNumLimit = 400023;
	ErrorCode_ErrShopCondLimit = 400024;
	ErrorCode_ErrShopBankNoExit = 400025;
	ErrorCode_ErrShopNoShow = 400026;
	ErrorCode_ErrShopVersion = 400027;
	ErrorCode_ErrShopIlligalParam = 400028;
	ErrorCode_ErrDragonPoolConf = 400029;
	ErrorCode_ErrFullLevel = 400030;
	ErrorCode_ErrItemConf = 400031;
	ErrorCode_ErrNotEnoughItem = 400032;
	ErrorCode_NotMingSuTi = 400033;
	ErrorCode_HadFinishMingSuTi = 400034;
	ErrorCode_MingSuCallEntityFail = 400035;
	ErrorCode_ErrDragonPoolFuncNotOpen = 400036;
	ErrorCode_ErrWorldLevelHadDown = 400037;
	ErrorCode_ErrWorldLevelNotDown = 400038;
	ErrorCode_ErrWorldLevelMin = 400039;
	ErrorCode_ErrWorldLevelCd = 400040;
	ErrorCode_ErrIsBlockedPlayer = 400041;
	ErrorCode_ErrIsNotBlockedPlayer = 400042;
	ErrorCode_ErrBlockListCountMax = 400043;
	ErrorCode_ErrYouAreBlocked = 400044;
	ErrorCode_ErrAlreadyOnFriendList = 400045;
	ErrorCode_ErrNotOnFriendList = 400046;
	ErrorCode_ErrAlreadyOnFriendApplyList = 400047;
	ErrorCode_ErrFriendApplyNotExists = 400048;
	ErrorCode_ErrFriendListCountMax = 400049;
	ErrorCode_ErrInitiatorFriendListCountMax = 400050;
	ErrorCode_ErrReceiverApplyListCountMax = 400051;
	ErrorCode_ErrCanNotFriendApplySendToSelf = 400052;
	ErrorCode_ErrFriendApplySended = 400053;
	ErrorCode_ErrFriendRemarkLengthLimit = 400054;
	ErrorCode_ErrFriendApplyRequestLimit = 400055;
	ErrorCode_ErrFriendRequestEmpty = 400056;
	ErrorCode_ErrFriendRequestOverSize = 400057;
	ErrorCode_ErrPayShopNotExists = 400058;
	ErrorCode_ErrPayShopDisabled = 400059;
	ErrorCode_ErrPayShopGoodsNotExists = 400060;
	ErrorCode_ErrPayShopGoodsDisabled = 400061;
	ErrorCode_ErrPayShopGoodsLocked = 400062;
	ErrorCode_ErrPayShopGoodsOutSellTime = 400063;
	ErrorCode_ErrPayShopGoodsBuyLimit = 400064;
	ErrorCode_ErrPayShopDataChanged = 400065;
	ErrorCode_ErrPayShopIllegalBuyCount = 400066;
	ErrorCode_ErrPayShopIsDirect = 400067;
	ErrorCode_ErrPayShopIsNotDirect = 400068;
	ErrorCode_ErrPayShopTabDisabled = 400069;
	ErrorCode_ErrMonthCardWithoutValidity = 400070;
	ErrorCode_ErrMonthCardUpdateConfNotExist = 400071;
	ErrorCode_ErrMonthCardDaysMax = 400072;
	ErrorCode_ErrMonthCardRewardGot = 400073;
	ErrorCode_ErrMonthCardConfNotExist = 400074;
	ErrorCode_ErrIsNotSpecialItem = 400075;
	ErrorCode_ErrNoEquipSpecialItem = 400076;
	ErrorCode_ErrNoValidBattlePass = 400077;
	ErrorCode_ErrBattlePassRewardNotFound = 400078;
	ErrorCode_ErrBattlePassNotPaid = 400079;
	ErrorCode_ErrBattlePassIsPaid = 400080;
	ErrorCode_ErrBattlePassRewardLocked = 400081;
	ErrorCode_ErrBattlePassRewardTaken = 400082;
	ErrorCode_ErrBattlePassCanNotRepeatActive = 400083;
	ErrorCode_BattlePassNoRecurringReward = 400084;
	ErrorCode_ErrBattlePassIsAdvanced = 400085;
	ErrorCode_ErrBattlePassTaskNotFound = 400086;
	ErrorCode_ErrBattlePassTaskNotFinished = 400087;
	ErrorCode_ErrBattlePassTaskTaken = 400088;
	ErrorCode_ErrBattlePassExpIsFull = 400089;
	ErrorCode_ErrAdviceNotFound = 400090;
	ErrorCode_ErrConjunctionCanNotWord = 400091;
	ErrorCode_ErrAdviceTextNotExists = 400092;
	ErrorCode_ErrAdviceWordNotExists = 400093;
	ErrorCode_ErrAdviceTemplateNotExists = 400094;
	ErrorCode_ErrAdviceCellCalcException = 400095;
	ErrorCode_ErrIsNotAdviceEntity = 400096;
	ErrorCode_ErrAdviceCreateLimit = 400097;
	ErrorCode_ErrAdviceContentCanNotEmpty = 400098;
	ErrorCode_ErrAdviceEntityNotFount = 400099;
	ErrorCode_ErrAdviceVoteLimit = 400100;
	ErrorCode_ErrAdviceIsVoteUp = 400101;
	ErrorCode_ErrAdviceIsVoteDown = 400102;
	ErrorCode_ErrNoAdviceItem = 400103;
	ErrorCode_ErrAdviceCreateNotOpen = 400104;
	ErrorCode_ErrAdviceCanNotCreateByVisitor = 400105;
	ErrorCode_ErrAdviceSetingIsShow = 400106;
	ErrorCode_ErrAdviceSetingIsNoShow = 400107;
	ErrorCode_ErrAdviceUpMaxValue = 400108;
	ErrorCode_ErrAdviceDownMaxValue = 400109;
	ErrorCode_ProtoVersionCheckFail = 400110;
	ErrorCode_ProtoMd5CheckFail = 400111;
	ErrorCode_ConfigVersionCheckFail = 400112;
	ErrorCode_ConfigMd5CheckFail = 400113;
	ErrorCode_ErrInvalidMonthCardDays = 400114;
	ErrorCode_ErrMonthCardExtendedDaysMax = 400115;
	ErrorCode_ErrMobileButtonNoCfg = 400116;
	ErrorCode_ErrMoneyWrongPayCount = 400117;
	ErrorCode_ErrMailTextSenderNotFound = 400118;
	ErrorCode_ErrMailTextTitleNotFound = 400119;
	ErrorCode_ErrMailTextContentNotFound = 400120;
	ErrorCode_ErrAdviceIsNotVoteUp = 400121;
	ErrorCode_ErrParkourChallengeNoConf = 400122;
	ErrorCode_ErrParkourLocationNoConf = 400123;
	ErrorCode_ErrParkourChallengeNotOpen = 400124;
	ErrorCode_ErrParkourChallengeNoData = 400125;
	ErrorCode_ErrParkourChallengeTaken = 400126;
	ErrorCode_ErrParkourChallengeUnderscore = 400127;
	ErrorCode_ErrParkourChallengeScoreNoConf = 400128;
	ErrorCode_ErrParkourTakeFail = 400129;
	ErrorCode_ErrShopIllegalBuyCount = 400130;
	ErrorCode_ErrQuestErrTaskId = 500000;
	ErrorCode_ErrQuestErrStepId = 500001;
	ErrorCode_ErrQuestErrTaskBag = 500002;
	ErrorCode_ErrQuestStepStatusNotCanAccept = 500003;
	ErrorCode_ErrQuestStepStatusNotCanCommit = 500004;
	ErrorCode_ErrQuestStepConf = 500005;
	ErrorCode_ErrQuestStepData = 500006;
	ErrorCode_ErrQuestCanNotAccept = 500007;
	ErrorCode_ErrAreaQuestDelegationBoardRequest = 500008;
	ErrorCode_ErrAreaQuestAreaIdErr = 500009;
	ErrorCode_ErrAreaQuestExpired = 500010;
	ErrorCode_ErrDevoteLevel = 500011;
	ErrorCode_ErrDevoteRewardReceived = 500012;
	ErrorCode_ErrQuestNotFinish = 500013;
	ErrorCode_ErrDevoteId = 500014;
	ErrorCode_ErrAreaQuestLimit = 500015;
	ErrorCode_ErrQuestNodeNotActive = 500016;
	ErrorCode_ErrQuestNotActiveId = 500017;
	ErrorCode_ErrQuestNodeNotFound = 500018;
	ErrorCode_ErrQuestComNotFound = 500019;
	ErrorCode_ErrQuestTraceType = 500020;
	ErrorCode_ErrQuestNotProgress = 500021;
	ErrorCode_ErrQuestNoCombatState = 500022;
	ErrorCode_ErrQuestNodeData = 500023;
	ErrorCode_ErrQuestNotChildQuestNode = 500024;
	ErrorCode_ErrQuestNotClientSubmit = 500025;
	ErrorCode_ErrQuestAccepted = 500026;
	ErrorCode_ErrResourceOccupation = 500027;
	ErrorCode_ErrRequestOccupationType = 500028;
	ErrorCode_ErrNotFoundOccupation = 500029;
	ErrorCode_ErrNotOnlineQuestAccept = 500030;
	ErrorCode_ErrQuestDestroy = 500031;
	ErrorCode_ErrTreeNodeNotFind = 500032;
	ErrorCode_ErrTreeNodeNotActive = 500033;
	ErrorCode_ErrIsNotChildQuestNode = 500034;
	ErrorCode_ErrChildQuestConditionCanNotSubmit = 500035;
	ErrorCode_ErrNodeNotFindAction = 500036;
	ErrorCode_ErrNodeActionIsFinish = 500037;
	ErrorCode_ErrNodeActionGetItemIsNotQuestItem = 500038;
	ErrorCode_ErrNodeActionGetItemHasNotFreeSize = 500039;
	ErrorCode_ErrInvalidBtType = 500040;
	ErrorCode_ErrTimerNotFind = 500041;
	ErrorCode_ErrPreCondition = 500042;
	ErrorCode_ErrHandIdItemData = 500043;
	ErrorCode_ErrTreeNotFailedNode = 500044;
	ErrorCode_ErrTreeNotFailConf = 500045;
	ErrorCode_ErrTreeNotGiveUpConf = 500046;
	ErrorCode_ErrTreeNotRollback = 500047;
	ErrorCode_ErrNodeNotFindNpcId = 500048;
	ErrorCode_ErrNotRollbackPermission = 500049;
	ErrorCode_ErrNotRollbackRepeat = 500050;
	ErrorCode_ErrTreeSuspend = 500051;
	ErrorCode_ErrPlayerNotInQuestMap = 500052;
	ErrorCode_ErrSaveNewNotRollback = 500053;
	ErrorCode_ErrUiPlayType = 500054;
	ErrorCode_ErrOccupationTime = 500055;
	ErrorCode_ErrReleaseTime = 500056;
	ErrorCode_ErrActionSetTime = 500057;
	ErrorCode_ErrForcedOccupationResource = 500058;
	ErrorCode_ErrAddPlayBubble = 500059;
	ErrorCode_ErrDisableSwitchOccupation = 500060;
	ErrorCode_ErrOpenSystemBoardResultFail = 500061;
	ErrorCode_ErrEntityNoInhaledComponent = 500062;
	ErrorCode_ErrEntityInhaledStrength = 500063;
	ErrorCode_ErrTapeDefault = 600000;
	ErrorCode_ErrTapeInvalidPos = 600001;
	ErrorCode_ErrTapeIsNotActiveRole = 600002;
	ErrorCode_ErrTapeItemTypeFail = 600003;
	ErrorCode_ErrTapeNotExistTapeItem = 600004;
	ErrorCode_ErrTapeNotExistTapeConfig = 600005;
	ErrorCode_ErrTapeNotExistTapeProps = 600006;
	ErrorCode_ErrTapeHasTakeOnTape = 600007;
	ErrorCode_ErrTapeHasNotTakeOnTape = 600008;
	ErrorCode_ErrTapeNotExistTapeQualityConfig = 600009;
	ErrorCode_ErrTapeNotExistLevelUpExpConfig = 600010;
	ErrorCode_ErrTapeInvalidLevelUpExpValue = 600011;
	ErrorCode_ErrTapeNotExistExpDecayRatioConfig = 600012;
	ErrorCode_ErrTapeLevelUpEqualItem = 600013;
	ErrorCode_ErrTapeLevelUpRepeatItem = 600014;
	ErrorCode_ErrTapeLevelUpInvalidExpItemNum = 600015;
	ErrorCode_ErrTapeLevelUpInvalidExpRate = 600016;
	ErrorCode_ErrTapeLevelUpInvalidAddExp = 600017;
	ErrorCode_ErrTapeLevelUpMaxLevel = 600018;
	ErrorCode_ErrTapeLevelUpConsumeItemNotEnough = 600019;
	ErrorCode_ErrTapeLevelUpMaterialLock = 600020;
	ErrorCode_ErrTapeTransferEqualItem = 600021;
	ErrorCode_ErrTapeTransferQualityNotEqual = 600022;
	ErrorCode_ErrTapeTransferSuitNotEqual = 600023;
	ErrorCode_ErrTapeTransferMaterialLock = 600024;
	ErrorCode_ErrTapeTransferMaterialEquipped = 600025;
	ErrorCode_ErrTapeNotExistTransferPropNumConfig = 600026;
	ErrorCode_ErrTapeTransferPropNumIsMax = 600027;
	ErrorCode_ErrTapeTransferRandomSubPropFail = 600028;
	ErrorCode_ErrTapeResetTransferHasNotProp = 600029;
	ErrorCode_ErrTapeResetTransferMaterialNotEnough = 600030;
	ErrorCode_ErrTapeNotExistTapeExpItem = 600031;
	ErrorCode_ErrTapeNotExistTapeExpItemConfig = 600032;
	ErrorCode_ErrCollectEntityNotExist = 600033;
	ErrorCode_ErrCollectInvalidEntityMainType = 600034;
	ErrorCode_ErrRunningLevelPlayNotFind = 600035;
	ErrorCode_ErrLevelPlayInteractionEntity = 600036;
	ErrorCode_ErrLevelPlayNotExistByConfId = 600037;
	ErrorCode_ErrLevelPlayNotCreate = 600038;
	ErrorCode_ErrLevelPlayRewarded = 600039;
	ErrorCode_ErrLevelPlayInteractionType = 600040;
	ErrorCode_ErrLevelPlayNotPlayer = 600041;
	ErrorCode_ErrLevelPlayNotComplete = 600042;
	ErrorCode_ErrLevelPlayRewardFail = 600043;
	ErrorCode_ErrLevelPlayNotWaitState = 600044;
	ErrorCode_ErrLevelPlayAction = 600045;
	ErrorCode_ErrLevelPlayGetRewardLimit = 600046;
	ErrorCode_ErrFlowNotExist = 600047;
	ErrorCode_ErrFlowHaveNotActionWait = 600048;
	ErrorCode_ErrFlowHaveNotTalkWait = 600049;
	ErrorCode_ErrFlowHaveNotOptionWait = 600050;
	ErrorCode_ErrFlowInvalidOptionId = 600051;
	ErrorCode_ErrInteractFlowCanNotPlay = 600052;
	ErrorCode_ErrInteractInvalidFlowState = 600053;
	ErrorCode_ErrInteractOptionOwnerIsNotFlowOwner = 600054;
	ErrorCode_ErrInteractOptionOwnerIsNotActionOwner = 600055;
	ErrorCode_ErrActionOwnerIsNotEntity = 600056;
	ErrorCode_ErrActionOwnerNotFound = 600057;
	ErrorCode_ErrActionSceneNotFound = 600058;
	ErrorCode_ErrActionGroupNotFound = 600059;
	ErrorCode_ErrFinishClientActionFail = 600060;
	ErrorCode_ErrActionHostPlayerNotFound = 600061;
	ErrorCode_ErrActionFail = 600062;
	ErrorCode_ErrActionPlayerNotFound = 600063;
	ErrorCode_ErrInteractMultiGameMode = 600064;
	ErrorCode_ErrInteractAddFlowFail = 600065;
	ErrorCode_ErrBehaviorTreeOwnerNotFound = 600066;
	ErrorCode_ErrBehaviorTreeNotFound = 600067;
	ErrorCode_ErrBehaviorTreePending = 600068;
	ErrorCode_ErrBehaviorTreeTimerTypeNotFound = 600069;
	ErrorCode_ErrBehaviorTreeStopTimerFail = 600070;
	ErrorCode_ErrBehaviorTreeTimerCompNotFound = 600071;
	ErrorCode_ErrInteractCd = 600072;
	ErrorCode_ErrInteractRange = 600073;
	ErrorCode_ErrDropPickRange = 600074;
	ErrorCode_ErrBtTmpItemContextNotExist = 600075;
	ErrorCode_ErrBtTmpItemBtObjNotExist = 600076;
	ErrorCode_ErrPlayerBigWorldNotExist = 600077;
	ErrorCode_ErrRoleEntityNotExist = 600078;
	ErrorCode_ErrAddFlowFail = 600079;
	ErrorCode_ErrInteracting = 600080;
	ErrorCode_ErrInteractCollectBagFull = 600081;
	ErrorCode_ErrBtObjIsNotInstPlay = 600082;
	ErrorCode_ErrReviveConfigNotExist = 600083;
	ErrorCode_ErrFinishFlowFail = 600084;
	ErrorCode_ErrFlowActionFail = 600085;
	ErrorCode_ErrGmSubmitChildQuestNodeMaxDepth = 600086;
	ErrorCode_ErrGmSubmitChildQuestNodeIsNotProgress = 600087;
	ErrorCode_ErrEntityPatrolComponentNotExist = 600088;
	ErrorCode_ErrInteractIsNotParticipant = 600089;
	ErrorCode_ErrVisionEntityInteractFail = 600090;
	ErrorCode_ErrMaxDropTimes = 600091;
	ErrorCode_ErrStateEntityMultiHang = 600092;
	ErrorCode_ErrPlayerLoading = 600093;
	ErrorCode_ErrPlayerTeleporting = 600094;
	ErrorCode_ErrInteractBtPending = 600095;
	ErrorCode_ErrInteractDead = 600096;
	ErrorCode_ErrMultiHangEntity = 600097;
	ErrorCode_ErrRenjuCanNotResetWhenComplete = 600098;
	ErrorCode_ErrRenjuCanNotMove = 600099;
	ErrorCode_ErrSceneWorldNotExist = 700000;
	ErrorCode_ErrPlayerNotInScene = 700001;
	ErrorCode_ErrDropEntityNotExist = 700002;
	ErrorCode_ErrDropComponentNotExist = 700003;
	ErrorCode_ErrDropOwnerError = 700004;
	ErrorCode_ErrPlayerAlreadyInScene = 700005;
	ErrorCode_ErrSceneIdParseError = 700006;
	ErrorCode_ErrJoinSceneIdNotExist = 700007;
	ErrorCode_ErrSceneInviteFail = 700008;
	ErrorCode_ErrSceneInvitePlayerNotExist = 700009;
	ErrorCode_ErrSceneInviteTokenInvalid = 700010;
	ErrorCode_ErrSceneInviterNotExist = 700011;
	ErrorCode_ErrSceneInviteeIdNotMatch = 700012;
	ErrorCode_ErrSceneTeamIsFull = 700013;
	ErrorCode_ErrScenePlayerIsInTeam = 700014;
	ErrorCode_ErrSceneInviteerIsInPlayeInst = 700015;
	ErrorCode_ErrBeKickerNotInScene = 700016;
	ErrorCode_ErrorCanNotSceneKickSelf = 700017;
	ErrorCode_ErrCanNotKickOtherInPlayInst = 700018;
	ErrorCode_ErrCanNotKickOtherWhoIsInPlayInst = 700019;
	ErrorCode_ErrNoSceneKickPermission = 700020;
	ErrorCode_ErrInviterIsInOtherScene = 700021;
	ErrorCode_ErrInOtherSceneCanNotInvite = 700022;
	ErrorCode_ErrSceneBackSceneFlagError = 700023;
	ErrorCode_ErrLeaveSceneIdNotMatch = 700024;
	ErrorCode_ErrPrewarTeamAlreadyExist = 700025;
	ErrorCode_ErrPrewarTeamNotExist = 700026;
	ErrorCode_ErrCreatePrewarTeamPermissionNotEnough = 700027;
	ErrorCode_ErrPrewarTeamInvitePermissionNotEnough = 700028;
	ErrorCode_ErrPrewarBeInviterNotInScene = 700029;
	ErrorCode_ErrPrewarBeInviterInInstance = 700030;
	ErrorCode_ErrPlayerAlreadyInPrewarTeam = 700031;
	ErrorCode_ErrPlayerNotInPrewarTeam = 700032;
	ErrorCode_ErrPlayerSetPrewarReadyStateRepeat = 700033;
	ErrorCode_ErrPrewarTeamBeKickerNotInScene = 700034;
	ErrorCode_ErrPrewarTeamKickPermissionNotEnough = 700035;
	ErrorCode_ErrPrewarIniviteTooFrequently = 700036;
	ErrorCode_ErrPrewarJoinInstanceIdNotMatch = 700037;
	ErrorCode_ErrPrewarCaptainCanNotLeave = 700038;
	ErrorCode_ErrPrewarReadyStateCanNotChangeRole = 700039;
	ErrorCode_ErrScenePrewarTeamHavePlayerNotReady = 700040;
	ErrorCode_ErrAlreadyInMultiScene = 700041;
	ErrorCode_ErrOnlyCaptainCanDissolvePrewarTeam = 700042;
	ErrorCode_ErrMultiChangeRoleIndexInvalid = 700043;
	ErrorCode_ErrMultiCanNotChangeOtherRole = 700044;
	ErrorCode_ErrMultiChangeRoleEntityNorExist = 700045;
	ErrorCode_ErrSceneCanNotUseThisFunc = 700046;
	ErrorCode_ErrSceneCanNotUseThisItem = 700047;
	ErrorCode_ErrSceneFightRoleIdRepeat = 700048;
	ErrorCode_ErrShieldAddEntityNotExist = 700049;
	ErrorCode_ErrShieldAddShieldIdExisted = 700050;
	ErrorCode_ErrShieldChangeEntityNotExist = 700051;
	ErrorCode_ErrShieldChangeShieldIdNotExist = 700052;
	ErrorCode_ErrShieldRemoveEntityNotExist = 700053;
	ErrorCode_ErrShieldRemoveShieldIdNotExist = 700054;
	ErrorCode_ErrHardnessModeChangedEntityNotExist = 700055;
	ErrorCode_ErrSceneEntityNotExist = 700056;
	ErrorCode_ErrSceneEntityNotHavePartData = 700057;
	ErrorCode_ErrsceneEntityNotHavePartId = 700058;
	ErrorCode_ErrChangeControlRoleRepeat = 700059;
	ErrorCode_ErrVisionSkillCallEntityFail = 700060;
	ErrorCode_ErrSceneDataLoadError = 700061;
	ErrorCode_ErrCreatureDataError = 700062;
	ErrorCode_ErrCreatureGenIsExist = 700063;
	ErrorCode_ErrCreatureGenIsNotExist = 700064;
	ErrorCode_ErrCreatureGenIsControlByOther = 700065;
	ErrorCode_ErrCreatureGenNotHaveControlPerm = 700066;
	ErrorCode_ErrCreatureReachMaxCount = 700067;
	ErrorCode_ErrCreatureConditionNotMatch = 700068;
	ErrorCode_ErrCreatureTimeIntervalError = 700069;
	ErrorCode_ErrCreatureCfgNotExist = 700070;
	ErrorCode_ErrCreatureEntityIsNotValidity = 700071;
	ErrorCode_ErrUniqueEntityCanNotCreateTwice = 700072;
	ErrorCode_ErrRoleNotHaveVisionSkill = 700073;
	ErrorCode_ErrHitGearEntityNotExist = 700074;
	ErrorCode_ErrHitGearHaveNotEntityConfig = 700075;
	ErrorCode_ErrHitGearHaveNotGearConfig = 700076;
	ErrorCode_ErrHitGearHaveNotGameplayConfig = 700077;
	ErrorCode_ErrHitGearHaveNotStepConfig = 700078;
	ErrorCode_ErrHitGearHaveEntityCommonTag = 700079;
	ErrorCode_ErrHitGearEntityFunctionTypeFail = 700080;
	ErrorCode_ErrHitGearAcceptStepFail = 700081;
	ErrorCode_ErrCreateInstanceNotContainEntrance = 700082;
	ErrorCode_ErrCreateInstanceHaveNotEntranceConfig = 700083;
	ErrorCode_ErrCreateInstanceEntranceLock = 700084;
	ErrorCode_ErrCreateInstanceHaveNotConfig = 700085;
	ErrorCode_ErrCreateInstanceEnterCountNotEnough = 700086;
	ErrorCode_ErrCreateInstanceConditionNotMatch = 700087;
	ErrorCode_ErrEnterCountRequestHaveNotConfig = 700088;
	ErrorCode_ErrUnlockInstanceEntranceHaveNotConfig = 700089;
	ErrorCode_ErrUnlockInstanceEntranceNotNeedUnlock = 700090;
	ErrorCode_ErrUnlockInstanceEntranceUnlocked = 700091;
	ErrorCode_ErrUnlockInstanceEntranceCondiitonNotMatch = 700092;
	ErrorCode_ErrEnterSceneGameplayRequestHaveNotConfig = 700093;
	ErrorCode_ErrEnterSceneGameplayRequestAccepted = 700094;
	ErrorCode_ErrEnterSceneGameplayRequestAcceptFail = 700095;
	ErrorCode_ErrStoryCharacterCreatFail = 700096;
	ErrorCode_ErrStoryCharacterCreatRepeat = 700097;
	ErrorCode_ErrStoryCharacterNotExist = 700098;
	ErrorCode_ErrCheckGearEntityNotExist = 700099;
	ErrorCode_ErrCheckGearType = 700100;
	ErrorCode_ErrCheckGearNotEntityConfig = 700101;
	ErrorCode_ErrCheckGearActive = 700102;
	ErrorCode_ErrCheckGearInactive = 700103;
	ErrorCode_ErrTargetGearGroupEntityNotExist = 700104;
	ErrorCode_ErrTargetGearGroupConfigNotExist = 700105;
	ErrorCode_ErrTargetGearEntityNotExist = 700106;
	ErrorCode_ErrTargetGearConfigNotExist = 700107;
	ErrorCode_ErrTargetGearStartTypeIsNotHit = 700108;
	ErrorCode_ErrTargetGearStartTypeIsNotAction = 700109;
	ErrorCode_ErrTargetGearStarted = 700110;
	ErrorCode_ErrTargetGearFinished = 700111;
	ErrorCode_ErrTargetGearIsNotInCreatedConsole = 700112;
	ErrorCode_ErrTargetGearGroupEntityIsNotAllInit = 700113;
	ErrorCode_ErrLanternCatNotExit = 700114;
	ErrorCode_ErrLanternCatConfNotExit = 700115;
	ErrorCode_ErrLanternCatType = 700116;
	ErrorCode_ErrLanternActived = 700117;
	ErrorCode_ErrLanternTargetNotExit = 700118;
	ErrorCode_ErrCaptureFail = 700119;
	ErrorCode_ErrDyingFail = 700120;
	ErrorCode_ErrThrowDamageEntityNotExit = 700121;
	ErrorCode_ErrThrowDamageCalculateId = 700122;
	ErrorCode_ErrThrowDamageIdNotExit = 700123;
	ErrorCode_ErrThrowDamageRoleIdConf = 700124;
	ErrorCode_ErrThrowDamageTypeNotExit = 700125;
	ErrorCode_InstIdNotExist = 700126;
	ErrorCode_ErrControlObjectEntityNotExist = 700127;
	ErrorCode_ErrControlObjectConfigNotExist = 700128;
	ErrorCode_ErrControlGroupConfigNotExist = 700129;
	ErrorCode_ErrControlObjectLocked = 700130;
	ErrorCode_ErrControlGroupLocked = 700131;
	ErrorCode_ErrControlCanNotPutTarget = 700132;
	ErrorCode_ErrControlTargetOccupied = 700133;
	ErrorCode_ErrControlObjectCatching = 700134;
	ErrorCode_ErrControlObjectNotCatching = 700135;
	ErrorCode_ErrControlObjectOtherCatching = 700136;
	ErrorCode_ErrEntityPositionIllegal = 700137;
	ErrorCode_ErrTreasureBoxNot = 700138;
	ErrorCode_ErrTreasureBoxNotInit = 700139;
	ErrorCode_ErrTreasureBoxNotConfig = 700140;
	ErrorCode_ErrTreasureBoxHadReward = 700141;
	ErrorCode_ErrTreasureBoxNotInteraction = 700142;
	ErrorCode_ErrTreasureBoxNotDropId = 700143;
	ErrorCode_ErrTreasureBoxDropErr = 700144;
	ErrorCode_ErrTreasureBoxNotExist = 700145;
	ErrorCode_ErrTreasureBoxInvalidTag = 700146;
	ErrorCode_ErrTreasureBoxHadTag = 700147;
	ErrorCode_ErrTreasureBoxNotTag = 700148;
	ErrorCode_ErrSneakGameNotOpen = 700149;
	ErrorCode_ErrSneakFinishRepeat = 700150;
	ErrorCode_ErrClientControlDamage = 700151;
	ErrorCode_ErrSceneDataSaveFail = 700152;
	ErrorCode_NotInFbInstance = 700153;
	ErrorCode_GMErrCanNotCreateWorldInst = 700154;
	ErrorCode_GMErrPlayerAlreadyInFbInst = 700155;
	ErrorCode_GMErrTagetInstanceIsNotMulti = 700156;
	ErrorCode_GMErrPlayerNotFound = 700157;
	ErrorCode_ErrEntityFlowTooMuch = 700158;
	ErrorCode_GmErrIsWalkable = 700159;
	ErrorCode_GmErrIsNotWalkable = 700160;
	ErrorCode_GmErrNoNavmesh = 700161;
	ErrorCode_ErrBigWorldInstIdNotExist = 700162;
	ErrorCode_ErrInstIdNotBigWorld = 700163;
	ErrorCode_ErrInInstanceNotSwitchBigWorld = 700164;
	ErrorCode_ErrAlreadyInThisBigWorld = 700165;
	ErrorCode_ErrNoPermissionGetTreasureBox = 700166;
	ErrorCode_ErrCreateBigWorldRepeat = 700167;
	ErrorCode_DebugErrInstIdNotExist = 700168;
	ErrorCode_ErrSceneAiStopped = 700169;
	ErrorCode_ErrGlobalEntityConfigNotExist = 700170;
	ErrorCode_ErrSceneFixedConfigNotExist = 700171;
	ErrorCode_ErrSceneFixedEntityNotFound = 700172;
	ErrorCode_ErrSceneGlobalEntityNotFount = 700173;
	ErrorCode_ErrEntityNotHaveVarComponent = 700174;
	ErrorCode_ErrEntityVarNameNotExist = 700175;
	ErrorCode_ErrEntityVarTypeError = 700176;
	ErrorCode_ErrEntityConfigNotOffer = 700177;
	ErrorCode_ErrConfigTypeNotGloabl = 700178;
	ErrorCode_ErrConfigTypeNotSceneFixed = 700179;
	ErrorCode_ErrConfigTypeNotCharacter = 700180;
	ErrorCode_ErrEntityPosNotOffer = 700181;
	ErrorCode_ErrSceneCellPosNotFount = 700182;
	ErrorCode_ErrEntityCongigNotInSleep = 700183;
	ErrorCode_ErrSummonCfgNotFound = 700184;
	ErrorCode_ErrSummonAddEntityFail = 700185;
	ErrorCode_ErrSummonMaxCount = 700186;
	ErrorCode_ErrSummonMaxGenerations = 700187;
	ErrorCode_ErrSummonEntityIdAlreadyExist = 700188;
	ErrorCode_ErrSummonerEntityType = 700189;
	ErrorCode_ErrEntityStatusIsNotDead = 700190;
	ErrorCode_ErrEntityNotHaveAttributeComp = 700191;
	ErrorCode_ErrEntityDbData = 700192;
	ErrorCode_ErrSceneFixedEntityCreated = 700193;
	ErrorCode_ErrInvalidAwakeEntityContext = 700194;
	ErrorCode_ErrTriggerComponentNotExist = 700195;
	ErrorCode_ErrTriggerComponentMaxCount = 700196;
	ErrorCode_ErrNotSelfRole = 700197;
	ErrorCode_ErrNoControlRights = 700198;
	ErrorCode_ErrEntityHaveNotEntityOwner = 700199;
	ErrorCode_ErrEntityOwnerNotMatch = 700200;
	ErrorCode_ErrCreateSceneFixedEntitiesEmpty = 700201;
	ErrorCode_ErrInteractComponentNotExist = 700202;
	ErrorCode_ErrInteractOptionIndexInvalid = 700203;
	ErrorCode_ErrOnlineInteractNoPermission = 700204;
	ErrorCode_ErrOnlineInteractNotOpen = 700205;
	ErrorCode_ErrAwakeEntityNoPermission = 700206;
	ErrorCode_ErrCannotUseSkillStatus = 700207;
	ErrorCode_ErrInteractOptionGuidInvalid = 700208;
	ErrorCode_ErrAddInteractOptionFail = 700209;
	ErrorCode_ErrRemoveInteractOptionFail = 700210;
	ErrorCode_ErrInteractOptionOwnerNotFound = 700211;
	ErrorCode_ErrSummonPlayerId = 700212;
	ErrorCode_ErrSummonTemplateCfgNotFound = 700213;
	ErrorCode_ErrAttributeComponent = 700214;
	ErrorCode_ErrAnimFsmComponent = 700215;
	ErrorCode_ErrStateComponent = 700216;
	ErrorCode_ErrBattleComponent = 700217;
	ErrorCode_ErrPartComponent = 700218;
	ErrorCode_ErrAiControlComponent = 700219;
	ErrorCode_ErrSummonsComponent = 700220;
	ErrorCode_ErrAiBlackboardComponent = 700221;
	ErrorCode_ErrSetVarInvalidContext = 700222;
	ErrorCode_ErrSetVarInvalidVarRefPb = 700223;
	ErrorCode_ErrSetVarGetRightVarDefineFail = 700224;
	ErrorCode_ErrSetVarSetLeftVarDefineFail = 700225;
	ErrorCode_ErrCalcVarInvalidContext = 700226;
	ErrorCode_ErrCalcVarInvalidVarRef = 700227;
	ErrorCode_ErrCalcVarGetVarDefineFail = 700228;
	ErrorCode_ErrCalcVarInvalidVarType = 700229;
	ErrorCode_ErrCalcVarInvalidOp = 700230;
	ErrorCode_ErrCalcVarSetResultFail = 700231;
	ErrorCode_ErrActionEntityNoExist = 700232;
	ErrorCode_ErrActionNoInteractConfig = 700233;
	ErrorCode_ErrActionIdNoExist = 700234;
	ErrorCode_ErrActionBtObjNoExist = 700235;
	ErrorCode_ErrActionNodeNoExist = 700236;
	ErrorCode_ErrActionNoChildQuest = 700237;
	ErrorCode_ErrActionParams = 700238;
	ErrorCode_ErrActionNotEntityContext = 700239;
	ErrorCode_ErrActionExecutorNotFind = 700240;
	ErrorCode_ErrActionSessionNotFind = 700241;
	ErrorCode_ErrActionCreateSessionIdFail = 700242;
	ErrorCode_ErrActionPathConvertFail = 700243;
	ErrorCode_ErrActionConfigNotFind = 700244;
	ErrorCode_ErrActionHaveNotHandler = 700245;
	ErrorCode_ErrActionInternalError = 700246;
	ErrorCode_ErrActionInvalidIndex = 700247;
	ErrorCode_ErrActionIsNotServer = 700248;
	ErrorCode_ErrActionRemainActionNotFinish = 700249;
	ErrorCode_ErrActionExecutorIsNotBlackbard = 700250;
	ErrorCode_ErrContinuityActionNotFinish = 700251;
	ErrorCode_ErrActionIsNotContinuity = 700252;
	ErrorCode_ErrResetLocationEntityNotExist = 700253;
	ErrorCode_ErrEntityPosAbnormalNotExists = 700254;
	ErrorCode_ErrGmRemoveEntityNotExists = 700255;
	ErrorCode_ErrDrownEntityNotExists = 700256;
	ErrorCode_ErrTargetGearNotExists = 700257;
	ErrorCode_ErrOutofBattleEntityNotExists = 700258;
	ErrorCode_ErrOrderAddBuffEntityNotExists = 700259;
	ErrorCode_ErrOrderRemoveBuffEntityNotExists = 700260;
	ErrorCode_ErrActivateBuffEntityNotExists = 700261;
	ErrorCode_ErrToughCalcExtraRatioChangeEntityNotExists = 700262;
	ErrorCode_ErrAdsorbEntityNotExist = 700263;
	ErrorCode_ErrAdsorbCondNotMeet = 700264;
	ErrorCode_ErrTimelineTrackMultiGameForbid = 700265;
	ErrorCode_ErrTimelineTraceEntityNotExists = 700266;
	ErrorCode_ErrTimelineTraceComponentNotExists = 700267;
	ErrorCode_ErrTimelineTraceGroupIndex = 700268;
	ErrorCode_ErrTimelineTraceFinish = 700269;
	ErrorCode_ErrTimelineTraceCondition = 700270;
	ErrorCode_ErrTimelineTraceTargetEmpty = 700271;
	ErrorCode_ErrTimelineTraceControl = 700272;
	ErrorCode_ErrTimelineTraceFinishCondition = 700273;
	ErrorCode_ErrTimelineTraceNotInControl = 700274;
	ErrorCode_ErrForbidEnterInstance = 700275;
	ErrorCode_ErrForbitEnterBigWorld = 700276;
	ErrorCode_ErrPrefabIncIdExist = 700277;
	ErrorCode_ErrPrefabIdExist = 700278;
	ErrorCode_ErrPrefabNumberIsZero = 700279;
	ErrorCode_ErrPrefabEntityIsExist = 700280;
	ErrorCode_ErrPrefabTreasureBox = 700281;
	ErrorCode_ErrPrefabActionCreate = 700282;
	ErrorCode_ErrPrefabVarNoExist = 700283;
	ErrorCode_ErrClientOnlyEntityCantCreate = 700284;
	ErrorCode_ErrTimelineTraceActionRun = 700285;
	ErrorCode_ErrGmActivateTeleportSceneNotExist = 700286;
	ErrorCode_ErrGmCreateInstSceneHasExist = 700287;
	ErrorCode_ErrVfxNpcNotExist = 700288;
	ErrorCode_ErrVfxNpcIsNotVfxNpc = 700289;
	ErrorCode_ErrBlackboardLimit = 700290;
	ErrorCode_ErrBlackboardArrayLimit = 700291;
	ErrorCode_ErrBlackboardStringLimit = 700292;
	ErrorCode_ErrReconnectGWGetGatePlayerFailed = 800000;
	ErrorCode_ErrGWReconnectGWInvalidPlayerState = 800001;
	ErrorCode_ErrGWReconnectGWVerifyTokenFailed = 800002;
	ErrorCode_ErrGWReconnectGWBackOnlineAsyncFailed = 800003;
	ErrorCode_ErrGWReconnectGWBackOnlineAsyncException = 800004;
	ErrorCode_ErrReconnectGwclientLatestSeqNoNotHit = 800005;
	ErrorCode_ErrGWReconnectConfirmGetPlayerFailed = 800006;
	ErrorCode_ErrAttrChangeHandleInvalidClientAction = 800007;
	ErrorCode_ErrThrowDamageReqGetStateComponentFailed = 800008;
	ErrorCode_ErrThrowDamageReqEntityIsAlreadyDead = 800009;
	ErrorCode_ErrAnimalDieRequestForceSetDieError = 800010;
	ErrorCode_ErrCollectEntityForceSetEntityDieError = 800011;
	ErrorCode_ErrMonsterBoomForceSetDieError = 800012;
	ErrorCode_ErrAttrChangeReqReplaceAttrListFailed = 800013;
	ErrorCode_ErrReconnectInvalidOperation = 800014;
	ErrorCode_ErrReconnectGwNodeTainted = 800015;
	ErrorCode_ErrFavorRoleNotFound = 900000;
	ErrorCode_ErrFavorConfNotFound = 900001;
	ErrorCode_ErrFavorQuestNotFound = 900002;
	ErrorCode_ErrFavorLevelRewardLimit = 900003;
	ErrorCode_ErrFavorQuestAcceptLimit = 900004;
	ErrorCode_ErrFavorItemLocked = 900005;
	ErrorCode_ErrFavorItemHasUnLocked = 900006;
	ErrorCode_ErrElevatorEntityNotExit = 900007;
	ErrorCode_ErrElevatorConfigNotExit = 900008;
	ErrorCode_ErrElevatorLocked = 900009;
	ErrorCode_ErrElevatorIsNotReverse = 900010;
	ErrorCode_ErrElevatorIsNotForward = 900011;
	ErrorCode_ErrElevatorIsNotStart = 900012;
	ErrorCode_ErrElevatorIsNotEnd = 900013;
	ErrorCode_ErrElevatorFloorError = 900014;
	ErrorCode_ErrHostRefuse = 900015;
	ErrorCode_ErrHostOffline = 900016;
	ErrorCode_ErrHostHasOnline = 900017;
	ErrorCode_ErrHostPlayerMax = 900018;
	ErrorCode_ErrHostRefuseStrangers = 900019;
	ErrorCode_ErrHostForbidJoin = 900020;
	ErrorCode_ErrHostTemporarilyForbidJoin = 900021;
	ErrorCode_ErrSlaveInBlockList = 900022;
	ErrorCode_ErrExceedJoinLevelDiff = 900023;
	ErrorCode_ErrHostNotOpenOnlineFunc = 900024;
	ErrorCode_ErrHostInOtherPlayer = 900025;
	ErrorCode_ErrHostInForbidOnlineQuest = 900026;
	ErrorCode_ErrSlaveHasOnline = 900027;
	ErrorCode_ErrSlaveInForbidOnlineQuest = 900028;
	ErrorCode_ErrSlaveNotOpenOnlineFunc = 900029;
	ErrorCode_ErrSlaveApplyRepeated = 900030;
	ErrorCode_ErrSlaveTryApplySelf = 900031;
	ErrorCode_ErrLobbyTryQuerySelf = 900032;
	ErrorCode_ErrSlaveRequestExpired = 900033;
	ErrorCode_ErrEnterringOtherScene = 900034;
	ErrorCode_ErrWaitingOtherJoin = 900035;
	ErrorCode_ErrWaitListFull = 900036;
	ErrorCode_ErrAlreayInWaitEnterList = 900037;
	ErrorCode_ErrHostNotInBigWorld = 900038;
	ErrorCode_ErrPlayerNotInBigWorld = 900039;
	ErrorCode_ErrPlayerNotInWaitList = 900040;
	ErrorCode_ErrForbidOperaInMatching = 900041;
	ErrorCode_ErrLobbyNotFoundPlayer = 900042;
	ErrorCode_ErrRoleTrailCannotOnline = 900043;
	ErrorCode_ErrHostRoleTrail = 900044;
	ErrorCode_ErrInMatchingCanNotJoinOther = 900045;
	ErrorCode_ErrInMatchCanNotBeApply = 900046;
	ErrorCode_ErrInMatchCanNotAcceptApply = 900047;
	ErrorCode_ErrSlaveInFlow = 900048;
	ErrorCode_ErrHostInFlow = 900049;
	ErrorCode_ErrAchievementNotClinet = 900050;
	ErrorCode_ErrTriggerConditionNotMet = 900051;
	ErrorCode_ErrNpcTraceNotConf = 900052;
	ErrorCode_ErrBuffProducerConfNotFound = 900053;
	ErrorCode_ErrBuffProducerHasDone = 900054;
	ErrorCode_ErrBuffConsumerConfNotFound = 900055;
	ErrorCode_ErrBuffConsumerBuffNotFound = 900056;
	ErrorCode_ErrBuffConsumerEntityNotFound = 900057;
	ErrorCode_ErrItemPosInvaild = 900058;
	ErrorCode_ErrItemIdInvaild = 900059;
	ErrorCode_ErrRouletteFuncIdInvaild = 900060;
	ErrorCode_ErrStateIsRunning = 900061;
	ErrorCode_ErrSceneEntityNotFind = 900062;
	ErrorCode_ErrActionPlayersIsEmpty = 900063;
	ErrorCode_ErrFireBulletNoLauncher = 900064;
	ErrorCode_ErrFireBulletNoTarget = 900065;
	ErrorCode_ErrTurntableConfigNotFound = 900066;
	ErrorCode_ErrTurntableActivityNotOpen = 900067;
	ErrorCode_ErrTurntableActivityIsFinish = 900068;
	ErrorCode_ErrTurntableActivityQuestNotFinish = 900069;
	ErrorCode_ErrTurntableActivityRoundConfigNotFound = 900070;
	ErrorCode_ErrEnrichmentAreaIsEmpty = 900071;
	ErrorCode_ErrEnrichmentAreaNotFind = 900072;
	ErrorCode_ErrEnrichmentAreaInCD = 900073;
	ErrorCode_ErrEnrichmentAreaInFog = 900074;
	ErrorCode_ErrBuffItemConfig = 1000000;
	ErrorCode_ErrBuffItemNotShare = 1000001;
	ErrorCode_ErrBuffItemShareRoleId = 1000002;
	ErrorCode_ErrBuffItemRoleIdNotExist = 1000003;
	ErrorCode_ErrBuffItemNotEnough = 1000004;
	ErrorCode_ErrBuffItemMultiUse = 1000005;
	ErrorCode_ErrBuffItemCdLimit = 1000006;
	ErrorCode_ErrBuffItemNumZero = 1000007;
	ErrorCode_ErrBuffItemNotPlayer = 1000008;
	ErrorCode_ErrSceneItemNotExit = 1000009;
	ErrorCode_ErrSceneItemType = 1000010;
	ErrorCode_ErrSceneItemOperate = 1000011;
	ErrorCode_ErrSceneItemState = 1000012;
	ErrorCode_ErrStateEntityNoExit = 1000013;
	ErrorCode_ErrStateEntityNotTagComp = 1000014;
	ErrorCode_ErrStateEntityTypeNotExit = 1000015;
	ErrorCode_ErrStateEntityStateNotExit = 1000016;
	ErrorCode_ErrStateEntityNotConfig = 1000017;
	ErrorCode_ErrStateEntityStateType = 1000018;
	ErrorCode_ErrStateEntityStateNoChange = 1000019;
	ErrorCode_ErrStateEntitySilent = 1000020;
	ErrorCode_ErrStateEntityComplete = 1000021;
	ErrorCode_ErrStateEntityLock = 1000022;
	ErrorCode_ErrStateEntityNotBorn = 1000023;
	ErrorCode_ErrStateNameNoExit = 1000024;
	ErrorCode_ErrStateInBorn = 1000025;
	ErrorCode_ErrStateCondition = 1000026;
	ErrorCode_ErrStateNotOwner = 1000027;
	ErrorCode_ErrChangeSelfStateObjNotEntity = 1000028;
	ErrorCode_ErrFoundationNotExists = 1000029;
	ErrorCode_ErrTeleControlNotExists = 1000030;
	ErrorCode_ErrFoundationNotComponent = 1000031;
	ErrorCode_ErrFoundationActived = 1000032;
	ErrorCode_ErrFoundationUnActived = 1000033;
	ErrorCode_ErrFoundationNotMatch = 1000034;
	ErrorCode_ErrFoundationNotInRange = 1000035;
	ErrorCode_ErrFoundationNotStateId = 1000036;
	ErrorCode_ErrGravityGearNotExists = 1000037;
	ErrorCode_ErrGravityGearNotConfig = 1000038;
	ErrorCode_ErrGravityGearForbidReset = 1000039;
	ErrorCode_ErrFollowTrackEntityNoExist = 1000040;
	ErrorCode_ErrFollowTrackNotComp = 1000041;
	ErrorCode_ErrFollowTrackNotFoundationId = 1000042;
	ErrorCode_ErrFollowTrackNotFoundation = 1000043;
	ErrorCode_ErrFollowTrackActiveed = 1000044;
	ErrorCode_ErrThrowPlayerNotExit = 1000045;
	ErrorCode_ErrAnimalEntityNotExist = 1000046;
	ErrorCode_ErrNotAnimalEntity = 1000047;
	ErrorCode_ErrSneakBtObjNotExist = 1000048;
	ErrorCode_ErrSneakNodeIdNotExist = 1000049;
	ErrorCode_ErrSneakNotFailedNode = 1000050;
	ErrorCode_ErrSneakNotTime = 1000051;
	ErrorCode_ErrSneakTime = 1000052;
	ErrorCode_ErrInSneak = 1000053;
	ErrorCode_ErrNotInSneak = 1000054;
	ErrorCode_ErrBeControlledEntityNotExist = 1000055;
	ErrorCode_ErrNotBeControlledEntity = 1000056;
	ErrorCode_ErrNotBeControlledPlayer = 1000057;
	ErrorCode_ErrNotBeControlledNotPlayer = 1000058;
	ErrorCode_ErrBeControlledShowEntityNotExist = 1000059;
	ErrorCode_ErrNotBeControlledShowEntity = 1000060;
	ErrorCode_ErrNotBeControlledShowPlayer = 1000061;
	ErrorCode_ErrBeControlledShowNoChange = 1000062;
	ErrorCode_ErrGravityGearCondition = 1000063;
	ErrorCode_ErrChairEntityNoExist = 1000064;
	ErrorCode_ErrChairSitDownErr = 1000065;
	ErrorCode_ErrChairEntity = 1000066;
	ErrorCode_ErrPlayerAlreadySit = 1000067;
	ErrorCode_ErrChairNotStateConfig = 1000068;
	ErrorCode_ErrSneakBtObjIncId = 1000069;
	ErrorCode_ErrTimelineMove = 1000070;
	ErrorCode_ErrBeControlledConfig = 1000071;
	ErrorCode_ErrBeControlledThrow = 1000072;
	ErrorCode_ErrBeControlledTimeNull = 1000073;
	ErrorCode_ErrTriggerEnterActionEffective = 1000074;
	ErrorCode_ErrTriggerLeaveActionEffective = 1000075;
	ErrorCode_ErrTriggerLastActionStateError = 1000076;
	ErrorCode_GuideGroupInfoIsNull = 1100000;
	ErrorCode_GuideStateError = 1100001;
	ErrorCode_GuideConfigNotFind = 1100002;
	ErrorCode_GuideNoEnough = 1100003;
	ErrorCode_GuideIsFinish = 1100004;
	ErrorCode_GuidePerIsNotFinish = 1100005;
	ErrorCode_GuideNoCondition = 1100006;
	ErrorCode_GuideNoCurGroup = 1100007;
	ErrorCode_GuideIsServerMonitor = 1100008;
	ErrorCode_GuideNoPending = 1100009;
	ErrorCode_GuideStepRepeat = 1100010;
	ErrorCode_GuideGroupNoClient = 1100011;
	ErrorCode_GuideGroupDoing = 1100012;
	ErrorCode_GuideGroupIsNotRepeat = 1100013;
	ErrorCode_GuideTutorialConfigNotFind = 1100014;
	ErrorCode_GuideTutorialIsUnlock = 1100015;
	ErrorCode_GuideTutorialNotUnlock = 1100016;
	ErrorCode_GuideTutorialIsReceive = 1100017;
	ErrorCode_GuideTutorialAwardConfigNotFind = 1100018;
	ErrorCode_GuideTutorialAwardError = 1100019;
	ErrorCode_GuideGroupIdNoMatch = 1100020;
	ErrorCode_ErrRequestTypeNotExist = 1100021;
	ErrorCode_ErrIllustratedEntryLock = 1100022;
	ErrorCode_ErrIllustratedEntryBanUnlock = 1100023;
	ErrorCode_ErrRequestTypeMax = 1100024;
	ErrorCode_AchievementEntryNotExist = 1100025;
	ErrorCode_AchievementEntryNotFinish = 1100026;
	ErrorCode_AchievementEntryIsReceive = 1100027;
	ErrorCode_AchievementEntryNoConfig = 1100028;
	ErrorCode_AchievementEntryNotOpen = 1100029;
	ErrorCode_AchievementGroupEntryNotExist = 1100030;
	ErrorCode_AchievementGroupEntryNotFinish = 1100031;
	ErrorCode_AchievementGroupEntryIsReceive = 1100032;
	ErrorCode_AchievementGroupEntryNoConfig = 1100033;
	ErrorCode_AchievementGroupEntryNotOpen = 1100034;
	ErrorCode_SilentAreaNotConfig = 1100035;
	ErrorCode_SilentAreaNotUnlock = 1100036;
	ErrorCode_SilentAreaNotFinish = 1100037;
	ErrorCode_SilentAreaReceive = 1100038;
	ErrorCode_AchievementEntryIsFinish = 1100039;
	ErrorCode_AchievementEntryNeedCondition = 1100040;
	ErrorCode_AchievementSceneNotFind = 1100041;
	ErrorCode_BirthdayIsSetting = 1100042;
	ErrorCode_BirthdayInValid = 1100043;
	ErrorCode_RoleShowListMaxCount = 1100044;
	ErrorCode_RoleShowListHasRepeatId = 1100045;
	ErrorCode_RoleShowListHasInValidId = 1100046;
	ErrorCode_CardShowListMaxCount = 1100047;
	ErrorCode_CardShowListHasRepeatId = 1100048;
	ErrorCode_CardShowListHasInValidId = 1100049;
	ErrorCode_CardRepeatSet = 1100050;
	ErrorCode_CardIsInValidId = 1100051;
	ErrorCode_CardIsRead = 1100052;
	ErrorCode_RoleShowListEmpty = 1100053;
	ErrorCode_SettingNotFind = 1100054;
	ErrorCode_RogueRoadConfigNotFind = 1100055;
	ErrorCode_RollRogueRoomError = 1100056;
	ErrorCode_RollRogueBuffError = 1100057;
	ErrorCode_GetRogueRoomIdsError = 1100058;
	ErrorCode_GetRoguePortalEntityNotFind = 1100059;
	ErrorCode_GetRoguePortalLocationNotFind = 1100060;
	ErrorCode_HttpTimeout = 1100061;
	ErrorCode_HttpResultUndefine = 1100062;
	ErrorCode_ConvGateTimeout = 1100063;
	ErrorCode_ProtoKeyTimeout = 1100064;
	ErrorCode_LoginReqTimeout = 1100065;
	ErrorCode_EnterGameTimeout = 1100066;
	ErrorCode_ReReconvReqTimeout = 1100067;
	ErrorCode_RecvSeqNoNotHit = 1100068;
	ErrorCode_AchievementFuncNotOpen = 1100069;
	ErrorCode_RoguelikeInstComponentNotFind = 1100070;
	ErrorCode_RogueCurRoomDataIsNull = 1100071;
	ErrorCode_LevelPlayComponentNotFind = 1100072;
	ErrorCode_OpenLevelPlayFail = 1100073;
	ErrorCode_CloseLevelPlayFail = 1100074;
	ErrorCode_RogueRoomConfigNotFind = 1100075;
	ErrorCode_RogueRoomTypeNotRight = 1100076;
	ErrorCode_RogueRoomTypeNotConfig = 1100077;
	ErrorCode_RogueRoomSubLevelNotFind = 1100078;
	ErrorCode_SelectNextRoomIsValid = 1100079;
	ErrorCode_RogueGainPackageFail = 1100080;
	ErrorCode_RogueGainListIsNull = 1100081;
	ErrorCode_RogueGainIdValid = 1100082;
	ErrorCode_QulityListCountNotRight = 1100083;
	ErrorCode_RandomResultCountNotRight = 1100084;
	ErrorCode_GuaranteeRogueBuffInValid = 1100085;
	ErrorCode_RoleBuffPoolNotFind = 1100086;
	ErrorCode_NotValidBuff = 1100087;
	ErrorCode_NotValidPhantom = 1100088;
	ErrorCode_RandomPhantomFail = 1100089;
	ErrorCode_NotValidRole = 1100090;
	ErrorCode_RandomRoleFail = 1100091;
	ErrorCode_RogueRoadNotFind = 1100092;
	ErrorCode_ResultCountNotMatch = 1100093;
	ErrorCode_InValidRoomCountNotMatch = 1100094;
	ErrorCode_GuaranteeRogueRoomInValid = 1100095;
	ErrorCode_InstIdNotMatchLevelPlayId = 1100096;
	ErrorCode_GetRoomBornPositionFail = 1100097;
	ErrorCode_RoguePortalDataNotClean = 1100098;
	ErrorCode_RoguePortalRoomDataNotFind = 1100099;
	ErrorCode_RogueSelectRoomFail = 1100100;
	ErrorCode_RogueProgressDataIsEmpty = 1100101;
	ErrorCode_RogueGainTypeIsValid = 1100102;
	ErrorCode_RougeNotOpen = 1100103;
	ErrorCode_RougeInstIdIsValid = 1100104;
	ErrorCode_RogueRoleListCountNotRight = 1100105;
	ErrorCode_RogueMainRoleConfigNotFind = 1100106;
	ErrorCode_RogueGainDataDictError = 1100107;
	ErrorCode_RogueDiscountedBuffConfigNotFind = 1100108;
	ErrorCode_RogueDiscountedRoomTypeConfigNotFind = 1100109;
	ErrorCode_RogueDiscountedShopConfigNotFind = 1100110;
	ErrorCode_RogueDiscountedCalculateFail = 1100111;
	ErrorCode_RogueMoneyNotEnough = 1100112;
	ErrorCode_RougeShopRefreshTimeEmpyt = 1100113;
	ErrorCode_RougeCurRoomNotFinish = 1100114;
	ErrorCode_PlayerDataRepairErrorDebug = 1100115;
	ErrorCode_PlayerDataRepairError = 1100116;
	ErrorCode_CreateCharacterReqTimeout = 1100117;
	ErrorCode_SignActivityNotOpen = 1100118;
	ErrorCode_SignActivityNoConfig = 1100119;
	ErrorCode_SignActivityIndexValid = 1100120;
	ErrorCode_SignActivityNoData = 1100121;
	ErrorCode_SignActivityStateNotRight = 1100122;
	ErrorCode_RogueSeasonDataNull = 1100123;
	ErrorCode_RogueSeasonConfigNotFind = 1100124;
	ErrorCode_RogueTokenConfigNotFind = 1100125;
	ErrorCode_RogueTokenStatusVaild = 1100126;
	ErrorCode_RogueSeasonRewardConfigNotFind = 1100127;
	ErrorCode_RogueSeasonRewardIsReceive = 1100128;
	ErrorCode_RougeSeasonPointNotEnough = 1100129;
	ErrorCode_RougeRoomDataError = 1100130;
	ErrorCode_RogueGainDataError = 1100131;
	ErrorCode_RogueRoleIdsError = 1100132;
	ErrorCode_RogueRogueRoomRouteError = 1100133;
	ErrorCode_RogueGetCurRoomLevelPlayError = 1100134;
	ErrorCode_RogueTalentTreeConfigNotFind = 1100135;
	ErrorCode_RogueTalentTreeConditionNotMet = 1100136;
	ErrorCode_RogueTalentTreePerNodeLock = 1100137;
	ErrorCode_RogueTalentTreeNodeMaxLevel = 1100138;
	ErrorCode_RogueTalentTreeConsumeNoEnough = 1100139;
	ErrorCode_RogueRoadRandomRoleBuffError = 1100140;
	ErrorCode_ActivityFuncNotOpen = 1100141;
	ErrorCode_RogueGuideInstNotSupport = 1100142;
	ErrorCode_ErrPayReceiptCannotRefundClose = 1100143;
	ErrorCode_ErrPayReceiptRefundCloseFail = 1100144;
	ErrorCode_PayRefundOverdueBan = 1100145;
	ErrorCode_UnknowChannelId = 1100146;
	ErrorCode_LoginServerNotFind = 1100147;
	ErrorCode_OldGameNodeLogoutFail = 1100148;
	ErrorCode_LoginHandleSwitchError = 1100149;
	ErrorCode_NoAvailableLoginService = 1100150;
	ErrorCode_ServerIsClosing = 1100151;
	ErrorCode_AddPlayerRecordFail = 1100152;
	ErrorCode_FindGatewayFail = 1100153;
	ErrorCode_CommonFightRolesInfoError = 1100154;
	ErrorCode_CurRoleEntityNotFind = 1100155;
	ErrorCode_ScenePlayerInfoNotFind = 1100156;
	ErrorCode_IncrAdviceVoteError = 1100157;
	ErrorCode_InsertAdviceError = 1100158;
	ErrorCode_UpdateAdviceError = 1100159;
	ErrorCode_DeleteAdviceError = 1100160;
	ErrorCode_EntityNoInWater = 1100161;
	ErrorCode_AttributeComponentNotFind = 1100162;
	ErrorCode_TryAddItemDataFail = 1100163;
	ErrorCode_ItemConfigTypeNotRight = 1100164;
	ErrorCode_ItemLogicNotFind = 1100165;
	ErrorCode_RemoveItemLogicNotFind = 1100166;
	ErrorCode_AddItemLogicNotFind = 1100167;
	ErrorCode_AddItemFail = 1100168;
	ErrorCode_UpdatePlayerARemarkFail = 1100169;
	ErrorCode_DeleteFriendApplyFail = 1100170;
	ErrorCode_DeleteFriendshipFail = 1100171;
	ErrorCode_WorldTeamIsNull = 1100172;
	ErrorCode_TeamCountNotRight = 1100173;
	ErrorCode_AddCalabashExpFail = 1100174;
	ErrorCode_SendRequestToSdkFail = 1100175;
	ErrorCode_DirtyWordErrorCode = 1100176;
	ErrorCode_HarvestActivityNotOpen = 1100177;
	ErrorCode_HarvestActivityPointReceived = 1100178;
	ErrorCode_HarvestActivityPointNotConfig = 1100179;
	ErrorCode_HarvestActivityPointNotEnough = 1100180;
	ErrorCode_HarvestActivityLevelNoData = 1100181;
	ErrorCode_HarvestActivityLevelReceived = 1100182;
	ErrorCode_HarvestActivityLevelNotConfig = 1100183;
	ErrorCode_HarvestActivityLevelNotEnough = 1100184;
	ErrorCode_HarvestActivityLevelDiffNotConfig = 1100185;
	ErrorCode_RoguelikeEventConfigNotFind = 1100186;
	ErrorCode_RoguelikeEventIndexError = 1100187;
	ErrorCode_RoguelikeInstConfigNotFind = 1100188;
	ErrorCode_RoguelikeMainRoleError = 1100189;
	ErrorCode_RoguelikeEventIsEmpty = 1100190;
	ErrorCode_RoguelikeEventRandomError = 1100191;
	ErrorCode_RoguelikeEventRandomEmpty = 1100192;
	ErrorCode_PhantomCollectActivityNotOpen = 1100193;
	ErrorCode_PhantomCollectActivitynNotConfig = 1100194;
	ErrorCode_PhantomCollectActivitynNoData = 1100195;
	ErrorCode_PhantomCollectActivityReceived = 1100196;
	ErrorCode_HarvestInstIdInValid = 1100197;
	ErrorCode_HarvestVarNotExist = 1100198;
	ErrorCode_HarvestResultCacheNotExist = 1100199;
	ErrorCode_HarvestInstNotOpen = 1100200;
	ErrorCode_HarvestActivityLimitDataNotFind = 1100201;
	ErrorCode_HarvestDiffConfigNotFind = 1100202;
	ErrorCode_HarvestActivityDiffConfigNotFind = 1100203;
	ErrorCode_ErrIllustratedConfigNotFind = 1100204;
	ErrorCode_CharacterAlreadyCreated = 1100205;
	ErrorCode_SdkHelperInternalError = 1100206;
	ErrorCode_GameServiceControllerInternalError = 1100207;
	ErrorCode_DoGetCacheInfoInternalError = 1100208;
	ErrorCode_DoGetCacheInfosInternalError = 1100209;
	ErrorCode_DeleteFriendLoadedInternalError = 1100210;
	ErrorCode_UpdateFriendRemarkInternalError = 1100211;
	ErrorCode_CheckApplyRequestInternalError = 1100212;
	ErrorCode_OnReLoginInternalError = 1100213;
	ErrorCode_CreateCharacterRequestInternalError = 1100214;
	ErrorCode_LoginRequestInternalError = 1100215;
	ErrorCode_LoginRequestInternalError2 = 1100216;
	ErrorCode_EnterGameRequestInternalError = 1100217;
	ErrorCode_ReconnectRequestInternalError = 1100218;
	ErrorCode_ReconnectRequestInternalError2 = 1100219;
	ErrorCode_SwitchNodeInternalError = 1100220;
	ErrorCode_InnerLoginInternalError = 1100221;
	ErrorCode_AccessTokenInternalError = 1100222;
	ErrorCode_CreateCharacterInternalError = 1100223;
	ErrorCode_RogueSeasonNotValid = 1100224;
	ErrorCode_RogueCurRoleNotFind = 1100225;
	ErrorCode_RogueSeasonNotMatch = 1100226;
	ErrorCode_RogueGainLogicNotFind = 1100227;
	ErrorCode_RogueBuffConfigNotFind = 1100228;
	ErrorCode_RoguePhantomNotConfig = 1100229;
	ErrorCode_RogueRoleNotConfig = 1100230;
	ErrorCode_RoguePopularSlotConfigNotFind = 1100231;
	ErrorCode_RoguePopularCountIsMax = 1100232;
	ErrorCode_RoguePopularConfigNotFind = 1100233;
	ErrorCode_RogueRoleNotOpen = 1100234;
	ErrorCode_RogueGuideInstError = 1100235;
	ErrorCode_RogueMainRoleChange = 1100236;
	ErrorCode_RogueShopConfigNull = 1100237;
	ErrorCode_RogueGainIsSelect = 1100238;
	ErrorCode_RogueGainNoRefresh = 1100239;
	ErrorCode_RogueRefreshCostNotFind = 1100240;
	ErrorCode_RogueNotMaxLayer = 1100241;
	ErrorCode_RogueRoomSubLevelNotFind2 = 1100242;
	ErrorCode_RoguePopularSlotArgConfigNotFind = 1100243;
	ErrorCode_RogueInstSeasonNotMatch = 1100244;
	ErrorCode_RogueSeasonTalentTreeNotFind = 1100245;
	ErrorCode_RogueGainOptionsNotFind = 1100246;
	ErrorCode_RogueGainIsSell = 1100247;
	ErrorCode_RogueMiracleCreationConfNotFind = 1100248;
	ErrorCode_RogueGainPackageError = 1100249;
	ErrorCode_RogueTrialRoleIdsCountNotRight = 1100250;
	ErrorCode_RogueVarNotExist = 1100251;
	ErrorCode_ErrChatNotFriendNorOnline = 1200000;
	ErrorCode_ErrChatContentFilterFailed = 1200001;
	ErrorCode_ErrChatLockState = 1200002;
	ErrorCode_ErrChatEmojiNotValid = 1200003;
	ErrorCode_ErrChatSendTooFast = 1200004;
	ErrorCode_ErrChatMuteNotValidId = 1200005;
	ErrorCode_ErrBanChatDefault = 1200006;
	ErrorCode_ErrRoleQuestFuncNotOpen = 1200007;
	ErrorCode_ErrRoleQuestMaxCount = 1200008;
	ErrorCode_ErrRoleQuestUnlockPointNotEnough = 1200009;
	ErrorCode_ErrDailyQuestNotFoundArea = 1200010;
	ErrorCode_ErrDailyQuestNotFoundInfluence = 1200011;
	ErrorCode_ErrDailyQuestRewardAlreadyGet = 1200012;
	ErrorCode_ErrDailyQuestDataError = 1200013;
	ErrorCode_ErrDailyQuestCantGetReward = 1200014;
	ErrorCode_ErrEntityBuffProducerStateError = 1200015;
	ErrorCode_ErrEntityBuffProducerNotFound = 1200016;
	ErrorCode_ErrVoiceRemainChangeRoleNotInFormation = 1200017;
	ErrorCode_ErrVoiceRemainChangeRoleNotAlive = 1200018;
	ErrorCode_ErrApplyEffectFail = 1300000;
	ErrorCode_ErrOutofBattleTargetNotMonster = 1300001;
	ErrorCode_ErrMonsterBoomEntityNotExists = 1300002;
	ErrorCode_ErrMonsterBoomNotMonster = 1300003;
	ErrorCode_ErrMonsterBoomIsDead = 1300004;
	ErrorCode_ErrAnimationStateSpecialFuncException = 1300005;
	ErrorCode_ErrPayConfigNotFound = 1400000;
	ErrorCode_ErrPayCreateReceiptFail = 1400001;
	ErrorCode_ErrPayReceiptNotFound = 1400002;
	ErrorCode_ErrPayReceiptPlayerIdUnMatch = 1400003;
	ErrorCode_ErrPayReceiptCannotDealClose = 1400004;
	ErrorCode_ErrPayReceiptDealCloseFail = 1400005;
	ErrorCode_ErrPayNotEnable = 1400006;
	ErrorCode_ErrPayDataChanged = 1400007;
	ErrorCode_ErrPayUpdateReceiptFail = 1400008;
	ErrorCode_ErrGachaConfigNotFound = 1400009;
	ErrorCode_ErrGachaRuleGroupConfigNotFound = 1400010;
	ErrorCode_ErrGachaRulesNotFound = 1400011;
	ErrorCode_ErrGachaTypeKnowns = 1400012;
	ErrorCode_ErrGachaDailyTimesLimit = 1400013;
	ErrorCode_ErrGachaTotalTimesLimit = 1400014;
	ErrorCode_ErrGachaDailyTotalTimesLimit = 1400015;
	ErrorCode_ErrGachaIsNotOpen = 1400016;
	ErrorCode_ErrGachaIsNotInOpenTime = 1400017;
	ErrorCode_ErrGachaFuncIsNotOpen = 1400018;
	ErrorCode_ErrItemExchageConfigNotFound = 1400019;
	ErrorCode_ErrItemExchageDailyTimesLimit = 1400020;
	ErrorCode_ErrItemExchangeTotalTimesLimit = 1400021;
	ErrorCode_ErrGachaLimitNotFound = 1400022;
	ErrorCode_ErrGachaLimitsEmpty = 1400023;
	ErrorCode_ErrTextServerTimeout = 1400024;
	ErrorCode_ErrTextServerResFail = 1400025;
	ErrorCode_ErrTextServerResEmpty = 1400026;
	ErrorCode_ErrTextServerResException = 1400027;
	ErrorCode_ErrItemExchageParamError = 1400028;
	ErrorCode_ErrBattlePassFuncIsNotOpen = 1400029;
	ErrorCode_ErrPayShopFuncIsNotOpen = 1400030;
	ErrorCode_ErrGachaPoolConfigNotFound = 1400031;
	ErrorCode_ErrGachaPoolIsNotOpen = 1400032;
	ErrorCode_ErrGachaPoolIsNotInOpenTime = 1400033;
	ErrorCode_ErrGachaPoolLimitNotFound = 1400034;
	ErrorCode_ErrGachaPoolNotBelongToGacha = 1400035;
	ErrorCode_ErrGachaUsePoolIdNotSet = 1400036;
	ErrorCode_ErrGachaTimesNonsupport = 1400037;
	ErrorCode_ErrGachaFrontRuleGroupNotFinish = 1400038;
	ErrorCode_ErrGachaRuleGroupFinish = 1400039;
	ErrorCode_ErrPayGiftBuyLimit = 1400040;
	ErrorCode_ErrPayGiftTypeUnknown = 1400041;
	ErrorCode_ErrPayGiftNotInSellTime = 1400042;
	ErrorCode_ErrBattlePassBuyLevelLimit = 1400043;
	ErrorCode_ErrBattlePassBuyLevelError = 1400044;
	ErrorCode_ErrJsFileNotFound = 1400045;
	ErrorCode_ErrPayReceiptIsRefunded = 1400046;
	ErrorCode_ErrPayReceiptIsNotPay = 1400047;
	ErrorCode_ErrPayReceiptRefundFail = 1400048;
	ErrorCode_ErrPayGiftLocked = 1400049;
	ErrorCode_ErrPayGiftBuyConditionLimit = 1400050;
	ErrorCode_ErrInfoDisplayId = 1500000;
	ErrorCode_ErrItemAlreadyInCd = 1500001;
	ErrorCode_ErrCantFinAdventureConfig = 1500002;
	ErrorCode_ErrAdventureRewardReceived = 1500003;
	ErrorCode_ErrAdventureTaskCache = 1500004;
	ErrorCode_ErrAdventureState = 1500005;
	ErrorCode_ErrAdventureRewardOrder = 1500006;
	ErrorCode_ErrAdventureChapterState = 1500007;
	ErrorCode_ErrCantDetectRepeat = 1500008;
	ErrorCode_ErrNotInCurrentFollowList = 1500009;
	ErrorCode_ErrCantDetectOtherDetectionType = 1500010;
	ErrorCode_ErrNotSelectCurrentDetectionId = 1500011;
	ErrorCode_ErrDetectionConfigNotFound = 1500012;
	ErrorCode_ErrDetectionListCantBeEmpty = 1500013;
	ErrorCode_ErrCantFindAnyDetectionTarget = 1500014;
	ErrorCode_ErrCantFindTurntableComponentEntity = 1500015;
	ErrorCode_ErrHaveNoTurntableControlComponent = 1500016;
	ErrorCode_ErrCantFindLevitationMagnetComponentEntity = 1500017;
	ErrorCode_ErrHaveNoLevitaionMagnetComponent = 1500018;
	ErrorCode_ErrCantFindBoardEntity = 1500019;
	ErrorCode_ErrCantFindPlacementEntity = 1500020;
	ErrorCode_ErrHaveNoPlacementComponent = 1500021;
	ErrorCode_ErrCantFindBoardEntityComponent = 1500022;
	ErrorCode_ErrBoardHaveNoAnyPlacement = 1500023;
	ErrorCode_ErrBoardNotActiveAllGrid = 1500024;
	ErrorCode_ErrNeedBeControlledBefore = 1500025;
	ErrorCode_ErrPlaceFailOfAlreadyOnBoard = 1500026;
	ErrorCode_ErrInvalidBoardPosition = 1500027;
	ErrorCode_ErrNeedRemoveControlRelation = 1500028;
	ErrorCode_ErrNotOccupyOnBoard = 1500029;
	ErrorCode_ErrHaveNoFillRule = 1500030;
	ErrorCode_ErrGridPosAlreadyOccupied = 1500031;
	ErrorCode_ErrHaveNoJigsawFoundationConfig = 1500032;
	ErrorCode_ErrInvalidGridPos = 1500033;
	ErrorCode_ErrGridPosAlreadyActive = 1500034;
	ErrorCode_ErrCantPlaceItemOnBoard = 1500035;
	ErrorCode_ErrNeedJigsawFoundationComponentWhenBeControlled = 1500036;
	ErrorCode_ErrHaveNoBoardComponentConfig = 1500037;
	ErrorCode_ErrNeedJigsawItemComponentWhenBeControlled = 1500038;
	ErrorCode_ErrCantFindOriginBoardEntity = 1500039;
	ErrorCode_ErrDistanceNotInRangeBetweenEntity = 1500040;
	ErrorCode_ErrJigsawFoundationIsAlreadySilent = 1500041;
	ErrorCode_ErrCrystalEntityNotFound = 1500042;
	ErrorCode_ErrGachaBoardEntityNotFound = 1500043;
	ErrorCode_ErrNotCrystalEntity = 1500044;
	ErrorCode_ErrNotGachaFoundationEntity = 1500045;
	ErrorCode_ErrGachaHoleIsFull = 1500046;
	ErrorCode_ErrJigsawItemSilent = 1500047;
	ErrorCode_ErrThrowDamageConfigNotExists = 1500048;
	ErrorCode_ErrThrowDamageComponetNotExists = 1500049;
	ErrorCode_ErrEggNotMatchEggFoundation = 1500050;
	ErrorCode_ProgressBarEntityNotFound = 1500051;
	ErrorCode_NotProgressBarEntity = 1500052;
	ErrorCode_ProgressBarIsSilent = 1500053;
	ErrorCode_ScenePlayerInfoNotFound = 1500054;
	ErrorCode_PlayerNotInAnyScene = 1500055;
	ErrorCode_TeleportNotInValidDistance = 1500056;
	ErrorCode_AddMapMarkInfoLackOfTeleportParam = 1500057;
	ErrorCode_TemporaryTeleportNotExists = 1500058;
	ErrorCode_ErrNotHostPlayer = 1500059;
	ErrorCode_ErrMarkIdNotExists = 1500060;
	ErrorCode_ErrCantUpdateTemporaryTeleportMarkInfo = 1500061;
	ErrorCode_NotHostCantAddTemporaty = 1500062;
	ErrorCode_TemporaryTeleportPosIsNotWalkable = 1500063;
	ErrorCode_BadTemporaryTeleportConfig = 1500064;
	ErrorCode_HaveNoTemporaryTeleportComponent = 1500065;
	ErrorCode_ErrCantDetectAtInvalidPoint = 1500066;
	ErrorCode_ErrNotDetectionTreasureBoxBefore = 1500067;
	ErrorCode_ErrJigsawFoundationIsCompleteCantModifyGridState = 1500068;
	ErrorCode_GridIsActiveCantSwitchState = 1500069;
	ErrorCode_GridIsOccupiedCantSwitchState = 1500070;
	ErrorCode_ErrHaveNoBaseInfoComponent = 1500071;
	ErrorCode_ErrHaveNoParentEntity = 1500072;
	ErrorCode_NotRelationEntity = 1500073;
	ErrorCode_ErrLevelPlayNotRunning = 1500074;
	ErrorCode_ErrStateCantChangeWhenLifeCycleDestroy = 1500075;
	ErrorCode_ErrRangeEntityIdNotFoundWhenForbidTempTeleport = 1500076;
	ErrorCode_TemporaryTeleportIsForbidden = 1500077;
	ErrorCode_ErrGravityGearIsComplete = 1500078;
	ErrorCode_ErrInvalidRoleWhenUpdatePassiveSkill = 1500079;
	ErrorCode_ErrInvalidRolePassiveSkillId = 1500080;
	ErrorCode_ErrPassiveSkillNotAddBuff = 1500081;
	ErrorCode_ErrPassiveSkillCantSpecifyBuff = 1500082;
	ErrorCode_ErrPassiveSkillAddBuffFail = 1500083;
	ErrorCode_ErrPassiveSkillAddBulletFail = 1500084;
	ErrorCode_ErrBuffCreatePassiveSkillFail = 1500085;
	ErrorCode_ErrInvalidPreContext = 1500086;
	ErrorCode_ErrBadPassiveSkillId = 1500087;
	ErrorCode_ErrPassiveSkillComponentNotFound = 1500088;
	ErrorCode_ErrRepeatePassiveSkill = 1500089;
	ErrorCode_ErrBadPassiveSkillTriggerType = 1500090;
	ErrorCode_ErrAddPassiveSkillFailOfEntityNotFound = 1500091;
	ErrorCode_ErrEntityNotClientControlWhenAddPassiveSkill = 1500092;
	ErrorCode_ErrEntityNotClientControlWhenRemovePassiveSkill = 1500093;
	ErrorCode_ErrPassiveSkillNotFoundWhenRemovePassiveSkill = 1500094;
	ErrorCode_ErrRepeatedBattleContext = 1500095;
	ErrorCode_ErrPassiveSkillAddSkillFail = 1500096;
	ErrorCode_ErrCombatSendPackAbnormal = 1500097;
	ErrorCode_ErrContextCheckFail = 1500098;
	ErrorCode_ErrFsmComponentNotFound = 1500099;
	ErrorCode_ErrFsmCreateContextFail = 1500100;
	ErrorCode_ErrFsmStateBehaviorPreMessageCantBeZero = 1500101;
	ErrorCode_ErrFsmBehaviorCheckBattleContextFail = 1500102;
	ErrorCode_ErrFsmPlayMontageLackPreMessage = 1500103;
	ErrorCode_ErrFsmPlayMontageCheckContextFail = 1500104;
	ErrorCode_ErrFsmPlayMontageConfigCheckFail = 1500105;
	ErrorCode_ErrSkillFlowNotExist = 1500106;
	ErrorCode_ErrGetReportDataOverLimit = 1500107;
	ErrorCode_ErrGetReportDataTooFast = 1500108;
	ErrorCode_ErrNotInAnyScene = 1500109;
	ErrorCode_ErrAceLogDataNotFound = 1500110;
	ErrorCode_ErrAceLogDataRepeatReport = 1500111;
	ErrorCode_ErrAceInvalidLogId = 1500112;
	ErrorCode_ErrAceSceneGlobalObjNotFound = 1500113;
	ErrorCode_ErrAceBadParam = 1500114;
	ErrorCode_ErrS2CConfirmIdNotExists = 1500115;
	ErrorCode_ErrPassiveSkillConfigNotFound = 1500116;
	ErrorCode_ErrNotBehaviorController = 1500117;
	ErrorCode_ErrPlayMontageFail = 1500118;
	ErrorCode_ErrFightDataInConsistent = 1500119;
	ErrorCode_ErrCombatSkillGAHandleGetEntityFailed = 1600000;
	ErrorCode_ErrCombatMaterialHandleGetEntityFailed = 1600001;
	ErrorCode_ErrCombatParticleHandleGetEntityFailed = 1600002;
	ErrorCode_ErrCombatPartLifeChangeEntityNotExisted = 1600003;
	ErrorCode_ErrCombatCreateBulletTargetNotExisted = 1600004;
	ErrorCode_ErrCombatDeleteBulletTargetNotExisted = 1600005;
	ErrorCode_ErrCombatDeleteBulletGetEntityFailed = 1600006;
	ErrorCode_ErrCombatBulletTargetNoExist = 1600007;
	ErrorCode_ErrPartEntityNotExisted = 1600008;
	ErrorCode_ErrNoAiControlRights = 1600009;
	ErrorCode_ErrAiHateComponent = 1600010;
	ErrorCode_ErrSummonerPlayerControl = 1600011;
	ErrorCode_ErrConfDamageNotFound = 1600012;
	ErrorCode_ErrProcessDamageFailed = 1600013;
	ErrorCode_ErrInjuryFreeLandingTag = 1600014;
	ErrorCode_ErrNotFindActiveGameplayEffect = 1600015;
	ErrorCode_NotClientControlBuff = 1600016;
	ErrorCode_ErrBuffNoEffectConf = 1600017;
	ErrorCode_ErrBuffCannotCreateBullet = 1600018;
	ErrorCode_ErrBuffCannotCreateBuff = 1600019;
	ErrorCode_ErrNoBuffConf = 1600020;
	ErrorCode_ErrStoppedAi = 1600021;
	ErrorCode_ErrEntityIsNotAlive = 1600022;
	ErrorCode_ErrSummonCannotSwitchAiControl = 1600023;
	ErrorCode_ErrAiControlNotChange = 1600024;
	ErrorCode_ErrPlayerCannotControlEntity = 1600025;
	ErrorCode_ErrNotFoundBuffEffect = 1600026;
	ErrorCode_ErrBuffEffectAuthority = 1600027;
	ErrorCode_ErrConcomitantDestroy = 1600028;
	ErrorCode_ErrPlayerFollowersComponent = 1600029;
	ErrorCode_ErrEntityFsmMachineNotExist = 1700000;
	ErrorCode_ErrEntityFsmStateIncorrect = 1700001;
	ErrorCode_ErrIsNotAiControler = 1700002;
	ErrorCode_ErrIEntityFsmCantTransit = 1700003;
	ErrorCode_ErrIEntityFsmTransitCondition = 1700004;
	ErrorCode_ErrIEntityFsmTransitToState = 1700005;
	ErrorCode_ErrIEntityFsmConfirmNotExist = 1700006;
	ErrorCode_ErrIEntityFsmConfirmNotWait = 1700007;
	ErrorCode_ErrITest = 1700008;
	ErrorCode_ErrITest1 = 1700009;
	ErrorCode_ErrITest2 = 1700010;
	ErrorCode_ErrIEntityFsmCondCantPass = 1700011;
	ErrorCode_ErrIEntityFsmActionParamType = 1700012;
	ErrorCode_ErrIEntityFsmActionParam = 1700013;
	ErrorCode_ErrIEntityFsmActionExecuted = 1700014;
	ErrorCode_ErrIEntityFsmActionNotMatchState = 1700015;
	ErrorCode_ErrSkillNotExecuting = 1700016;
	ErrorCode_ErrExecuteSkillNotMatch = 1700017;
	ErrorCode_ErrBlueprintPinNotSupport = 1700018;
	ErrorCode_ErrBlueprintPinNotMontage = 1700019;
	ErrorCode_ErrBlueprintPinMontageIndex = 1700020;
	ErrorCode_ErrConfSkillNotExist = 1700021;
	ErrorCode_ErrSkillGANotExist = 1700022;
	ErrorCode_ErrSkillGAHaveNoBuff = 1700023;
	ErrorCode_ErrSkillGAHaveNoBuffId = 1700024;
	ErrorCode_ErrSkillGAHaveNoBullet = 1700025;
	ErrorCode_ErrSkillGAHaveNoBulletId = 1700026;
	ErrorCode_ErrMontageNotMatchSkill = 1700027;
	ErrorCode_ErrMontageIndexError = 1700028;
	ErrorCode_ErrVisiionSkillNotEquip = 1700029;
	ErrorCode_ErrSkillCD = 1700030;
	ErrorCode_ErrHaveNoBattleContext = 1700031;
	ErrorCode_ErrContextFsmActionOnce = 1700032;
	ErrorCode_ErrPlayMontageButNoSkill = 1700033;
	ErrorCode_ErrMontageNotExist = 1700034;
	ErrorCode_ErrMontageNotContainBuff = 1700035;
	ErrorCode_ErrMontageNotContainBullet = 1700036;
	ErrorCode_ErrMontageCantBring = 1700037;
	ErrorCode_ErrSkillInfoParamError = 1700038;
	ErrorCode_ErrNoWorldTeam = 1800000;
	ErrorCode_ErrWorldTeamNoMember = 1800001;
	ErrorCode_ErrNoHostIs = 1800002;
	ErrorCode_ErrNoInstId = 1800003;
	ErrorCode_ErrNoTeamInfo = 1800004;
	ErrorCode_ErrHostNoTeamInfo = 1800005;
	ErrorCode_ErrHasInMatchTeam = 1800006;
	ErrorCode_ErrNotInMatchTeam = 1800007;
	ErrorCode_ErrHostIsParam = 1800008;
	ErrorCode_ErrMatchModeIParam = 1800009;
	ErrorCode_ErrMatchTeamFull = 1800010;
	ErrorCode_ErrLocalTeamCanNotOpt = 1800011;
	ErrorCode_ErrHostInLocalTeam = 1800012;
	ErrorCode_ErrNoMatchNodeId = 1800013;
	ErrorCode_ErrPlayerSceneIsNull = 1800014;
	ErrorCode_ErrPlayerSceneRolesNull = 1800015;
	ErrorCode_ErrInvalidMatchState = 1800016;
	ErrorCode_ErrRepeatedMatchState = 1800017;
	ErrorCode_ErrApplyrPlayerInMatchNotEnterMatchTeam = 1800018;
	ErrorCode_ErrOtherVersionLowNoOperate = 1800019;
	ErrorCode_ErrPlayerVersionLowNeedUpdate = 1800020;
	ErrorCode_ErrMultiGameModeNoWorldLevelDown = 1800021;
	ErrorCode_ErrMultiGameModeNoWorldLevelRegain = 1800022;
	ErrorCode_ErrOtherHasOnline = 1800023;
	ErrorCode_SwitchRoleNotInCurrentFormation = 1800024;
	ErrorCode_ErrNoChangeRoles = 1800025;
	ErrorCode_ErrExploreSkillPullGiantMultiGame = 1800026;
	ErrorCode_ErrExploreSkillPullGiantNotExist = 1800027;
	ErrorCode_ErrHttpRpcParam = 1800028;
	ErrorCode_ErrPlayerNotInGameNode = 1800029;
	ErrorCode_ErrApplyJoinPlayerCurRoleIsDead = 1800030;
	ErrorCode_ErrPlayerCurRoleIsDeadNoJoin = 1800031;
	ErrorCode_ErrPlayerCurRoleIsDead = 1800032;
	ErrorCode_ErrSwitchMultiverse = 1800033;
	ErrorCode_ErrSwitchNode = 1800034;
	ErrorCode_ErrMatchConfirmPlayerDead = 1800035;
	ErrorCode_ErrCheckPublicResourceVersionLower = 1800036;
	ErrorCode_ErrCheckPublicResourceVersionHigher = 1800037;
	ErrorCode_ErrCheckPublicResourceClientVersionErr = 1800038;
	ErrorCode_ErrCheckPublicResourceServerVersionErr = 1800039;
	ErrorCode_ErrCheckPublicResourceClientVersionParamErr = 1800040;
	ErrorCode_ErrCheckClientVersionNeedUpdate = 1800041;
	ErrorCode_ErrBranchNameNotMatch = 1800042;
	ErrorCode_ErrMatchRpcAlready = 1800043;
	ErrorCode_ErrOtherPlayerEnterHost = 1800044;
	ErrorCode_ErrPlayerEnterHost = 1800045;
	ErrorCode_ErrLevelPlayChangeSprotModeInMutile = 1800046;
	ErrorCode_ErrMatchingNotInvite = 1800047;
	ErrorCode_ErrEnableFunctionFB = 1800048;
	ErrorCode_ErrCalabashLevelRequest = 1900000;
	ErrorCode_ErrCalabashLevelRewardDone = 1900001;
	ErrorCode_ErrCalabashLevelConfig = 1900002;
	ErrorCode_ErrSkillTreeActiveConsume = 1900003;
	ErrorCode_ErrLoadFriendData = 1900004;
	ErrorCode_ErrNoLoadPrivateChatData = 1900005;
	ErrorCode_ErrNotInWolrd = 1900006;
	ErrorCode_ErrNotInGround = 1900007;
	ErrorCode_ErrInFighting = 1900008;
	ErrorCode_ErrNotHaveCountryAccess = 1900009;
	ErrorCode_ErrSkillIsEffect = 1900010;
	ErrorCode_ErrNoSoundBox = 1900011;
	ErrorCode_ErrConsumeNotEnough = 1900012;
	ErrorCode_ErrExploreSkillCountLimit = 1900013;
	ErrorCode_ErrLegalAreaNoTreasureBox = 1900014;
	ErrorCode_ErrTreasureBoxAllActive = 1900015;
	ErrorCode_ExploreProgressNoCountry = 1900016;
	ErrorCode_ExploreProgressNoScoreCfg = 1900017;
	ErrorCode_ExploreProgressLackProgress = 1900018;
	ErrorCode_ExploreProgressRewardDone = 1900019;
	ErrorCode_ExploreProgressNoArea = 1900020;
	ErrorCode_ExploreToolNotConfirm = 1900021;
	ErrorCode_ExploreToolNotOpen = 1900022;
	ErrorCode_ErrTreasureBoxPlaceFail = 1900023;
	ErrorCode_ErrTreasureBoxData = 1900024;
	ErrorCode_ErrPayShopBuyCondition = 1900025;
	ErrorCode_ErrGatherActivityData = 1900026;
	ErrorCode_ErrGatherTaskNoFinish = 1900027;
	ErrorCode_ErrHadGatherReward = 1900028;
	ErrorCode_ErrHadGetSharedReward = 1900029;
	ErrorCode_ErrSharedPlat = 1900030;
	ErrorCode_ErrTowerTargetComplete = 1900031;
	ErrorCode_ErrTowerGuideRewardHad = 1900032;
	ErrorCode_ErrTowerGuideNoOpen = 1900033;
	ErrorCode_ErrTowerGuideConfig = 1900034;
	ErrorCode_ErrNewBieCourseConfig = 1900035;
	ErrorCode_ErrNewBieCourseRewardHad = 1900036;
	ErrorCode_ErrNewBieCourseLevel = 1900037;
	ErrorCode_ErrDetectionTargetSilence = 1900038;
	ErrorCode_ErrRoleTrialNotInit = 1900039;
	ErrorCode_ErrRoleTrialNoFinish = 1900040;
	ErrorCode_ErrRoleTrialReward = 1900041;
	ErrorCode_ErrRoleTrialRewardDone = 1900042;
	ErrorCode_ErrAdventureTaskReward = 1900043;
	ErrorCode_ErrChapterReward = 1900044;
	ErrorCode_ErrSilentFirstPassStatus = 1900045;
	ErrorCode_ErrSilentFirstPassReward = 1900046;
	ErrorCode_ErrPayShopEchoRole = 1900047;
	ErrorCode_ErrPayShopEchoItemOver = 1900048;
	ErrorCode_ErrDailyAdventureActivityInit = 1900049;
	ErrorCode_ErrDailyAdventureActivityPtEnough = 1900050;
	ErrorCode_ErrDailyAdventureActivityRewardDone = 1900051;
	ErrorCode_ErrDailyAdventureActivityRewardTake = 1900052;
	ErrorCode_ErrDailyAdventureActivityTaskDone = 1900053;
	ErrorCode_ErrRoleTrialTimeOut = 1900054;
	ErrorCode_ErrFriendRemarkNull = 1900055;
	ErrorCode_ErrTrackMoonRoleUnLock = 1900056;
	ErrorCode_ErrTrackMoonTrigger = 1900057;
	ErrorCode_ErrTrackMoonBuildingUnLock = 1900058;
	ErrorCode_ErrTrackMoonBuildingCurve = 1900059;
	ErrorCode_ErrTrackMoonBuildingLock = 1900060;
	ErrorCode_ErrMoonEntrustCfg = 1900061;
	ErrorCode_ErrMoonRoleCfg = 1900062;
	ErrorCode_ErrMoonRoleTrailCurve = 1900063;
	ErrorCode_ErrMoonBuildingCfg = 1900064;
	ErrorCode_ErrMoonItemConsume = 1900065;
	ErrorCode_ErrDirtyWordDeserialize = 1900066;
	ErrorCode_ErrMoonTargetNoFinish = 1900067;
	ErrorCode_ErrMoonActivityReward = 1900068;
	ErrorCode_ErrMoonActivityOpen = 1900069;
	ErrorCode_ErrCircumDoReward = 1900070;
	ErrorCode_ErrRetrunRewardCfg = 1900071;
	ErrorCode_ErrRetrunRewardLevel = 1900072;
	ErrorCode_ErrRetrunHaddone = 1900073;
	ErrorCode_ErrSignRewardCfg = 1900074;
	ErrorCode_ErrCircumSignHadRwd = 1900075;
	ErrorCode_ErrCircumNoSign = 1900076;
	ErrorCode_ErrScoreRewardCfg = 1900077;
	ErrorCode_ErrCircumScoreHadRwd = 1900078;
	ErrorCode_ErrCircumScoreLack = 1900079;
	ErrorCode_ErrCircumTaskNoFinish = 1900080;
	ErrorCode_LoginServiceInvalidToken = 1900081;
	ErrorCode_LoginFusing = 1900082;
	ErrorCode_LoginRateLimiterRejected = 1900083;
	ErrorCode_LoginTimeoutRejected = 1900084;
	ErrorCode_AccountInputErr = 1900085;
	ErrorCode_DevInvalidLoginType = 1900086;
	ErrorCode_GARInvalidLoginType = 1900087;
	ErrorCode_GARDevInvalidLoginType = 1900088;
	ErrorCode_SdkserverTimeOut = 1900089;
	ErrorCode_ReconnectInvalidOperation = 1900090;
	ErrorCode_PbMessageAppVersionNotMatch = 1900091;
	ErrorCode_ErrPluginReconnectIpWhiteList = 1900092;
	ErrorCode_NotInUserIdWhiteListWithChannel = 1900093;
	ErrorCode_ErrPluginReconnectChannelWhiteList = 1900094;
	ErrorCode_PluginPlayerLoggingIn = 1900095;
	ErrorCode_LoginFusing2 = 1900096;
	ErrorCode_SoundBoxExploreFull = 1900097;
	ErrorCode_ErrMoonEntrustNoData = 1900098;
	ErrorCode_ErrMoonMoneyNotEnough = 1900099;
	ErrorCode_ErrCircumFluenceTimeIn = 1900100;
	ErrorCode_DragonPoolRewardWayErr = 1900101;
	ErrorCode_DragonPoolNoHandIn = 1900102;
	ErrorCode_ErrDoCommonRewardConfigError = 2000000;
	ErrorCode_InstPlayNotSettle = 2000001;
	ErrorCode_InstPlayNotFinishExecute = 2000002;
	ErrorCode_ErrResetItemEntityNotContain = 2000003;
	ErrorCode_InstPlayExchangeRewardNotExist = 2000004;
	ErrorCode_MapConfigNull = 2000005;
	ErrorCode_MapConfigError = 2000006;
	ErrorCode_InstPlayComponentNotExist = 2000007;
	ErrorCode_InstTeleportResetPlayerDead = 2000008;
	ErrorCode_DrownEndTeleportInBigWorld = 2000009;
	ErrorCode_ErrFightTrialRoleRoldIdsError = 2000010;
	ErrorCode_ErrFightTrialRoleFromationError = 2000011;
	ErrorCode_ErrInstSaveFail = 2000012;
	ErrorCode_ErrActiveFoundationControlPlayerError = 2000013;
	ErrorCode_ErrActiveFoundationOccupation = 2000014;
	ErrorCode_ErrSingleInstanceCanNotOnline = 2000015;
	ErrorCode_ErrInstanceRechallengeLimit = 2000016;
	ErrorCode_ErrTargetSame = 2000017;
	ErrorCode_ErrAttachTargetType = 2000018;
	ErrorCode_ErrAttachInfoNull = 2000019;
	ErrorCode_ErrLevelPlayChallengeFail = 2000020;
	ErrorCode_ErrGMTip = 2000021;
	ErrorCode_ErrPosSenderEntityNoExist = 2000022;
	ErrorCode_ErrPosSenderComponentNoExist = 2000023;
	ErrorCode_ErrPosSenderParamError = 2000024;
	ErrorCode_ErrPosSenderRemoveSenderNotSame = 2000025;
	ErrorCode_ErrConnectorEntityNoExist = 2000026;
	ErrorCode_ErrConnectorCompNoExist = 2000027;
	ErrorCode_ErrConnectorPreIdError = 2000028;
	ErrorCode_ErrConnectorCompleteState = 2000029;
	ErrorCode_ErrConnectorActiveStateError = 2000030;
	ErrorCode_ErrConnectorMatchErro = 2000031;
	ErrorCode_ErrActiveControlOccupation = 2000032;
	ErrorCode_ErrPortalCreatorActive = 2000033;
	ErrorCode_ErrComponentNull = 2000034;
	ErrorCode_ErrPortalCreatorConfigError = 2000035;
	ErrorCode_ErrPortalCreatorCreateFail = 2000036;
	ErrorCode_ErrTrialRoleEnterInst = 2000037;
	ErrorCode_ErrChangeFightState = 2100000;
	ErrorCode_ErrAddFragileFail = 2100001;
	ErrorCode_ErrStoreEnergyClose = 2100002;
	ErrorCode_ErrAttrOverMax = 2100003;
	ErrorCode_ErrGmkillEntityNotValid = 2200000;
	ErrorCode_ErrSplineConfigNotExist = 2200001;
	ErrorCode_BossRushActivityNotOpen = 2200002;
	ErrorCode_BossRushActivityScoreRewardNotExist = 2200003;
	ErrorCode_BossRushActivityLevelRewardNotExist = 2200004;
	ErrorCode_BossRushActivityScoreNotEnough = 2200005;
	ErrorCode_BossRushActivityLevelNotPass = 2200006;
	ErrorCode_BossRushActivityRewardClaimed = 2200007;
	ErrorCode_BossRushActivityBuffSelectionNotValid = 2200008;
	ErrorCode_BossRushActivityConfigNotExist = 2200009;
	ErrorCode_BossRushActivityCharacterSelectionNotValid = 2200010;
	ErrorCode_BossRushActivityComponentNotExist = 2200011;
	ErrorCode_BossRushActivityCharacterSelectionEmpty = 2200012;
	ErrorCode_BossRushActivityBuffSelectionEmpty = 2200013;
	ErrorCode_BossRushActivityLevelNotOpen = 2200014;
	ErrorCode_InRangeEntityDuplicate = 2200015;
	ErrorCode_InRangeEntityNotExist = 2200016;
	ErrorCode_NpcPerformComponentNotExist = 2200017;
	ErrorCode_NpcPerformStateNotInit = 2200018;
	ErrorCode_NpcPerformActionTargetEntityNotExist = 2200019;
	ErrorCode_ActionQueueTypeNotExist = 2200020;
	ErrorCode_ActionQueueCtxTypeNotExist = 2200021;
	ErrorCode_ExecuteQueueOwnerHasAction = 2200022;
	ErrorCode_ActionQueueExceedMaxCount = 2200023;
	ErrorCode_ActionQueueStartActionGroupFail = 2200024;
	ErrorCode_ActionQueueComponentNotExist = 2200025;
	ErrorCode_ActionQueueNotInit = 2200026;
	ErrorCode_ChangeBatchEntitiesStateError = 2200027;
	ErrorCode_EnableNearbyTrackingTargetEntityNotExist = 2200028;
	ErrorCode_EnableNearbyTrackingSelfNotEntity = 2200029;
	ErrorCode_EnableNearbyTrackingSelfComponentNotExist = 2200030;
	ErrorCode_SetTeleControlEntityNotExist = 2200031;
	ErrorCode_SetTeleControlTypeNotExist = 2200032;
	ErrorCode_SetTeleControlComponentNotExist = 2200033;
	ErrorCode_SetTeleControlCoordEntityNotExist = 2200034;
	ErrorCode_NotQaAccountWithHIddenServer = 2300000;
	ErrorCode_DisabledFuncInHIddenServer = 2300001;
	ErrorCode_ErrActionExecutorFinishConditionNotSport = 2400000;
	ErrorCode_ErrAlreadyInSwitchNode = 2400001;
	ErrorCode_ErrCornActivityId = 2500000;
	ErrorCode_ErrCornActivityNoOpen = 2500001;
	ErrorCode_ErrCornNoActivityData = 2500002;
	ErrorCode_NoPlayIdCorniceReward = 2500003;
	ErrorCode_ActivityNoOpenCorniceReward = 2500004;
	ErrorCode_ScoreLimitCorniceReward = 2500005;
	ErrorCode_RewardedCorniceReward = 2500006;
	ErrorCode_NoUnlockCorniceReward = 2500007;
	ErrorCode_NoScoreCorniceReward = 2500008;
	ErrorCode_TrackMoonPhaseNoConfig = 2500009;
	ErrorCode_TrackMoonPhaseActivityNoOpen = 2500010;
	ErrorCode_TrackMoonPhaseNoPolulary = 2500011;
	ErrorCode_TrackMoonPhaseNoData = 2500012;
	ErrorCode_TrackMoonPhaseRewarded = 2500013;
	ErrorCode_TrackMoonPhaseDataNoConfig = 2500014;
	ErrorCode_TrackMoonPhaseDataNoOpen = 2500015;
	ErrorCode_TrackMoonPhaseDataNoData = 2500016;
	ErrorCode_BCTRewardNoTConfig = 2500017;
	ErrorCode_BCTRewardNoOpenActivity = 2500018;
	ErrorCode_BCTRewardNoData = 2500019;
	ErrorCode_BCTRewardNoUnlock = 2500020;
	ErrorCode_BCTRewardNoComplete = 2500021;
	ErrorCode_BCARewardNoRConfig = 2500022;
	ErrorCode_BCARewardNoOpenActivity = 2500023;
	ErrorCode_BCARewardNoData = 2500024;
	ErrorCode_BCARewardNoActive = 2500025;
	ErrorCode_BCARewarded = 2500026;
	ErrorCode_BCARewardNoActiveReward = 2500027;
	ErrorCode_CornTranNoPlayConfig = 2500028;
	ErrorCode_CornTranNoOpenPlay = 2500029;
	ErrorCode_CornTranNoOpenActivity = 2500030;
	ErrorCode_CornTranNoEntityConfig = 2500031;
	ErrorCode_BCARewardRepeatRewardId = 2500032;
	ErrorCode_BCARewardDifferActivityId = 2500033;
	ErrorCode_BCTRewardNoActivity = 2500034;
	ErrorCode_BCTRewardIllegalRewardNum = 2500035;
	ErrorCode_BCTRewardNoUnlockStage = 2500036;
}

message DErrorResult {
	ErrorCode ErrorCode = 1;
	repeated string ErrorParams = 2;
}

message Vector {
	float X = 1;
	float Y = 2;
	float Z = 3;
}

message Rotator {
	float Pitch = 1;
	float Yaw = 2;
	float Roll = 3;
}

enum EEntityType {
	EEntityType_Player = 0;
	EEntityType_Npc = 1;
	EEntityType_Monster = 2;
	EEntityType_SceneItem = 5;
	EEntityType_Custom = 6;
	EEntityType_Vision = 7;
	EEntityType_Animal = 8;
	EEntityType_ClientOnly = 9;
	EEntityType_Vehicle = 10;
	EEntityType_PlayerEntity = 11;
	EEntityType_SceneEntity = 12;
}

enum EAddEntityType {
	EAddEntityType_SceneInit = 0;
	EAddEntityType_Normal = 1;
}

enum ERemoveEntityType {
	ERemoveEntityType_RemoveTypeForce = 0;
	ERemoveEntityType_HpIsZero = 1;
	ERemoveEntityType_Destructible = 2;
	ERemoveEntityType_RemoveTypeNormal = 3;
	ERemoveEntityType_RemoveTypeCapture = 4;
	ERemoveEntityType_RemoveTypeTreasureBox = 5;
	ERemoveEntityType_RemoveTypeDrop = 6;
	ERemoveEntityType_MonsterBoom = 7;
	ERemoveEntityType_RemoveTypeResetByModeChange = 8;
}

enum EAttributeType {
	EAttributeType_EAttributeType_None = 0;
	EAttributeType_Lv = 1;
	EAttributeType_l5n = 2;
	EAttributeType_Life = 3;
	EAttributeType_Sheild = 4;
	EAttributeType_SheildDamageChange = 5;
	EAttributeType_SheildDamageReduce = 6;
	EAttributeType_Atk = 7;
	EAttributeType_Crit = 8;
	EAttributeType_CritDamage = 9;
	EAttributeType_Def = 10;
	EAttributeType_EnergyEfficiency = 11;
	EAttributeType_CdReduse = 12;
	EAttributeType_ReactionEfficiency = 13;
	EAttributeType_DamageChangeNormalSkill = 14;
	EAttributeType_DamageChange = 15;
	EAttributeType_DamageReduce = 16;
	EAttributeType_DamageChangeAuto = 17;
	EAttributeType_DamageChangeCast = 18;
	EAttributeType_DamageChangeUltra = 19;
	EAttributeType_DamageChangeQte = 20;
	EAttributeType_DamageChangePhys = 21;
	EAttributeType_DamageChangeElement1 = 22;
	EAttributeType_DamageChangeElement2 = 23;
	EAttributeType_DamageChangeElement3 = 24;
	EAttributeType_DamageChangeElement4 = 25;
	EAttributeType_DamageChangeElement5 = 26;
	EAttributeType_DamageChangeElement6 = 27;
	EAttributeType_DamageResistancePhys = 28;
	EAttributeType_DamageResistanceElement1 = 29;
	EAttributeType_DamageResistanceElement2 = 30;
	EAttributeType_DamageResistanceElement3 = 31;
	EAttributeType_DamageResistanceElement4 = 32;
	EAttributeType_DamageResistanceElement5 = 33;
	EAttributeType_DamageResistanceElement6 = 34;
	EAttributeType_HealChange = 35;
	EAttributeType_HealedChange = 36;
	EAttributeType_DamageReducePhys = 37;
	EAttributeType_DamageReduceElement1 = 38;
	EAttributeType_DamageReduceElement2 = 39;
	EAttributeType_DamageReduceElement3 = 40;
	EAttributeType_DamageReduceElement4 = 41;
	EAttributeType_DamageReduceElement5 = 42;
	EAttributeType_DamageReduceElement6 = 43;
	EAttributeType_ReactionChange1 = 44;
	EAttributeType_ReactionChange2 = 45;
	EAttributeType_ReactionChange3 = 46;
	EAttributeType_ReactionChange4 = 47;
	EAttributeType_ReactionChange5 = 48;
	EAttributeType_ReactionChange6 = 49;
	EAttributeType_ReactionChange7 = 50;
	EAttributeType_ReactionChange8 = 51;
	EAttributeType_ReactionChange9 = 52;
	EAttributeType_ReactionChange10 = 53;
	EAttributeType_ReactionChange11 = 54;
	EAttributeType_ReactionChange12 = 55;
	EAttributeType_ReactionChange13 = 56;
	EAttributeType_ReactionChange14 = 57;
	EAttributeType_ReactionChange15 = 58;
	EAttributeType_EnergyMax = 59;
	EAttributeType_Energy = 60;
	EAttributeType_SpecialEnergy1Max = 61;
	EAttributeType_SpecialEnergy1 = 62;
	EAttributeType_SpecialEnergy2Max = 63;
	EAttributeType_SpecialEnergy2 = 64;
	EAttributeType_SpecialEnergy3Max = 65;
	EAttributeType_SpecialEnergy3 = 66;
	EAttributeType_SpecialEnergy4Max = 67;
	EAttributeType_SpecialEnergy4 = 68;
	EAttributeType_StrengthMax = 69;
	EAttributeType_Strength = 70;
	EAttributeType_StrengthRecover = 71;
	EAttributeType_StrengthPunishTime = 72;
	EAttributeType_StrengthRun = 73;
	EAttributeType_StrengthSwim = 74;
	EAttributeType_StrengthFastSwim = 75;
	EAttributeType_ElementEnergyMax = 76;
	EAttributeType_ElementEnergy = 77;
	EAttributeType_HardnessMax = 78;
	EAttributeType_Hardness = 79;
	EAttributeType_HardnessRecover = 80;
	EAttributeType_HardnessPunishTime = 81;
	EAttributeType_HardnessChange = 82;
	EAttributeType_HardnessReduce = 83;
	EAttributeType_ToughMax = 84;
	EAttributeType_Tough = 85;
	EAttributeType_ToughRecover = 86;
	EAttributeType_ToughChange = 87;
	EAttributeType_ToughReduce = 88;
	EAttributeType_ElementPower1 = 89;
	EAttributeType_ElementPower2 = 90;
	EAttributeType_ElementPower3 = 91;
	EAttributeType_ElementPower4 = 92;
	EAttributeType_ElementPower5 = 93;
	EAttributeType_ElementPower6 = 94;
	EAttributeType_SpecialDamageChange = 95;
	EAttributeType_StrengthFastClimbCost = 96;
	EAttributeType_ElementPropertyType = 97;
	EAttributeType_WeakTime = 98;
	EAttributeType_IgnoreDefRate = 99;
	EAttributeType_IgnoreDamageResistancePhys = 100;
	EAttributeType_IgnoreDamageResistanceElement1 = 101;
	EAttributeType_IgnoreDamageResistanceElement2 = 102;
	EAttributeType_IgnoreDamageResistanceElement3 = 103;
	EAttributeType_IgnoreDamageResistanceElement4 = 104;
	EAttributeType_IgnoreDamageResistanceElement5 = 105;
	EAttributeType_IgnoreDamageResistanceElement6 = 106;
	EAttributeType_SkillToughRatio = 107;
	EAttributeType_StrengthClimbJump = 108;
	EAttributeType_StrengthGliding = 109;
	EAttributeType_Mass = 110;
	EAttributeType_BrakingFrictionFactor = 111;
	EAttributeType_GravityScale = 112;
	EAttributeType_vVn = 113;
	EAttributeType_DamageChangePhantom = 114;
	EAttributeType_AutoAttackSpeed = 115;
	EAttributeType_CastAttackSpeed = 116;
	EAttributeType_StatusBuildUp1Max = 117;
	EAttributeType_StatusBuildUp1 = 118;
	EAttributeType_StatusBuildUp2Max = 119;
	EAttributeType_StatusBuildUp2 = 120;
	EAttributeType_StatusBuildUp3Max = 121;
	EAttributeType_StatusBuildUp3 = 122;
	EAttributeType_StatusBuildUp4Max = 123;
	EAttributeType_StatusBuildUp4 = 124;
	EAttributeType_StatusBuildUp5Max = 125;
	EAttributeType_StatusBuildUp5 = 126;
	EAttributeType_RageMax = 127;
	EAttributeType_Rage = 128;
	EAttributeType_RageRecover = 129;
	EAttributeType_RagePunishTime = 130;
	EAttributeType_RageChange = 131;
	EAttributeType_RageReduce = 132;
	EAttributeType_ToughRecoverDelayTime = 133;
	EAttributeType_Jump = 134;
	EAttributeType_ParalysisTimeMax = 135;
	EAttributeType_ParalysisTime = 136;
	EAttributeType_ParalysisTimeRecover = 137;
	EAttributeType_EAttributeType_MAX = 138;
}

message GameplayAttributeData {
	int32 attributeType = 1;
	int32 currentValue = 2;
	int32 valueIncrement = 3;
}

message AttrData {
	int32 attributeType = 1;
	int32 currentValue = 2;
	int32 valueIncrement = 3;
}

message GameplayTagData {
	int32 Flag = 1;
	int32 TagCount = 2;
}

message CommonTagData {
	int32 TagId = 1;
	bool RemoveTagIds = 2;
}

message MovementInformation {
	Vector LinearVelocity = 1;
	Vector AngularVelocity = 2;
	Vector Location = 3;
	Rotator Rotation = 4;
	bool bSimulatedPhysicSleep = 5;
	bool bRepPhysics = 6;
	int32 MovementMode = 7;
	float TimeStamp = 8;
	int32 InputDirection = 9;
	bool ResetMeshOffset = 10;
	bool IsJump = 11;
	float HorizontalJumpSpeed = 12;
}

message RelativeMoveReplaySample {
	int64 BaseMovementEntityId = 1;
	Vector RelativeLocation = 2;
	Rotator RelativeRotation = 3;
}

message MoveReplaySample {
	Vector LinearVelocity = 1;
	Vector Location = 2;
	Rotator Rotation = 3;
	int32 MovementMode = 4;
	float TimeStamp = 5;
	int32 InputDirection = 6;
	repeated GameplayTagData Tags = 7;
	RelativeMoveReplaySample RelativeMoveReplaySample = 8;
	float ControllerPitch = 9;
	float TimeScale = 10;
	int64 ServerTimeStamp = 11;
	int32 RTT = 12;
	Vector SlideForward = 13;
	int32 MoveState = 14;
	int32 SkillId = 15;
	int32 jWn = 16;
}

message PrivateTag {
	int32 PlayerId = 1;
	repeated string Tags = 31;
}

message InstanceOwnerInfo {
	bool hSs = 1;
}

message Qks {
	int64 CreatureGenID = 1;
}

message Xks {
	int32 Flag = 1;
	float Value = 2;
	bool _Ss = 3;
}

message CombatCommon {
	int64 PreMessageId = 1;
	int64 MessageId = 2;
	int64 Originator = 3;
	float TimeStamp = 4;
	int64 EntityId = 5;
	bool IsServerRequest = 6;
}

message EntityRemoveInfo {
	int64 EntityId = 1;
	int32 type = 2;
}

message RoleShowEntry {
	int32 roleId = 1;
	int32 Level = 2;
}

message PlayerDetails {
	int32 PlayerId = 1;
	string Name = 2;
	int32 Level = 3;
	int32 OriginWorldLevel = 4;
	int32 CurWorldLevel = 5;
	int32 HeadId = 6;
	int32 HeadFrameId = 7;
	string Signature = 8;
	bool IsOnline = 9;
	bool IsCanLobbyOnline = 10;
	int64 LastOfflineTime = 11;
	int32 TeamMemberCount = 12;
	int32 LevelGap = 13;
	int32 Birthday = 14;
	repeated RoleShowEntry RoleShowList = 15;
	repeated int32 CardShowList = 16;
	int32 CurCard = 17;
	bool DisplayBirthday = 18;
	int64 p0a = 19;
	string DOLLARxa = 20;
	string Vxa = 21;
	string hwa = 22;
	bool Bxa = 23;
}

message EntitySimplyMoveInfo {
	int64 EntityId = 1;
	Vector Location = 2;
	Rotator Rotation = 3;
}

// MessageId: 27178 (Push)
message AceAntiDataPush {
	bytes AntiData = 254;
}

// MessageId: 22729 (Notify)
message AceAntiDataNotify {
	bytes AntiData = 172;
}

message AchievementProgress {
	int32 CurProgress = 1;
	int32 TotalProgress = 2;
}

message AchievementEntry {
	int32 Flag = 1;
	uint32 FinishTime = 2;
	bool IsReceive = 3;
	AchievementProgress Progress = 4;
}

message AchievementGroupEntry {
	int32 Flag = 1;
	uint32 FinishTime = 2;
	bool IsReceive = 3;
}

message AchievementGroupInfo {
	AchievementGroupEntry AchievementGroupEntry = 1;
	repeated AchievementEntry AchievementEntryList = 2;
}

// MessageId: 29079 (Request)
message AchievementInfoRequest {
}

// MessageId: 19546 (Response)
message AchievementInfoResponse {
	repeated AchievementGroupInfo AchievementGroupInfoList = 249;
}

// MessageId: 20809 (Request)
message AchievementReceiveRequest {
	bool IsGroupId = 134;
	int32 Flag = 28;
}

// MessageId: 24256 (Response)
message AchievementReceiveResponse {
	ErrorCode ErrorCode = 51;
	repeated string ErrorParams = 38;
	map<int32, int32> ItemMap = 90;
}

// MessageId: 16681 (Notify)
message AchievementProgressNotify {
	AchievementEntry AchievementEntry = 228;
}

// MessageId: 15112 (Notify)
message AchievementListProgressNotify {
	repeated AchievementEntry AchievementEntryList = 95;
}

// MessageId: 23222 (Notify)
message AchievementGroupProgressNotify {
	AchievementGroupEntry AchievementGroupEntry = 181;
}

// MessageId: 29877 (Request)
message AchievementFinishRequest {
	int32 Flag = 57;
}

// MessageId: 28247 (Response)
message AchievementFinishResponse {
	ErrorCode ErrorCode = 212;
}

// MessageId: 18230 (Notify)
message ActionNotify {
	int32 PlayerId = 174;
	int32 IncId = 173;
	GameCtxPb GameCtx = 121;
	int32 TotalCount = 23;
	int32 StartIndex = 197;
	int32 EndIndex = 240;
}

// MessageId: 27042 (Notify)
message ActionErrorCodeNotify {
	int32 IncId = 112;
	GameCtxPb GameCtx = 5;
	int32 index = 231;
	int32 code = 169;
}

// MessageId: 20115 (Request)
message ActionFinishRequest {
	int32 PlayerId = 93;
	int32 IncId = 124;
	int32 StartIndex = 159;
	string ErrorMsg = 113;
}

// MessageId: 25516 (Response)
message ActionFinishResponse {
	int32 code = 176;
}

// MessageId: 22889 (Request)
message GmLevelActionRequest {
	string JsonStr = 113;
}

// MessageId: 18631 (Response)
message GmLevelActionResponse {
	int32 code = 141;
}

// MessageId: 21194 (Notify)
message OperationRestrictionNotify {
	string Params = 162;
	bool IsNull = 215;
}

// MessageId: 23652 (Notify)
message heh {
	int32 PlayerId = 29;
	int32 iih = 17;
	int32 IncId = 108;
}

// MessageId: 19325 (Request)
message leh {
	int32 PlayerId = 210;
	int32 Result = 93;
	int32 IncId = 196;
}

// MessageId: 17882 (Response)
message _eh {
	int32 code = 228;
}

enum GameCtxType {
	GameCtxType_uvs = 0;
	GameCtxType_cvs = 1;
	GameCtxType_dvs = 2;
	GameCtxType_mvs = 3;
	GameCtxType_Cvsa = 4;
	GameCtxType_EntityStateChangeAction = 5;
	GameCtxType_fvs = 6;
	GameCtxType_vvs = 7;
	GameCtxType_EntityLeaveTrigger = 8;
	GameCtxType_Mvsa = 9;
	GameCtxType_Svs = 10;
	GameCtxType_Evs = 11;
	GameCtxType_yvs = 12;
	GameCtxType_Ivs = 13;
	GameCtxType_Tvs = 14;
	GameCtxType_Lvs = 15;
	GameCtxType_Rvs = 16;
	GameCtxType_Dvsa = 17;
	GameCtxType_Avs = 18;
	GameCtxType_Pvs = 19;
	GameCtxType_Uvsa = 20;
	GameCtxType_wvs = 21;
	GameCtxType_xvs = 22;
	GameCtxType_bvs = 23;
	GameCtxType_Bvsa = 24;
	GameCtxType_qvs = 25;
	GameCtxType_Gvs = 26;
	GameCtxType_Ovs = 27;
	GameCtxType_kvs = 28;
	GameCtxType_GmPlayFlow = 29;
	GameCtxType_SceneItemLifeCycleComponentCreate = 30;
	GameCtxType_SceneItemLifeCycleComponentDetroy = 31;
	GameCtxType_GameCtxGm = 32;
	GameCtxType_FlowActionCtx = 33;
	GameCtxType_DOLLARvs = 34;
	GameCtxType_ChildQuestNodeFixAction = 35;
	GameCtxType_ConditionNodeFixAction = 36;
	GameCtxType_EntityFixAction = 37;
	GameCtxType_ConditionNode = 38;
	GameCtxType_Hvs = 39;
	GameCtxType_jvs = 40;
	GameCtxType_ChildQuestNodeCondition = 41;
	GameCtxType_EntityStateChangeConditionAction = 42;
	GameCtxType_RequestPlayerGameCurrStateBt = 43;
	GameCtxType_RequestEntityCurrState = 44;
	GameCtxType_TriggerConditionListeningAction = 45;
	GameCtxType_C7s = 46;
	GameCtxType_EntityVisibleCondition = 47;
	GameCtxType_FailedNodeTeleport = 48;
	GameCtxType_LeaveInstEscActionCtx = 49;
	GameCtxType_TrampleActiveActionCtx = 50;
	GameCtxType_TrampleDeActiveActionCtx = 51;
	GameCtxType_DefaultGameCtx = 52;
	GameCtxType_LevelPlayExploratoryCtx = 53;
}

message GameCtxPb {
	int32 CtxType = 1;
	oneof LOs {
		BehaviorTreeCtxPb BehaviorTree = 2;
		EntityCtxPb Entity = 3;
		NormalInteractCtxPb NormalInteract = 4;
		DynamicInteractCtxPb DynamicInteract = 5;
		RandomInteractCtxPb RandomInteract = 6;
		StateChangeActionCtxPb StateChangeAction = 7;
		EntityGroupActionCtxPb EntityGroupAction = 8;
		EntityTriggerCtxPb EntityTrigger = 9;
		EntityLeaveTriggerCtxPb EntityLeaveTriggerCtx = 10;
		EntityDestructibleCtxPb EntityDestructible = 11;
		EntityTimelineTrackCtxPb EntityTimelineTrack = 12;
		LevelPlayOpenActionCtxPb LevelPlayOpenAction = 13;
		LevelPlayRewardActionCtxPb LevelPlayRewardAction = 14;
		QuestActiveActionCtxPb QuestActiveAction = 15;
		QuestAcceptActionCtxPb QuestAcceptAction = 16;
		QuestFinishActionCtxPb QuestFinishAction = 17;
		ChildQuestNodeEnterActionCtxPb ChildQuestNodeEnterAction = 18;
		ChildQuestNodeFinishActionCtxPb ChildQuestNodeFinishAction = 19;
		SuccessNodeActionCtxPb SuccessNodeAction = 20;
		FailedNodeActionCtxPb FailedNodeAction = 21;
		CompositionEnterActionCtxPb CompositionEnterAction = 22;
		EntityConditionListeningActionCtxPb EntityConditionListeningAction = 23;
		PlayFlowChildQuestNodeCtxPb PlayFlowChildQuestNode = 24;
		HandInItemChildQuestNodeCtxPb HandInItemChildQuestNode = 25;
		DoInteractChildQuestNodeCtxPb DoInteractChildQuestNode = 26;
		ActionGroupNodeActionCtxPb ActionGroupNodeAction = 27;
		ExploreSkillPullGiantCtxPb ExploreSkillPullGiantAction = 28;
		LevelPlayCtxPb LevelPlay = 29;
		GmLevelActionCtxPb GmLevelAction = 30;
		SceneItemLifeCycleComponentCreateCtxPb LifeCycleCreateAction = 31;
		SceneItemLifeCycleComponentDestroyCtxPb LifeCycleDestroyAction = 32;
		FlowActionCtxPb FlowAction = 33;
		DailyQuestTerminateActionCtxPb DailyQuestTerminateAction = 34;
		sks Jvs = 35;
		//aks zvs = 36;
		//hks Zvs = 37;
		z7s F7s = 38;
		Qma DOLLARma = 39;
		Zga Yga = 40;
		efa Jga = 41;
	}
}

message EntityCtxPb {
	int32 ConfigId = 1;
	int64 IncId = 2;
}

message NormalInteractCtxPb {
	EntityCtxPb EntityCtx = 1;
	int32 OptionIndex = 2;
}

message DynamicInteractCtxPb {
	EntityCtxPb EntityCtx = 1;
	string OptionGuid = 2;
}

message RandomInteractCtxPb {
	EntityCtxPb EntityCtx = 1;
	int32 OptionIndex = 2;
}

message StateChangeActionCtxPb {
	EntityCtxPb EntityCtx = 1;
	int32 StateIndex = 2;
}

message hks {
	EntityCtxPb EntityCtx = 1;
	int32 StateIndex = 2;
	int32 ConditionIndex = 3;
}

message EntityGroupActionCtxPb {
	EntityCtxPb EntityCtx = 1;
	int32 TriggerIndex = 2;
	bool IsMatch = 3;
}

message aks {
	EntityCtxPb EntityCtx = 1;
}

message EntityTriggerCtxPb {
	EntityCtxPb EntityCtx = 1;
	int64 TriggerEntityIncId = 2;
}

message EntityLeaveTriggerCtxPb {
	EntityCtxPb EntityCtx = 1;
	int64 TriggerEntityIncId = 2;
}

message EntityDestructibleCtxPb {
	EntityCtxPb EntityCtx = 1;
}

enum EntityTimelineEventType {
	EntityTimelineEventType_LeftIn = 0;
	EntityTimelineEventType_LeftOut = 1;
	EntityTimelineEventType_RightIn = 2;
	EntityTimelineEventType_RightOut = 3;
}

message EntityTimelineTrackCtxPb {
	EntityCtxPb EntityCtx = 1;
	int32 GroupIndex = 2;
	int32 ControlPoint = 3;
	int32 EventType = 4;
}

message EntityConditionListeningActionCtxPb {
	EntityCtxPb EntityCtx = 1;
	int32 EntityConditionListeningIndex = 2;
}

message ExploreSkillPullGiantCtxPb {
	EntityCtxPb EntityCtx = 1;
}

message GmLevelActionCtxPb {
	string JsonStr = 1;
}

message SceneItemLifeCycleComponentCreateCtxPb {
	EntityCtxPb EntityCtx = 1;
}

message SceneItemLifeCycleComponentDestroyCtxPb {
	EntityCtxPb EntityCtx = 1;
}

message Zga {
	EntityCtxPb EntityCtx = 1;
}

message efa {
	EntityCtxPb EntityCtx = 1;
}

message BehaviorTreeCtxPb {
	int64 IncId = 1;
	int32 BtType = 2;
	int32 BtId = 3;
	int32 NodeId = 4;
}

message LevelPlayCtxPb {
	int32 LevelPlayId = 1;
}

message LevelPlayOpenActionCtxPb {
	int32 LevelPlayId = 1;
}

message LevelPlayRewardActionCtxPb {
	int32 LevelPlayId = 1;
}

message QuestActiveActionCtxPb {
	int32 QuestId = 1;
}

message QuestAcceptActionCtxPb {
	int32 QuestId = 1;
}

message QuestFinishActionCtxPb {
	int32 QuestId = 1;
}

message DailyQuestTerminateActionCtxPb {
	int32 QuestId = 1;
}

message Qma {
	int32 jma = 1;
}

message ChildQuestNodeEnterActionCtxPb {
	BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message ChildQuestNodeFinishActionCtxPb {
	BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message SuccessNodeActionCtxPb {
	BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message FailedNodeActionCtxPb {
	BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message CompositionEnterActionCtxPb {
	BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message PlayFlowChildQuestNodeCtxPb {
	BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message HandInItemChildQuestNodeCtxPb {
	BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message DoInteractChildQuestNodeCtxPb {
	BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message ActionGroupNodeActionCtxPb {
	BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message FlowActionCtxPb {
	string FlowListName = 1;
	int32 FlowId = 2;
	int32 StateId = 3;
	int32 ActionId = 4;
}

enum rks {
	rks_BeginAction = 0;
	rks_CompleteAction = 1;
	rks_StopAction = 2;
}

message sks {
	int32 c6n = 1;
	EntityCtxPb EntityCtx = 2;
}

message z7s {
	string FlowListName = 1;
	int32 FlowId = 2;
	int32 StateId = 3;
}

enum IDOLLARs {
	IDOLLARs_ActivityTaskRunning = 0;
	IDOLLARs_ActivityTaskFinish = 1;
	IDOLLARs_ActivityTaskTaken = 2;
}

message TDOLLARs {
	int32 Flag = 1;
	int32 Current = 2;
	int32 Target = 3;
	int32 Status = 4;
}

message LDOLLARs {
	repeated TDOLLARs EDOLLARs = 1;
}

message xca {
	repeated TDOLLARs EDOLLARs = 1;
	repeated TDOLLARs Dca = 2;
	repeated int32 Aca = 3;
	bool wca = 5;
	int64 EndTime = 6;
	int64 NextRefreshTime = 7;
}

enum ActivityType {
	ActivityType_Parkour = 0;
	ActivityType_GatherActivity = 1;
	ActivityType_Sign = 2;
	ActivityType_TowerGuide = 3;
	ActivityType_NewBieCourse = 4;
	ActivityType_WorldNewJourney = 5;
	ActivityType_RougeActivity = 6;
	ActivityType_DoubleInstanceRewardActivity = 7;
	ActivityType_RoleTrialActivity = 8;
	ActivityType_Harvest = 9;
	ActivityType_NewRoleGuideActivity = 10;
	ActivityType_PhantomCollect = 11;
	ActivityType_DailyAdventureActivity = 12;
	ActivityType_LongShanMainActivity = 13;
	ActivityType_BossRushActivity = 14;
	ActivityType_TurnTableActivity = 15;
	ActivityType_PhotoMemoryActivity = 16;
	ActivityType_TrackMoonActivity = 17;
	ActivityType_CircumFluence = 18;
	ActivityType_TowerDefenceActivity = 19;
	ActivityType_TimePointRewardActivity = 20;
	ActivityType_TowerGuideNew = 21;
	ActivityType_TrackMoonPhase = 22;
	ActivityType_RiskHarvest = 23;
	ActivityType_CorniceMeeting = 24;
	ActivityType_BlackCoastTheme = 25;
	ActivityType_PureUIActivity = 200;
}

enum a0a {
	a0a_None = 0;
	a0a_WithActivity = 1;
	a0a_WithGuideQuest = 2;
}

message ParkourActivityChallenge {
	int32 ChallengeId = 1;
	int64 BeginTime = 2;
	int64 EndTime = 3;
}

message ParkourActivity {
	repeated ParkourActivityChallenge Challenges = 1;
}

message DoubleInstActivityReward {
	int32 GetDoubleInstRwdCount = 1;
}

enum GatherActivityTaskState {
	GatherActivityTaskState_GatherLock = 0;
	GatherActivityTaskState_GatherRunning = 1;
	GatherActivityTaskState_GatherInComplete = 2;
	GatherActivityTaskState_GatherDone = 3;
	GatherActivityTaskState_GatherTakeReward = 4;
}

message GatherTaskDoneInfo {
	int32 taskId = 1;
	int32 State = 2;
}

message GatherActivityInfo {
	repeated GatherTaskDoneInfo GatherTaskDoneInfo = 1;
}

enum SignState {
	zps_Z6n = 0;
	zps_CMs = 1;
	zps_ovs = 2;
}

message SignActivity {
	repeated int32 pps = 1;
}

message HarvestPointReward {
	int32 Flag = 1;
	int32 State = 2;
}

message HarvestLevelReward {
	int32 Flag = 1;
	int32 StartTime = 2;
	bool Challenges = 3;
	int32 Eps = 4;
	int32 Diff = 5;
	int32 State = 6;
}

message HarvestActivity {
	repeated HarvestPointReward HarvestPointRewards = 1;
	repeated HarvestLevelReward HarvestLevelRewards = 2;
}

message NewBieCourseActivity {
	repeated int32 HadTakeReward = 1;
}

message RoleTrialTask {
	int32 roleId = 1;
	int32 ChallengeState = 2;
}

message RoleTrialInfoActivity {
	repeated RoleTrialTask RoleTrialTask = 1;
}

enum PhantomCollectRewardType {
	PhantomCollectRewardType_PhantomsCollect = 0;
	PhantomCollectRewardType_DataDock = 1;
	PhantomCollectRewardType_PhantomSideQuest = 2;
	PhantomCollectRewardType_Max = 3;
}


message PhantomCollectReward {
	int32 type = 1;
	int32 State = 2;
	oneof Data {
		PhantomCollectProgress Progress = 3;
	}
}

message PhantomCollectProgress {
	repeated int32 Phantoms = 1;
}

message PhantomCollectActivity {
	repeated PhantomCollectReward PhantomCollectRewards = 1;
}

message Wps {
	int64 BeginOpenTime = 1;
	int64 EndOpenTime = 2;
}

message aih {
	bool rih = 1;
}

message hih {
	int64 oih = 1;
	map<int32, DOLLARrh> nih = 2;
}

message ActivityData {
	int32 Flag = 1;
	int32 type = 2;
	int64 BeginShowTime = 3;
	int64 EndShowTime = 4;
	int64 BeginOpenTime = 5;
	int64 EndOpenTime = 6;
	bool IsUnlock = 7;
	repeated int32 CompletePreQuests = 8;
	bool IsFirstOpen = 9;
	repeated int32 sih = 30;
	oneof Data {
		ParkourActivity ParkourActivity = 10;
		SignActivity SignActivity = 11;
		NewBieCourseActivity NewBieCourseActivity = 12;
		DoubleInstActivityReward DoubleInstActivityReward = 13;
		HarvestActivity HarvestActivity = 14;
		RoleTrialInfoActivity RoleTrialInfoActivity = 15;
		PhantomCollectActivity PhantomCollectActivity = 16;
		GatherActivityInfo GatherActivityInfo = 17;
		DailyAdventureActivityData DailyAdventureActivityData = 18;
		Wps Wps = 19;
		vks Kps = 20;
		Qps Qps = 21;
		Xps Xps = 22;
		LDOLLARs yDOLLARs = 23;
		xYs xYs = 24;
		Lzs pzs = 25;
		xca Pca = 26;
		aih aih = 27;
		hih hih = 28;
		lih lih = 29;
		jrh _ih = 31;
	}
}

// MessageId: 29259 (Request)
message ActivityRequest {
}

// MessageId: 28236 (Response)
message ActivityResponse {
	repeated ActivityData Activities = 127;
	ErrorCode ErrorCode = 135;
}

// MessageId: 24348 (Request)
message ActivityFirstReadRequest {
	int32 ActivityId = 248;
}

// MessageId: 18758 (Response)
message ActivityFirstReadResponse {
	ErrorCode ErrorCode = 203;
}

// MessageId: 15124 (Notify)
message ActivityUpdateNotify {
	repeated ActivityData Activities = 116;
}

// MessageId: 22819 (Notify)
message ActivityDisableNotify {
	repeated int32 ActivityIds = 66;
}

// MessageId: 20045 (Request)
message SignActivityRequest {
	int32 ActivityId = 81;
	int32 index = 63;
}

// MessageId: 29228 (Response)
message SignActivityResponse {
	ErrorCode ErrorCode = 28;
	map<int32, int32> ItemMap = 166;
}

// MessageId: 22089 (Notify)
message SignActivitySignStateNotify {
	int32 ActivityId = 221;
	int32 index = 196;
	int32 SignState = 193;
}

// MessageId: 19499 (Notify)
message SignActivityKeepTimeNotify {
	int32 ActivityId = 91;
	int64 KeepTime = 85;
}

// MessageId: 20168 (Request)
message HarvestActivityPointRequest {
	int32 ActivityId = 94;
	int32 Flag = 222;
}

// MessageId: 29836 (Response)
message HarvestActivityPointResponse {
	ErrorCode ErrorCode = 151;
	map<int32, int32> ItemMap = 109;
}

// MessageId: 28979 (Request)
message HarvestActivityLevelRequest {
	int32 ActivityId = 209;
	int32 InstId = 120;
}

// MessageId: 17604 (Response)
message HarvestActivityLevelResponse {
	ErrorCode ErrorCode = 91;
	map<int32, int32> ItemMap = 170;
}

// MessageId: 21385 (Request)
message HarvestActivityLevelDiffRequest {
	int32 ActivityId = 149;
	int32 InstId = 207;
	int32 Diff = 140;
}

// MessageId: 19565 (Response)
message HarvestActivityLevelDiffResponse {
	ErrorCode ErrorCode = 152;
}

// MessageId: 18616 (Notify)
message HarvestActivityPointNotify {
	int32 ActivityId = 109;
	repeated HarvestPointReward HarvestPointReward = 76;
}

// MessageId: 25466 (Notify)
message HarvestActivityLevelNotify {
	int32 ActivityId = 33;
	repeated HarvestLevelReward HarvestLevelRewards = 184;
}

// MessageId: 19966 (Request)
message HarvestActivityResultRequest {
}

// MessageId: 18515 (Response)
message HarvestActivityResultResponse {
}

// MessageId: 17159 (Notify)
message HarvestActivityResultNotify {
	bool Succ = 228;
	int32 iMs = 142;
	int32 rMs = 152;
	ErrorCode ErrorCode = 174;
}

// MessageId: 16175 (Request)
message PhantomCollectReceiveRequest {
	int32 ActivityId = 79;
	int32 type = 13;
}

// MessageId: 15786 (Response)
message PhantomCollectReceiveResponse {
	ErrorCode ErrorCode = 10;
	map<int32, int32> ItemMap = 32;
}

// MessageId: 15212 (Notify)
message PhantomCollectUpdateNotify {
	int32 ActivityId = 71;
	PhantomCollectReward PhantomCollectReward = 255;
}

// MessageId: 18578 (Request)
message sfs {
	int32 ActivityId = 175;
}

// MessageId: 29528 (Response)
message afs {
	ErrorCode ErrorCode = 137;
	int32 N6n = 183;
	bool nMs = 149;
	map<int32, int32> ItemMap = 220;
}

message Qps {
	bool sMs = 1;
	int32 aMs = 2;
	repeated int32 hMs = 3;
}

// MessageId: 21232 (Request)
message peh {
	int32 ActivityId = 94;
}

// MessageId: 21417 (Response)
message veh {
	ErrorCode ErrorCode = 190;
}

message DOLLARrh {
	int32 tBs = 1;
	int32 uih = 2;
	int64 yzs = 3;
	repeated int32 cih = 4;
}

// MessageId: 21613 (Request)
message meh {
	int32 LevelPlayId = 48;
	int32 ScoreIndex = 124;
}

// MessageId: 15215 (Response)
message Ceh {
	ErrorCode ErrorCode = 75;
}

// MessageId: 29364 (Notify)
message geh {
	int32 LevelPlayId = 200;
	int32 Score = 9;
	int32 uih = 114;
	bool dih = 163;
	bool mih = 59;
}

// MessageId: 29074 (Request)
message hth {
	int32 LevelPlayId = 225;
}

// MessageId: 26669 (Response)
message lth {
	ErrorCode ErrorCode = 108;
}

message Wrh {
	int32 Flag = 1;
	repeated TDOLLARs Tasks = 2;
}

message jrh {
	repeated Wrh gMs = 1;
	repeated int32 Cih = 2;
}

// MessageId: 25198 (Notify)
message Zeh {
	repeated Wrh gMs = 145;
}

// MessageId: 28429 (Request)
message eth {
	int32 taskId = 151;
}

// MessageId: 18382 (Response)
//message tth {
//	int32 Error = 9;
//}

// MessageId: 21211 (Request)
message ith {
	repeated int32 w9a = 190;
	int32 ActivityId = 140;
}

// MessageId: 23378 (Response)
message rth {
	repeated int32 Cih = 209;
	int32 Error = 222;
}

enum ChallengeState {
	ChallengeState_Running = 0;
	ChallengeState_WaitTakeReward = 1;
	ChallengeState_Finish = 2;
}


// MessageId: 16800 (Request)
message TrialRoleRewardRequest {
	int32 roleId = 225;
}

// MessageId: 27936 (Response)
message TrialRoleRewardResponse {
	ErrorCode ErrorCode = 204;
}

// MessageId: 27498 (Notify)
message RoleTrialSettleNotify {
	ErrorCode ErrorCode = 253;
}

enum DailyAdventureTaskState {
	DailyAdventureTaskState_DailyAdventureTaskRunning = 0;
	DailyAdventureTaskState_DailyAdventureTaskFinish = 1;
	DailyAdventureTaskState_DailyAdventureTaskTaken = 2;
}

message DailyAdventureActivityTask {
	int32 Flag = 1;
	int32 Current = 2;
	int32 Target = 3;
	int32 Status = 4;
}

message DailyAdventureActivityData {
	repeated DailyAdventureActivityTask DailyAdventureActivityTasks = 1;
	repeated int32 PtRewardTaken = 2;
}

// MessageId: 22006 (Notify)
message DailyAdventureTaskUpdateNotify {
	repeated DailyAdventureActivityTask DailyAdventureActivityTasks = 199;
	bool gih = 250;
}

// MessageId: 26741 (Request)
message DailyAdventurePtRewardRequest {
	int32 Flag = 19;
}

// MessageId: 17526 (Response)
message DailyAdventurePtRewardResponse {
	ErrorCode ErrorCode = 67;
}

// MessageId: 23446 (Request)
message DailyAdventureTaskRewardRequest {
	int32 Flag = 210;
}

// MessageId: 23672 (Response)
message DailyAdventureTaskRewardResponse {
	ErrorCode ErrorCode = 111;
}

message Sks {
	int32 Flag = 1;
	repeated Eks Tasks = 2;
}

message Eks {
	int32 Flag = 1;
	int32 Current = 2;
	int32 Target = 3;
	bool IsFinished = 4;
	bool IsTaken = 5;
	bool Unlock = 6;
}

message vks {
	repeated Sks gMs = 1;
}

// MessageId: 25053 (Notify)
message ygs {
	repeated Sks gMs = 248;
}

// MessageId: 22470 (Request)
message Igs {
	repeated int32 TaskIds = 17;
}

// MessageId: 29888 (Response)
message Tgs {
	int32 Error = 216;
}

enum yks {
	yks_Incomplete = 0;
	yks_Claimable = 1;
	yks_Claimed = 2;
}

enum Iks {
	Iks_Empty = 0;
	Iks_Selected = 1;
	Iks_pBs = 2;
	Iks_Inactive = 3;
}

enum Tks {
	Tks_F6n = 0;
	Tks_SMs = 1;
}

message Xps {
	repeated Lks vMs = 1;
	repeated Rks pMs = 2;
	repeated int32 MMs = 3;
}

message Lks {
	int32 InstId = 1;
	int32 StartTime = 2;
	bool Challenges = 3;
	int32 Score = 4;
	repeated int32 EMs = 5;
	repeated Dks yMs = 6;
	int32 IMs = 7;
}

message Rks {
	int32 N6n = 1;
	int32 TMs = 2;
}

message Dks {
	int32 BuffId = 1;
	int32 q6n = 2;
	int32 G6n = 3;
}

// MessageId: 22360 (Request)
message dfs {
	int32 ActivityId = 108;
	int32 InstanceId = 159;
	repeated int32 RoleIds = 88;
	repeated Dks O6n = 155;
}

// MessageId: 29947 (Response)
message mfs {
	ErrorCode ErrorCode = 69;
}

// MessageId: 17402 (Request)
message Cfs {
	int32 ActivityId = 207;
	int32 N6n = 157;
	int32 k6n = 1;
}

// MessageId: 17035 (Response)
message gfs {
	ErrorCode ErrorCode = 149;
}

// MessageId: 22197 (Request)
message ffs {
}

// MessageId: 24888 (Response)
message vfs {
	ErrorCode ErrorCode = 143;
}

// MessageId: 17625 (Notify)
message pfs {
	int32 ActivityId = 240;
	int32 InstId = 187;
	int32 LMs = 142;
	int32 RMs = 47;
	int32 DMs = 249;
	int32 AMs = 203;
}

// MessageId: 18967 (Notify)
message Mfs {
	int32 ActivityId = 36;
	repeated Lks vMs = 115;
	repeated Rks pMs = 73;
	repeated int32 MMs = 34;
}

// MessageId: 23559 (Notify)
message evs {
}

message xYs {
	repeated OYs Rewards = 1;
}

message OYs {
	int32 Flag = 1;
	int64 bYs = 2;
	bool Rewarded = 3;
	bool CanGetReward = 4;
}

// MessageId: 27005 (Request)
message RYs {
	int32 Flag = 153;
}

// MessageId: 28316 (Response)
message PYs {
	ErrorCode ErrorCode = 205;
}

message Lzs {
	repeated Rzs Mzs = 1;
	repeated int32 Szs = 2;
	int32 Wma = 3;
}

message Rzs {
	int32 Flag = 1;
	int32 Score = 2;
	bool Rewarded = 3;
	bool Ezs = 4;
	int64 yzs = 5;
	int32 tBs = 6;
	int32 PassTime = 7;
}

message Azs {
	int32 Flag = 1;
	int32 Level = 2;
	int32 Exp = 3;
}

// MessageId: 22477 (Notify)
message uzs {
	Lzs Izs = 236;
}

// MessageId: 16126 (Notify)
message czs {
	repeated Rzs Mzs = 167;
}

// MessageId: 18323 (Notify)
message dzs {
	repeated Azs Phantoms = 161;
}

// MessageId: 15504 (Request)
message mzs {
	repeated int32 Ids = 186;
}

// MessageId: 15616 (Response)
message Czs {
	ErrorCode ErrorCode = 6;
}

// MessageId: 27456 (Request)
message gzs {
	repeated int32 Ids = 19;
}

// MessageId: 21701 (Response)
message fzs {
	ErrorCode ErrorCode = 89;
}

// MessageId: 16382 (Notify)
message vzs {
	bool Success = 190;
	int32 Score = 131;
	int32 tBs = 98;
	int32 InstId = 50;
	int32 PassTime = 182;
	int32 fih = 58;
}

message Mta {
	int32 roleId = 1;
	Azs Phantom = 2;
}

// MessageId: 23289 (Notify)
message _ta {
	repeated Mta RoleList = 75;
}

// MessageId: 28214 (Notify)
message dth {
	int32 PlayerId = 81;
	int32 roleId = 56;
	int64 pih = 34;
}

// MessageId: 17341 (Notify)
message mth {
	int32 PlayerId = 233;
	int64 pih = 112;
}

message Qrh {
	int32 Flag = 1;
	int64 yzs = 2;
	bool IsUnlock = 3;
	int32 Score = 4;
	bool Rewarded = 5;
	bool vih = 6;
}

message Krh {
	int32 Flag = 1;
	int32 Progress = 2;
	repeated Xrh Mih = 3;
}

message Xrh {
	int32 Flag = 1;
	int32 count = 2;
}

message lih {
	repeated Qrh Sih = 1;
	repeated int32 yih = 2;
	repeated int32 Eih = 3;
	repeated int32 Iih = 4;
	repeated int32 Tih = 5;
}

// MessageId: 28790 (Notify)
message Deh {
	int32 Flag = 1;
	int32 Wma = 218;
	int32 Lih = 126;
	int32 Rih = 29;
	bool vih = 3;
}

// MessageId: 23773 (Notify)
message weh {
	repeated Qrh Sih = 251;
}

// MessageId: 17020 (Notify)
message Peh {
	Krh Aih = 239;
}

// MessageId: 19856 (Notify)
message Beh {
	Krh Aih = 72;
	repeated int32 Dih = 247;
	repeated int32 wih = 224;
}

// MessageId: 28879 (Notify)
message qeh {
	repeated int32 Pih = 113;
}

// MessageId: 19171 (Notify)
message Jeh {
	lih Izs = 4;
}

// MessageId: 18155 (Request)
message Ueh {
	int32 Flag = 183;
}

// MessageId: 15284 (Response)
message Feh {
	ErrorCode ErrorCode = 145;
}

// MessageId: 28751 (Request)
message xeh {
	int32 Flag = 37;
}

// MessageId: 20362 (Response)
message beh {
	ErrorCode ErrorCode = 90;
}

// MessageId: 24507 (Request)
message Keh {
	int32 Flag = 129;
}

// MessageId: 22247 (Response)
message Xeh {
	ErrorCode ErrorCode = 123;
}

// MessageId: 25523 (Request)
message Yeh {
	int32 Flag = 238;
}

// MessageId: 16809 (Response)
message zeh {
	ErrorCode ErrorCode = 65;
}

// MessageId: 24566 (Request)
message gth {
}

// MessageId: 21215 (Response)
message fth {
	ErrorCode ErrorCode = 165;
}

enum DetectionType {
	DetectionType_NormalMonster = 0;
	DetectionType_Dungeon = 1;
	DetectionType_SilentArea = 2;
}

message AdventreTask {
	int32 Flag = 1;
	int32 State = 2;
	int32 AdventreProgress = 3;
}

enum AdventreTaskSate {
	AdventreTaskSate_UnFinish = 0;
	AdventreTaskSate_Finish = 1;
	AdventreTaskSate_Received = 2;
}

message AdventureManualData {
	repeated AdventreTask AdventreTask = 1;
	int32 NowChapter = 2;
	int32 ReceivedChapter = 3;
}

message AdventureItemData {
	int32 ItemId = 1;
	int32 ItemNum = 2;
}

message AdventureRewardData {
	int32 DropId = 1;
	repeated AdventureItemData Items = 2;
}

message DetectionTarget {
	int32 Flag = 1;
	int32 type = 2;
	bool UnlockState = 3;
	int64 RefresherTime = 4;
	int32 DetectionId = 5;
	int32 IsTrace = 6;
}

message DetectionUnlock {
	repeated int32 MonsterDetectionIds = 1;
	repeated int32 DungeonDetectionIds = 2;
	repeated int32 SilentAreaDetectionIds = 3;
}

message SelectDetectionTarget {
	int32 DetectionId = 1;
	int32 type = 2;
	int32 Flag = 3;
}

// MessageId: 26295 (Request)
message AdventureManualDataRequest {
	int32 PlayerId = 74;
}

// MessageId: 17388 (Response)
message AdventureManualDataResponse {
	int32 code = 94;
	AdventureManualData AdventureManualData = 228;
}

// MessageId: 21914 (Request)
message GetAdventureRewardRequest {
	int32 Flag = 23;
}

// MessageId: 17623 (Response)
message GetChapterRewardResponse {
	int32 code = 109;
	int32 Flag = 23;
}

// MessageId: 17923 (Request)
message WDOLLARn {
	int32 Chapter = 166;
}

// MessageId: 24725 (Response)
message KDOLLARn {
	int32 code = 237;
	int32 Chapter = 51;
}

// MessageId: 26167 (Request)
message DetectionRequest {
	int32 DetectionType = 1;
	repeated int32 DetectionId = 235;
	int32 DetectionConfId = 62;
}

// MessageId: 26486 (Response)
message DetectionResponse {
	int32 code = 180;
	repeated DetectionTarget DetectionTarget = 255;
	int32 DetectionConfId = 28;
}

// MessageId: 20962 (Notify)
message AdventureUpdateNotify {
	repeated AdventureManualData AdventureManualData = 35;
}

// MessageId: 18896 (Request)
message AdventureManualRequest {
	int32 PlayerId = 54;
}

enum SlientFirstAwardState {
	SlientFirstAwardState_NotUnlock = 0;
	SlientFirstAwardState_NotFinish = 1;
	SlientFirstAwardState_IsFinish = 2;
	SlientFirstAwardState_Jfs = 3;
}

// MessageId: 25011 (Response)
message AdventureManualResponse {
	int32 code = 109;
	AdventureManualData AdventureManualData = 95;
	repeated DetectionTarget DetectionTarget = 222;
	repeated AdventureRewardData AdventureRewardData = 156;
	DetectionUnlock DetectionUnlocks = 41;
	SelectDetectionTarget NowSelectDetectionTarget = 111;
	map<int32, int32> SlientFirstAwardMap = 162;
}

// MessageId: 26605 (Request)
message ReceivedSilentFirstAwardRequest {
	int32 Flag = 177;
}

// MessageId: 16647 (Response)
message ReceivedSilentFirstAwardResponse {
	ErrorCode ErrorCode = 6;
	repeated string ErrorParams = 123;
	map<int32, int32> ItemMap = 243;
}

// MessageId: 26960 (Notify)
message SlientFirstAwardNotify {
	int32 Flag = 118;
}

// MessageId: 29963 (Notify)
message UpdateMonsterUnlockNotify {
	DetectionUnlock DetectionUnlocks = 104;
}

// MessageId: 21330 (Request)
message SelectDetectionTargetRequest {
	SelectDetectionTarget SelectDetectionTarget = 61;
	bool IsCancelSelect = 38;
}

// MessageId: 16090 (Response)
message SelectDetectionTargetResponse {
	int32 code = 144;
	SelectDetectionTarget SelectDetectionTarget = 229;
}

// MessageId: 19752 (Notify)
message FollowDetectionTargetUpdateNotify {
	repeated DetectionTarget DetectionTarget = 4;
}

// MessageId: 19475 (Request)
message MonsterDetectionInfoRequest {
	repeated DetectionTarget Params = 167;
}

// MessageId: 27810 (Response)
message MonsterDetectionInfoResponse {
	repeated DetectionTarget DetectionTarget = 2;
}

// MessageId: 23795 (Request)
message NormalMonsterManualInfoRequest {
	int32 DetectionId = 3;
}

// MessageId: 24773 (Response)
message NormalMonsterManualInfoResponse {
	int32 code = 205;
	repeated DetectionTarget DetectionTarget = 196;
}

message UnlockDetectionLabelInfo {
	repeated sint32 UnlockedGuideIds = 1;
	repeated sint32 UnlockedDetectionTextIds = 2;
}

// MessageId: 16983 (Request)
message GetDetectionLabelInfoRequest {
}

// MessageId: 23678 (Response)
message GetDetectionLabelInfoResponse {
	UnlockDetectionLabelInfo UnlockLabelInfo = 143;
}

// MessageId: 24250 (Notify)
message AddUnlockedGuideNotify {
	repeated sint32 UnlockedGuideIds = 205;
}

// MessageId: 15512 (Notify)
message AddUnlockedDetectionTextNotify {
	repeated sint32 UnlockedDetectionTextIds = 162;
}

// MessageId: 15927 (Notify)
message AdviceSettingNotify {
	bool IsShow = 108;
}

// MessageId: 26943 (Request)
message AdviceSetRequest {
	bool IsShow = 202;
}

// MessageId: 17142 (Response)
message AdviceSetResponse {
	bool IsShow = 132;
	ErrorCode ErrorCode = 152;
}

message PbAdvice {
	int64 Flag = 1;
	int32 AreaId = 2;
	repeated PbAdviceContent Contents = 3;
	int32 UpVote = 4;
}

message AdviceComponentPb {
	PbAdvice Advice = 1;
	int32 PlayerId = 2;
	string PlayerName = 3;
}

// MessageId: 21402 (Notify)
message AdviceContentUpdateNotify {
	int64 Flag = 59;
	repeated PbAdviceContent Contents = 4;
}

// MessageId: 22288 (Notify)
message AdviceVoteUpdateNotify {
	int64 Flag = 68;
	int32 UpVote = 213;
}

enum PbAdviceContentType {
	PbAdviceContentType_Sentence = 0;
	PbAdviceContentType_Conjunction = 1;
	PbAdviceContentType_Expression = 2;
	PbAdviceContentType_r8n = 3;
}

message PbAdviceContent {
	int32 type = 1;
	int32 Flag = 2;
	int32 Word = 3;
}

// MessageId: 26307 (Request)
message AdviceRequest {
}

// MessageId: 22096 (Response)
message AdviceResponse {
	repeated PbAdvice Advices = 209;
	repeated int64 UpVoteIds = 160;
	ErrorCode ErrorCode = 157;
}

// MessageId: 26315 (Notify)
message AdviceUpdateNotify {
	repeated int64 UpVoteIds = 125;
}

// MessageId: 22259 (Request)
message AdviceCreateRequest {
	Vector Pos = 28;
	Rotator Rot = 42;
	repeated PbAdviceContent Contents = 175;
}

// MessageId: 28388 (Response)
message AdviceCreateResponse {
	PbAdvice Advice = 15;
	ErrorCode ErrorCode = 29;
}

// MessageId: 23684 (Request)
message AdviceModifyRequest {
	int64 Flag = 239;
	repeated PbAdviceContent Contents = 222;
}

// MessageId: 28552 (Response)
message AdviceModifyResponse {
	ErrorCode ErrorCode = 252;
}

// MessageId: 19001 (Request)
message AdviceDeleteRequest {
	int64 Flag = 35;
}

// MessageId: 23456 (Response)
message AdviceDeleteResponse {
	ErrorCode ErrorCode = 65;
}

enum PbAdviceVoteType {
	PbAdviceVoteType_Up = 0;
	PbAdviceVoteType_Cancel = 1;
}

// MessageId: 15967 (Request)
message AdviceVoteRequest {
	int64 Flag = 48;
	int32 type = 22;
}

// MessageId: 16399 (Response)
message AdviceVoteResponse {
	ErrorCode ErrorCode = 193;
}

message Ai {
	message AiHateEntity {
		int64 EntityId = 1;
		int32 HatredValue = 2;
	}


	message Int2Long {
		int32 First = 1;
		int64 Second = 2;
	}


	message iNs {
		int32 First = 1;
		bool Second = 2;
	}


	message rNs {
		repeated BlackboardParam AiBlackboards = 1;
		repeated Ai.AiHateEntity HateList = 2;
		repeated Ai.Int2Long AiBlackboardCd = 3;
	}


	message nNs {
		int64 EntityId = 1;
		Ai.rNs AiInfo = 2;
		int32 PlayerId = 3;
	}


	// MessageId: 16540 (Request)
	message AiInformationRequest {
		rNs AiInfo = 72;
	}


	// MessageId: 29891 (Response)
	message AiInformationResponse {
		ErrorCode ErrorCode = 123;
	}


	// MessageId: 24826 (Notify)
	message AiInformationNotify {
		repeated Int2Long AiBlackboardCd = 17;
	}


	// MessageId: 26497 (Request)
	message AiBlackboardsRequest {
		repeated BlackboardParam AiBlackboards = 145;
	}


	// MessageId: 28186 (Response)
	message AiBlackboardsResponse {
		ErrorCode ErrorCode = 190;
	}


	// MessageId: 17281 (Request)
	message AiBlackboardCdRequest {
		repeated Ai.Int2Long AiBlackboardCdModify = 80;
		repeated Ai.iNs AiBlackboardCdComplete = 208;
	}


	// MessageId: 18774 (Response)
	message AiBlackboardCdResponse {
		ErrorCode ErrorCode = 234;
	}


	// MessageId: 23008 (Notify)
	message AiBlackboardCdNotify {
		repeated int32 AiBlackboardCdDel = 136;
		repeated Ai.Int2Long AiBlackboardCdModify = 128;
		repeated Ai.iNs AiBlackboardCdComplete = 24;
	}


	// MessageId: 15659 (Request)
	message AiHateRequest {
		repeated AiHateEntity HateList = 54;
	}


	// MessageId: 25889 (Response)
	message AiHateResponse {
		ErrorCode ErrorCode = 6;
	}


	// MessageId: 23410 (Notify)
	message AiHateNotify {
		repeated AiHateEntity HateList = 74;
	}


	// MessageId: 17767 (Request)
	message AiControlSwitchRequest {
		int64 EntityId = 236;
	}


	// MessageId: 25179 (Response)
	message AiControlSwitchResponse {
		ErrorCode ErrorCode = 127;
	}


	// MessageId: 16891 (Notify)
	message AiControlSwitchNotify {
		repeated nNs AiControlSwitchInfos = 133;
	}


	// MessageId: 27077 (Notify)
	message PreAiControlSwitchNotify {
		repeated int64 EntityIds = 66;
	}


}

enum BlackboardParamType {
	BlackboardParamType_BlackboardParamType_None = 0;
	BlackboardParamType_BlackboardParamType_Int = 1;
	BlackboardParamType_BlackboardParamType_IntArray = 2;
	BlackboardParamType_BlackboardParamType_Long = 3;
	BlackboardParamType_BlackboardParamType_LongArray = 4;
	BlackboardParamType_BlackboardParamType_Boolean = 5;
	BlackboardParamType_BlackboardParamType_String = 6;
	BlackboardParamType_BlackboardParamType_StringArray = 7;
	BlackboardParamType_BlackboardParamType_Float = 8;
	BlackboardParamType_BlackboardParamType_FloatArray = 9;
	BlackboardParamType_BlackboardParamType_Vector = 10;
	BlackboardParamType_BlackboardParamType_VectorArray = 11;
	BlackboardParamType_BlackboardParamType_Rotator = 12;
	BlackboardParamType_BlackboardParamType_RotatorArray = 13;
	BlackboardParamType_BlackboardParamType_Entity = 14;
	BlackboardParamType_BlackboardParamType_EntityArray = 15;
}

message IntArrayBlackboard {
	repeated int32 Values = 1;
}

message LongArrayBlackboard {
	repeated int64 Values = 1;
}

message StringArrayBlackboard {
	repeated string Values = 1;
}

message FloatArrayBlackboard {
	repeated float Values = 1;
}

message VectorArrayBlackboard {
	repeated Vector Values = 1;
}

message RotatorArrayBlackboard {
	repeated Rotator Values = 1;
}

message BlackboardParam {
	string Key = 1;
	int32 type = 2;
	oneof Value {
		int32 IntValue = 3;
		IntArrayBlackboard IntValues = 4;
		int64 LongValue = 5;
		LongArrayBlackboard LongValues = 6;
		bool BooleanValue = 7;
		string StringValue = 8;
		StringArrayBlackboard StringValues = 9;
		float FloatValue = 10;
		FloatArrayBlackboard FloatValues = 11;
		Vector VectorValue = 12;
		VectorArrayBlackboard VectorValues = 13;
		Rotator RotatorValue = 14;
		RotatorArrayBlackboard RotatorValues = 15;
	}
}

// MessageId: 27604 (Request)
message WorldBlackboardRequest {
	repeated BlackboardParam Params = 147;
}

// MessageId: 17429 (Response)
message WorldBlackboardResponse {
	ErrorCode ErrorCode = 25;
}

// MessageId: 29215 (Notify)
message WorldBlackboardNotify {
	repeated BlackboardParam Params = 65;
}

// MessageId: 19020 (Request)
message EntityBlackboardRequest {
	int64 EntityId = 80;
	repeated BlackboardParam Params = 133;
}

// MessageId: 25253 (Response)
message EntityBlackboardResponse {
	ErrorCode ErrorCode = 88;
}

// MessageId: 18922 (Notify)
message EntityBlackboardNotify {
	int64 EntityId = 236;
	repeated BlackboardParam Params = 187;
}

// MessageId: 29716 (Notify)
message pth {
	int32 Flag = 188;
	int32 Delay = 47;
	int32 type = 172;
}

// MessageId: 20547 (Request)
message EnterAreaRequest {
	int32 Flag = 116;
	int32 Lja = 94;
}

// MessageId: 28024 (Response)
message EnterAreaResponse {
	ErrorCode ErrorCode = 196;
	int32 Flag = 120;
}

message dNs {
	int32 TreeOwnerId = 1;
	int64 TreeIncId = 2;
	string USs = 3;
	string State = 4;
}

// MessageId: 28679 (Notify)
message cfs {
	repeated dNs wSs = 193;
}

enum BanChatType {
	BanChatType_None = 0;
	BanChatType_All = 1;
	BanChatType_Friend = 2;
	BanChatType_Foreign = 3;
	BanChatType_Team = 4;
}

// MessageId: 16029 (Notify)
message BanChatNotify {
	int64 BanEndTime = 170;
	int32 BanChatType = 213;
}

message BanLogoutInfo {
	int32 Reason = 1;
	int64 BanEndTime = 2;
}

message ReportChatInfo {
	string ChatMessage = 1;
}

message ReportTargetInfo {
	string Name = 1;
	string Signature = 2;
}

// MessageId: 25215 (Request)
message ReportPlayerRequest {
	int32 TargetPlayerId = 135;
	ReportChatInfo ChatInfo = 17;
	int32 ReportReason = 20;
	string ReportMessage = 178;
	int32 ReportSource = 173;
	oneof vNs {
		ReportTargetInfo TargetInfo = 113;
	}
}

// MessageId: 15740 (Response)
message ReportPlayerResponse {
	ErrorCode ErrorCode = 176;
	int32 ReportCount = 207;
}

// MessageId: 15783 (Notify)
message PlayerRenameNotify {
	string Name = 61;
}

message CardShowEntry {
	int32 CardId = 1;
	bool IsRead = 2;
}

// MessageId: 17467 (Notify)
message BasicInfoNotify {
	int32 Flag = 51;
	repeated PlayerAttr IsStopCharacter = 95;
	repeated MingSuGenInfo MingSuGenInfos = 47;
	repeated DragonPoolInfo DragonPoolInfos = 38;
	repeated RoleShowEntry RoleShowList = 18;
	int32 CurCardId = 208;
	int32 Birthday = 137;
	repeated CardShowEntry CardUnlockList = 233;
	int32 RandomSeed = 169;
	bool DisplayBirthDay = 128;
	int64 Zha = 156;
	string ela = 104;
}

// MessageId: 18352 (Request)
message ModifyNameRequest {
	string Name = 24;
}

// MessageId: 26778 (Response)
message ModifyNameResponse {
	string Name = 95;
	ErrorCode ErrorCode = 63;
	int64 Zha = 182;
	string ela = 225;
}

// MessageId: 21630 (Request)
message ModifySignatureRequest {
	string Signature = 192;
}

// MessageId: 23657 (Response)
message ModifySignatureResponse {
	string Signature = 193;
	ErrorCode ErrorCode = 181;
}

// MessageId: 16594 (Request)
message ChangeHeadPhotoRequest {
	int32 HeadPhotoId = 165;
}

// MessageId: 19744 (Response)
message ChangeHeadPhotoResponse {
	int32 HeadPhotoId = 107;
	ErrorCode ErrorCode = 106;
}

// MessageId: 26903 (Notify)
message UnlockHeadPhotoNotify {
	int32 HeadPhotoId = 224;
}

// MessageId: 15936 (Notify)
message UnlockHeadFrameNotify {
	int32 HeadFrameId = 129;
}

enum NetStatusType {
	NetStatusType_Wifi = 0;
	NetStatusType_Stream = 1;
	NetStatusType_Wired = 2;
	NetStatusType_Other = 3;
}

enum ClientDeviceLevel {
	ClientDeviceLevel_Low = 0;
	ClientDeviceLevel_Medium = 1;
	ClientDeviceLevel_High = 2;
}

message ClientBasicInfo {
	string Platform = 1;
	string DeviceId = 2;
	int32 NetStatus = 3;
	string Model = 4;
	string CPU = 5;
	int32 DeviceLevel = 6;
	int32 Language = 7;
	string DistinctId = 8;
	string MacAddress = 9;
}

// MessageId: 18252 (Request)
message ClientBasicInfoRequest {
	ClientBasicInfo ClientBasicInfo = 68;
}

// MessageId: 29275 (Response)
message ClientBasicInfoResponse {
}

// MessageId: 26379 (Request)
message PlayerBasicInfoGetRequest {
	int32 Flag = 92;
}

// MessageId: 18676 (Response)
message PlayerBasicInfoGetResponse {
	PlayerDetails Info = 84;
	ErrorCode ErrorCode = 183;
}

// MessageId: 17386 (Request)
message BirthdayInitRequest {
	int32 Birthday = 232;
}

// MessageId: 29606 (Response)
message BirthdayInitResponse {
	ErrorCode ErrorCode = 141;
}

// MessageId: 28436 (Request)
message RoleShowListUpdateRequest {
	repeated int32 RoleList = 220;
}

// MessageId: 15653 (Response)
message RoleShowListUpdateResponse {
	ErrorCode ErrorCode = 252;
}

// MessageId: 24358 (Notify)
message HeadIdUpdateNotify {
	int32 HeadId = 1;
}

// MessageId: 25706 (Notify)
message RoleShowListUpdateNotify {
	repeated RoleShowEntry RoleShowList = 217;
}

// MessageId: 16962 (Request)
message ChangeCardRequest {
	int32 CardId = 101;
}

// MessageId: 27746 (Response)
message ChangeCardResponse {
	ErrorCode ErrorCode = 47;
}

// MessageId: 26208 (Request)
message ReadCardRequest {
	int32 CardId = 29;
}

// MessageId: 18253 (Response)
message ReadCardResponse {
	ErrorCode ErrorCode = 126;
}

// MessageId: 26791 (Notify)
message UnlockCardNotify {
	int32 CardId = 168;
}

// MessageId: 16646 (Request)
message BirthdayShowSetRequest {
	bool DOLLAR7n = 222;
}

// MessageId: 27280 (Response)
message BirthdayShowSetResponse {
	ErrorCode ErrorCode = 123;
}

// MessageId: 28026 (Notify)
message mgs {
	string Signature = 178;
}

// MessageId: 15759 (Notify)
message Rra {
	string wra = 184;
}

// MessageId: 28452 (Notify)
message Yha {
	string Name = 19;
	int64 Zha = 43;
}

// MessageId: 22978 (Request)
//message Eeh {
//	string Vxa = 86;
//}

// MessageId: 17841 (Response)
message Ieh {
	PlayerDetails Info = 247;
	ErrorCode ErrorCode = 3;
}

// MessageId: 17643 (Request)
message oth {
	string JNa = 74;
}

// MessageId: 19460 (Response)
message nth {
}

// MessageId: 23736 (Notify)
message sth {
	string JNa = 98;
	int32 PlayerId = 122;
}

// MessageId: 20281 (Request)
message qth {
	repeated string Aza = 23;
}

// MessageId: 26323 (Response)
message kth {
}

enum TNs {
	TNs_Int32 = 0;
	TNs_nTs = 1;
}

enum PlayerAttrKey {
	PlayerAttrKey_P6n = 0;
	PlayerAttrKey_M8n = 1;
	PlayerAttrKey_Coin = 2;
	PlayerAttrKey_RareCoin = 3;
	PlayerAttrKey_HeadPhoto = 4;
	PlayerAttrKey_HeadFrame = 5;
	PlayerAttrKey_l6n = 6;
	PlayerAttrKey_w8n = 7;
	PlayerAttrKey_Sign = 8;
	PlayerAttrKey__7n = 9;
	PlayerAttrKey_oSs = 10;
	PlayerAttrKey_nSs = 11;
	PlayerAttrKey_oOs = 12;
	PlayerAttrKey_CashCoin = 13;
	PlayerAttrKey_WorldPermission = 14;
}
message PlayerAttr {
	int32 Key = 1;
	int32 ValueType = 2;
	oneof Value {
		int32 Int32Value = 3;
		string StringValue = 4;
	}
}

// MessageId: 25394 (Notify)
message PlayerAttrNotify {
	repeated PlayerAttr IsStopCharacter = 213;
}

// MessageId: 26274 (Request)
message HandInMingSuRequest {
	int32 DragonPoolId = 214;
	int64 InteractEntityId = 101;
}

// MessageId: 26733 (Response)
message HandInMingSuResponse {
	ErrorCode ErrorCode = 252;
	int32 DragonPoolId = 103;
	int32 Level = 61;
	int32 ActiveStatus = 160;
	int32 InjectedCoreItemCount = 143;
}

message MingSuGenInfo {
	int64 CreatureGenID = 1;
}

message DragonPoolInfo {
	int32 DragonPoolId = 1;
	int32 ActiveStatus = 2;
	int32 Level = 3;
	int32 InjectedCoreItemCount = 4;
}

// MessageId: 25667 (Request)
message ActiveDragonPoolRequest {
	int32 DragonPoolId = 205;
}

// MessageId: 24193 (Response)
message ActiveDragonPoolResponse {
	ErrorCode ErrorCode = 60;
	int32 DragonPoolId = 41;
	int32 ActiveStatus = 196;
}

// MessageId: 27701 (Request)
message DragonPoolConfRequest {
	int32 DragonPoolId = 75;
}

message ItemEntry {
	int32 ItemId = 1;
	int32 ItemCount = 2;
}

message ItemDict {
	repeated ItemEntry Items = 1;
}

message Uih {
	int32 DragonPoolId = 1;
	repeated int32 QSs = 2;
	repeated ItemDict XSs = 3;
}

// MessageId: 21983 (Response)
message ghs {
	ErrorCode ErrorCode = 21;
	Uih Uih = 199;
}

// MessageId: 26716 (Request)
message vth {
	int32 DragonPoolId = 175;
	int64 InteractEntityId = 121;
}

// MessageId: 17068 (Response)
message Mth {
	ErrorCode ErrorCode = 209;
	int32 xih = 166;
}

// MessageId: 25864 (Request)
message Ith {
	int32 DragonPoolId = 200;
}

// MessageId: 23120 (Response)
//message Tth {
//	ErrorCode ErrorCode = 104;
//	Uih Uih = 43;
//	repeated int32 bih = 82;
//	repeated int32 Bih = 14;
//	int32 xih = 1;
//}

enum BattlePassType {
	BattlePassType_Free = 0;
	BattlePassType_Pay = 1;
}

enum BattlePassPayStatus {
	BattlePassPayStatus_NoPaid = 0;
	BattlePassPayStatus_Paid = 1;
	BattlePassPayStatus_Advanced = 2;
}


message PbBattlePassReward {
	int32 Level = 1;
	int32 ItemId = 2;
	int32 type = 3;
}

message PbBattlePassRecurringReward {
	int32 type = 1;
	int32 ItemId = 2;
	int32 count = 3;
}

message PbBattlePass {
	bool InTimeRange = 1;
	int32 Flag = 2;
	int32 Level = 3;
	int32 Exp = 4;
	int32 WeeklyTotalExp = 5;
	int32 PayStatus = 6;
	repeated PbBattlePassReward TakenRewards = 7;
	int64 BeginTime = 8;
	int64 EndTime = 9;
	repeated PbBattlePassRecurringReward RecurringRewards = 10;
	bool HadEnter = 11;
}

// MessageId: 21236 (Request)
message BattlePassRequest {
}

// MessageId: 16500 (Response)
message BattlePassResponse {
	PbBattlePass BattlePass = 251;
	ErrorCode ErrorCode = 17;
}

// MessageId: 22354 (Notify)
message BattlePassPaidNotify {
	int32 PayStatus = 205;
}

// MessageId: 15728 (Request)
message BattlePassTakeRewardRequest {
	int32 type = 101;
	int32 Level = 49;
	int32 ItemId = 195;
}

// MessageId: 28670 (Response)
message BattlePassTakeRewardResponse {
	ErrorCode ErrorCode = 209;
}

// MessageId: 28619 (Request)
message BattlePassRecurringTakeRequest {
	int32 type = 169;
	int32 ItemId = 33;
}

// MessageId: 23827 (Response)
message BattlePassRecurringTakeResponse {
	ErrorCode ErrorCode = 248;
}

// MessageId: 22169 (Request)
message BattlePassTakeAllRewardRequest {
}

// MessageId: 21122 (Response)
message BattlePassTakeAllRewardResponse {
	repeated PbBattlePassReward TakenRewards = 107;
	repeated PbBattlePassRecurringReward RecurringRewards = 192;
	ErrorCode ErrorCode = 200;
}

// MessageId: 18770 (Notify)
message BattlePassExpUpdateNotify {
	int32 Level = 179;
	int32 Exp = 55;
	int32 WeeklyTotalExp = 102;
	repeated PbBattlePassRecurringReward RecurringRewards = 60;
}

message PbBattlePassTask {
	int32 Flag = 1;
	int32 Current = 2;
	int32 Target = 3;
	bool IsFinished = 4;
	bool IsTaken = 5;
}

// MessageId: 18441 (Request)
message BattlePassTaskRequest {
}

// MessageId: 22125 (Response)
message BattlePassTaskResponse {
	int64 DayEnd = 195;
	int64 WeekEnd = 152;
	repeated PbBattlePassTask Tasks = 127;
	ErrorCode ErrorCode = 184;
}

// MessageId: 29957 (Notify)
message BattlePassTaskUpdateNotify {
	repeated PbBattlePassTask Tasks = 148;
}

// MessageId: 26565 (Request)
message BattlePassTaskTakeRequest {
	repeated int32 Ids = 239;
}

// MessageId: 26639 (Response)
message BattlePassTaskTakeResponse {
	repeated int32 Ids = 146;
	ErrorCode ErrorCode = 24;
}

// MessageId: 17208 (Push)
message BattlePassEnterPush {
}

// MessageId: 16251 (Request)
message BattlePassLevelUpRequest {
	int32 Level = 182;
}

// MessageId: 21584 (Response)
message BattlePassLevelUpResponse {
	ErrorCode ErrorCode = 134;
}

enum BtType {
	BtType_BtTypeInvalid = 0;
	BtType_BtTypeQuest = 1;
	BtType_BtTypeLevelPlay = 2;
	BtType_BtTypeInst = 3;
}


enum NodeStatus {
	NodeStatus_NotActive = 0;
	NodeStatus_BeforeActivate = 1;
	NodeStatus_t5n = 2;
	NodeStatus_Completing = 3;
	NodeStatus_CompletedSuccess = 4;
	NodeStatus_CompletedFailed = 5;
	NodeStatus_Suspend = 6;
	NodeStatus_Destroy = 7;
}

enum FailReason {
	FailReason_DefaultFail = 0;
	FailReason_AutoFail = 1;
	FailReason_EntityStateFail = 2;
	FailReason_TimeoutFail = 3;
	FailReason_LeaveInstFail = 4;
	FailReason_InstFail = 5;
	FailReason_CharacterDieFail = 6;
	FailReason_EntityDieFail = 7;
	FailReason_OutRangeFail = 8;
	FailReason_GiveUpFail = 9;
	FailReason_SneakTimeoutFail = 10;
	FailReason_TransferFail = 11;
	FailReason_PlayerMotionState = 12;
	FailReason_NpcTraceOutRange = 13;
	FailReason_NpcTraceAlertFull = 14;
	FailReason_DataLayerFail = 15;
	FailReason_PlayerLevelPlayMoveStateFail = 16;
}

message NodeInfo {
	int32 Status = 1;
	oneof GNs {
		ChildQuestNodeInfo ChildQuestNodeInfo = 2;
	}
}

message TreeInfo {
	int32 TreeOwnerId = 1;
	int64 TreeIncId = 2;
	int32 BtType = 3;
	int32 BlackboardId = 4;
	map<int32, NodeInfo> Nodes = 5;
	map<string, VarDefinePb> Vars = 6;
	repeated TimerInfoPb TimerInfos = 7;
	int32 SuspendType = 8;
	repeated OccupationPbInfo OccupationInfo = 9;
	map<string, string> wSs = 10;
	bool cDOLLARs = 11;
}

// MessageId: 23352 (Notify)
message BehaviorTreeInfoNotify {
	repeated TreeInfo TreeInfos = 83;
}

// MessageId: 27975 (Notify)
message BehaviorTreeDeleteNotify {
	repeated int64 TreeIncIds = 165;
}

enum ChildQuestNodeStatus {
	ChildQuestNodeStatus_CQNS_NotActive = 0;
	ChildQuestNodeStatus_CQNS_Enter = 1;
	ChildQuestNodeStatus_CQNS_EnterAction = 2;
	ChildQuestNodeStatus_CQNS_Progress = 3;
	ChildQuestNodeStatus_CQNS_Finished = 4;
	ChildQuestNodeStatus_CQNS_FinishAction = 5;
	ChildQuestNodeStatus_CQNS_Fail = 6;
}

message ChildQuestNodeProgress {
	oneof Progress {
		KillProgress Kill = 1;
		GetItemProgress GetItem = 2;
		MonsterCreatorProgress MonsterCreator = 3;
		UseItemProgress UseItem = 4;
		int32 levelPlayCount = 5;
		InteractProgress Interact = 6;
		CompleteInstProgress CompleteInst = 7;
		EntityStateProgress EntityStateList = 8;
	}

}

message EntityStateProgress {
	repeated int32 EntityId = 1;
}

message ChildQuestNodeInfo {
	int32 Status = 1;
	ChildQuestNodeProgress Progress = 2;
}

message KillProgress {
	repeated int32 MonId = 1;
	int32 PrefabNum = 2;
	int32 CurrNum = 3;
	int32 TotalNum = 4;
}

message InteractProgress {
	repeated int32 NpcId = 1;
}

message GetItemProgress {
	repeated GetItemCount Info = 1;
}

message GetItemCount {
	int32 ItemId = 1;
	int32 count = 2;
}

enum SpawnMonsterStepType {
	SpawnMonsterStepType_Prepare = 0;
	SpawnMonsterStepType_Active = 1;
	SpawnMonsterStepType_Refreshed = 2;
	SpawnMonsterStepType_End = 3;
}


message zNs {
	enum ENUMS {
		ENUMS_NotCreate = 0;
		ENUMS_Alive = 1;
		ENUMS_Death = 2;
	}


}

message SceneMonsterCreatedMonsterInfo {
	int32 PrefabId = 1;
	int32 MapId = 2;
	int64 BaseLife = 3;
	int32 State = 4;
}

message MonsterCreatorProgress {
	repeated MonsterCreatorProgressSlot Slots = 1;
	int32 TotalNum = 2;
}

message MonsterCreatorProgressSlot {
	int32 WaveId = 1;
	repeated int32 KillMonIds = 2;
	int32 CurrentWaveEndTime = 3;
	int32 SpawnStepType = 4;
	int32 CreatorEntityConfigId = 5;
	repeated SceneMonsterCreatedMonsterInfo MonsterInfo = 6;
}

message UseItemProgress {
	int32 ItemId = 1;
	int32 count = 2;
}

message CompleteInstProgress {
	int32 InstId = 1;
	int32 count = 2;
}

enum SuccessNodeStatus {
	SuccessNodeStatus_SNS_NotActive = 0;
	SuccessNodeStatus_SNS_Enter = 1;
	SuccessNodeStatus_SNS_Action = 2;
}

enum FailedNodeStatus {
	FailedNodeStatus_FNS_NotActive = 0;
	FailedNodeStatus_FNS_Enter = 1;
	FailedNodeStatus_FNS_Action = 2;
}

// MessageId: 29935 (Notify)
message UpdateNodeProgressNotify {
	int32 TreeOwnerId = 13;
	int64 TreeIncId = 190;
	int32 NodeId = 2;
	ChildQuestNodeProgress Progress = 180;
}

// MessageId: 24604 (Notify)
message UpdateChildQuestNodeStatusNotify {
	int32 TreeOwnerId = 197;
	int64 TreeIncId = 131;
	int32 NodeId = 20;
	int32 Status = 194;
}

// MessageId: 19141 (Notify)
message UpdateNodeStatusNotify {
	int32 TreeOwnerId = 38;
	int64 TreeIncId = 40;
	int32 NodeId = 92;
	int32 Status = 209;
}

// MessageId: 28983 (Request)
message SubmitNodeRequest {
	int32 TreeOwnerId = 218;
	int64 TreeIncId = 220;
	int32 NodeId = 243;
}

// MessageId: 29027 (Response)
message SubmitNodeResponse {
	int32 TreeOwnerId = 2;
	int64 TreeIncId = 180;
	int32 NodeId = 140;
	int32 ErrorId = 5;
}

enum PbHandInItemType {
	B9n_ItemIds = 0;
	B9n_w9n = 1;
}

message PbHandInItemInfo {
	int32 IncId = 1;
	int32 Num = 2;
	int32 ItemId = 3;
}

message PbHandInItem {
	repeated PbHandInItemInfo HandItemInfo = 1;
	int32 count = 2;
	int32 PbHandInItemType = 3;
}

// MessageId: 21182 (Request)
message HandInItemRequest {
	int32 TreeOwnerId = 251;
	int64 TreeIncId = 11;
	int32 NodeId = 144;
	repeated PbHandInItem HandInItem = 185;
}

// MessageId: 27172 (Response)
message HandInItemResponse {
	int32 ErrorId = 139;
}

enum n3s {
	n3s_CEs = 0;
	n3s_SendNpcMail = 1;
}

enum TimerSetType {
	TimerSetType_Add = 0;
	TimerSetType_Sub = 1;
	TimerSetType_Set = 2;
}

// MessageId: 15628 (Request)
message BtSetTimerInfoRequest {
	int32 TreeOwnerId = 145;
	int64 TreeIncId = 218;
	string TimerType = 125;
	int32 SetType = 72;
	int32 Second = 139;
	int32 NodeId = 40;
}

// MessageId: 22843 (Response)
message BtSetTimerInfoResponse {
	int32 ErrorId = 237;
}

message OccupationPbInfo {
	string ResourceName = 1;
	int32 NodeId = 2;
	int64 IncId = 3;
}

enum SuspendType {
	SuspendType_Occupation = 0;
	SuspendType_Online = 1;
	SuspendType_ScreenOccupation = 2;
}

// MessageId: 18822 (Notify)
message BtSuspendNotify {
	int32 TreeOwnerId = 189;
	int64 TreeIncId = 54;
	int32 NodeId = 167;
	repeated OccupationPbInfo OccupationInfo = 252;
	int32 SuspendType = 69;
	bool cDOLLARs = 188;
}

// MessageId: 17988 (Notify)
message OccupationInfoNotify {
	repeated OccupationPbInfo OccupationInfo = 49;
}

// MessageId: 24534 (Notify)
message AddOccupationInfoNotify {
	repeated OccupationPbInfo OccupationInfo = 224;
}

// MessageId: 20571 (Notify)
message RemoveOccupationInfoNotify {
	repeated string GEs = 192;
}

enum a3s {
	a3s_Z6n = 0;
	a3s_CMs = 1;
}

// MessageId: 23474 (Notify)
message TimeOccupationNotify {
	int32 OEs = 121;
}

// MessageId: 25771 (Request)
message BtForcedOccupationRequest {
	int64 TreeIncId = 50;
}

// MessageId: 15236 (Response)
message BtForcedOccupationResponse {
	int32 ErrorId = 36;
}

// MessageId: 17398 (Request)
message BtGiveUpRequest {
	int32 TreeOwnerId = 25;
	int64 TreeIncId = 180;
	int32 NodeId = 109;
}

// MessageId: 25310 (Response)
message BtGiveUpResponse {
	int32 ErrorId = 112;
}

// MessageId: 29392 (Notify)
message BtRollbackNotify {
	int32 TreeOwnerId = 214;
	int64 TreeIncId = 195;
	int32 kEs = 22;
	int32 NEs = 248;
}

// MessageId: 26466 (Request)
message BtRollbackRequest {
	int32 TreeOwnerId = 40;
	int64 TreeIncId = 93;
	int32 p9n = 62;
}

// MessageId: 17060 (Response)
message BtRollbackResponse {
	int32 ErrorId = 37;
}

// MessageId: 26363 (Notify)
message BtRollbackStartNotify {
	int32 TreeOwnerId = 202;
	int64 TreeIncId = 137;
	bool IsRollbackSubLevel = 1;
	bool IsRollbackPos = 5;
}

// MessageId: 29325 (Notify)
message yJn {
	int32 TreeOwnerId = 45;
	int64 TreeIncId = 243;
	TreeInfo TreeInfo = 239;
}

// MessageId: 19875 (Notify)
message DOLLAReh {
	int64 TreeIncId = 14;
}

// MessageId: 28782 (Notify)
message jeh {
	int64 TreeIncId = 27;
}

// MessageId: 26177 (Request)
message SneakRequest {
	int32 TreeOwnerId = 205;
	int64 TreeIncId = 74;
	int32 NodeId = 5;
	bool IsStart = 27;
}

// MessageId: 29368 (Response)
message SneakResponse {
	int32 ErrorId = 43;
}

// MessageId: 26721 (Request)
message SneakTimeRequest {
	int32 TreeOwnerId = 70;
	int64 TreeIncId = 47;
}

// MessageId: 22593 (Response)
message SneakTimeResponse {
	int32 ErrorId = 126;
}

// MessageId: 23300 (Notify)
message SneakNotify {
	int32 TreeOwnerId = 75;
	int64 TreeIncId = 115;
	int32 NodeId = 216;
	int64 EndTime = 101;
}

message TimerInfoPb {
	string TimerType = 1;
	int32 NodeId = 2;
	int64 EndTime = 3;
}

// MessageId: 25025 (Notify)
message UpdateTimerInfoNotify {
	int32 TreeOwnerId = 76;
	int64 TreeIncId = 1;
	TimerInfoPb HEs = 196;
}

// MessageId: 25365 (Request)
message TimerEndRequest {
	int32 TreeOwnerId = 35;
	int64 TreeIncId = 56;
	string TimerType = 110;
}

// MessageId: 21858 (Response)
message TimerEndResponse {
	int32 ErrorId = 16;
}

enum UiGamePlayType {
	UiGamePlayType_Cipher = 0;
	UiGamePlayType_SignalBreak = 1;
	UiGamePlayType_SundialPuzzle = 2;
	UiGamePlayType_MorseCode = 3;
	UiGamePlayType_SignalDevice = 4;
}

// MessageId: 28002 (Request)
message UiGamePlayRequest {
	int32 type = 228;
	string GamePlayKey = 162;
}

// MessageId: 26551 (Response)
message UiGamePlayResponse {
	int32 ErrorId = 234;
}

// MessageId: 25614 (Request)
message NpcTraceFailedRequest {
	int32 TreeOwnerId = 33;
	int64 TreeIncId = 177;
	int32 NodeId = 220;
}

// MessageId: 29000 (Response)
message NpcTraceFailedResponse {
	int32 ErrorId = 249;
}

// MessageId: 15699 (Notify)
message BtVarUpdateNotify {
	int32 TreeOwnerId = 234;
	int64 TreeIncId = 200;
	string VarName = 13;
	VarDefinePb VarDefine = 114;
}

message l3s {
	int32 FuncId = 1;
	bool Challenges = 2;
}

// MessageId: 16002 (Notify)
message GJn {
	repeated l3s FuncInfo = 245;
}

// MessageId: 20009 (Request)
message Sth {
	int32 TreeOwnerId = 96;
	int64 TreeIncId = 160;
	int32 NodeId = 151;
}

// MessageId: 26849 (Response)
message yth {
	ErrorCode ErrorCode = 31;
}

enum Yrh {
	Yrh_Invalid = 0;
	Yrh_TeleportDungeon = 1;
}

message zrh {
	repeated int32 qih = 1;
}

message Jrh {
	oneof K4s {
		zrh kih = 3;
	}

	int32 type = 1;
	bool IsEnable = 2;
}

// MessageId: 19060 (Notify)
message Eth {
	repeated Jrh FuncInfo = 86;
}

enum SourceType {
	SourceType_UnDefine = 0;
	SourceType_SourceEntity = 3;
	SourceType_SourceQuest = 4;
}

enum EntityConfigType {
	EntityConfigType_OldEntity = 0;
	EntityConfigType_P6n = 1;
	EntityConfigType_Global = 2;
	EntityConfigType_Character = 3;
	EntityConfigType_Template = 4;
	EntityConfigType_iTs = 5;
}

message FightBuffInformation {
	int32 HandleId = 1;
	int64 BuffId = 2;
	int32 Level = 3;
	int32 StackCount = 4;
	int64 InstigatorId = 5;
	int64 EntityId = 6;
	int32 ApplyType = 7;
	float Duration = 8;
	float LeftDuration = 9;
	repeated FightBuffEffectContext Context = 10;
	bool IsActive = 11;
	int32 ServerId = 12;
	int64 MessageId = 13;
}

message EntityPb {
	int64 Flag = 1;
	int32 ConfigId = 2;
	int32 ConfigType = 3;
	int32 EntityType = 4;
	Vector Pos = 5;
	Rotator Rot = 6;
	Vector InitPos = 7;
	LivingStatus LivingStatus = 8;
	bool IsVisible = 9;
	int32 PlayerId = 10;
	repeated EntityComponentPb ComponentPbs = 11;
	int32 DurabilityValue = 12;
	int32 EntityState = 13;
	Vector InitLinearVelocity = 14;
	bool IsPosAbnormal = 15;
	int32 PrefabId = 17;
	int64 PrefabIncId = 18;
	int32 SubEntityType = 19;
	int64 Oih = 21;
	oneof d3s {
		int32 Camp = 20;
	}
}

message EntityComponentPb {
	oneof C3s {
		AttributeComponentPb AttributeComponent = 1;
		TagComponentPb TagComponent = 2;
		TriggerComponentPb TriggerComponent = 3;
		Summon.SummonerComponentPb SummonerComponent = 4;
		PartComponentPb PartComponent = 5;
		VisionSkillComponentPb VisionSkillComponent = 6;
		AnimationStateComponentPb AnimationStateComponent = 7;
		BlackboardParamComponentPb BlackboardParamComponent = 8;
		SysBuffComponentPb SysBuffComponent = 10;
		ClientDataComponentPb ClientDataComponent = 11;
		MonsterWeaponComponentPb MonsterWeaponComponentPb = 12;
		MonsterAiComponentPb MonsterAiComponentPb = 13;
		FightBuffComponentPb FightBuffComponent = 15;
		NearbyTrackingComponentPb NearbyTrackingComponentPb = 16;
		DropComponentPb DropComponentPb = 17;
		MonsterCaptureComponentPb MonsterCaptureComponent = 18;
		LogicStateComponentPb LogicStateComponentPb = 19;
		AdviceComponentPb AdviceComponentPb = 20;
		LiftComponentPb LiftComponentPb = 21;
		InteractComponentPb InteractComponent = 22;
		EquipComponentPb EquipComponent = 23;
		BeControlledComponentPb BeControlledComponentPb = 24;
		ConcomitantsComponentPb ConcomitantsComponentPb = 25;
		TimelineTrackComponentPb TimelineTrackComponentPb = 26;
		Summon.SummonsComponentPb SummonsComponentPb = 27;
		EntityFsmComponentPb EntityFsmComponentPb = 28;
		BoardPb BoardPb = 29;
		PlacementItemPb PlacementItemPb = 30;
		StateTagComponentPb StateTagComponentPb = 31;
		MonsterGachaDataPb MonsterGachaDataPb = 32;
		FanComponentPb FanComponentPb = 33;
		NpcPb NpcPb = 34;
		BubbleComponentPb BubbleComponent = 35;
		PatrolComponentPb PatrolComponent = 36;
		RangeComponentPb RangeComponent = 37;
		PassiveSkillComponentPb PassiveSkillComponentPb = 38;
		Vys Vys = 39;
		DOLLARys DOLLARys = 40;
		Hys Hys = 41;
		Summon.Gih Gih = 42;
		Wys Wys = 43;
		Kys Kys = 44;
		Qys Qys = 45;
		Xys Xys = 46;
		Yys Yys = 47;
		ShieldComponentPb ShieldComponentPb = 48;
		cla cla = 49;
		Nih Nih = 50;
		Summon.Fih Fih = 51;
	}

}

message MonsterAiComponentPb {
	int32 WeaponId = 1;
	int64 HatredGroupId = 2;
	int32 AiTeamInitId = 3;
	int64 CombatMessageId = 4;
}

message MonsterWeaponComponentPb {
	int32 WeaponId = 1;
}

enum EntranceState {
	EntranceState_NotUnlock = 0;
	EntranceState_Unlockable = 1;
	EntranceState_Unlocked = 2;
	EntranceState_Closed = 3;
}

message RangeComponentPb {
	repeated int32 PlayerCount = 1;
	repeated int64 rIs = 2;
}

message w3s {
	int32 State = 1;
}

message ClientDataComponentPb {
	bool IsStaticInit = 1;
	int64 OwnerId = 2;
	int32 GroupId = 3;
}

message AttributeComponentPb {
	int32 HardnessModeId = 2;
	int32 RageModeId = 3;
	repeated GameplayAttributeData GameAttributes = 4;
}

message TagComponentPb {
	repeated GameplayTagData GameplayTags = 1;
	repeated int32 EntityCommonTags = 2;
	bool InitGameplayTag = 3;
}

message TriggerComponentPb {
	int32 TriggerCount = 1;
	int32 ExitTriggerCount = 2;
}

message StateTagComponentPb {
	int32 StateTagId = 1;
}

message VisionSkillComponentPb {
	repeated VisionSkillInformation VisionSkillInfos = 1;
}

message Hys {
	map<string, VarDefinePb> Vars = 1;
}

message BoneVisibleData {
	string sWn = 1;
	bool aWn = 2;
}

message AnimationStateComponentPb {
	repeated int32 AnimationStates = 1;
	repeated int32 SpecialStates = 2;
	repeated BoneVisibleData BoneVisibleDatas = 3;
	repeated int32 AnimationTags = 4;
}

message LogicStateComponentPb {
	int32 States = 1;
	int32 MoveState = 2;
	int32 AWn = 3;
	int32 UWn = 4;
}

message LiftComponentPb {
	int32 Location = 1;
}

message BlackboardParamComponentPb {
	repeated BlackboardParam BlackboardParams = 1;
}

message SysBuffComponentPb {
	repeated SysBuffInformation SysBuffInfos = 1;
}

message SysBuffInformation {
	int32 ServerId = 1;
	int64 BuffId = 2;
	int32 Level = 3;
	int64 MessageId = 4;
	int64 InstigatorId = 5;
	float Duration = 6;
	int32 StackCount = 7;
	int32 ApplyType = 8;
	bool IsIterable = 9;
}

message FightBuffComponentPb {
	repeated FightBuffInformation FightBuffInfos = 1;
	repeated BuffEffectCd ListBuffEffectCd = 2;
}

message NearbyTrackingComponentPb {
	bool IsEnable = 1;
}

message DropComponentPb {
	int32 ItemId = 1;
	int32 ShowPlanId = 2;
	int32 ItemCount = 3;
	int32 MapId = 4;
}

message MonsterCaptureComponentPb {
	int32 TemplateId = 1;
	int32 EntityId = 2;
	int32 MonsterId = 3;
}

message BubbleInfo {
	string ActionGuid = 1;
	GameCtxPb GameCtx = 2;
}

message BubbleComponentPb {
	repeated BubbleInfo BubbleInfos = 1;
}

message DynamicInteractInfo {
	string OptionGuid = 1;
	GameCtxPb GameCtx = 2;
	string Text = 3;
	bool eCa = 4;
}

message InteractComponentPb {
	repeated DynamicInteractInfo DynamicInteractInfos = 1;
	repeated int32 RandomInteractIndex = 2;
	bool Interacting = 3;
}

message Yys {
	int32 wIs = 1;
}

message BeControlledComponentPb {
	int64 PlayerEntityId = 1;
	int32 RelationId = 2;
	bool IsShow = 3;
	int32 BIs = 4;
	int64 constate_id = 5;
}

message DOLLARys {
	int32 qIs = 1;
	string GIs = 2;
	Vector o6n = 3;
	Rotator n6n = 4;
	string _6n = 5;
}

message ConcomitantsComponentPb {
	int64 VisionEntityId = 1;
	repeated int64 CustomEntityIds = 2;
	int64 PhantomRoleEid = 3;
}

message TimelineTrackControlDataPb {
	int32 ControlPoint = 1;
}

message TimelineTrackComponentPb {
	int32 index = 1;
	repeated TimelineTrackControlDataPb ControlDatas = 2;
}

message BoardPb {
	repeated OccupiedBoardGridInfo OccupiedGridList = 1;
	repeated BoardGridDynamicConfig DynamicGridConfigs = 2;
}

message CrystalMonsterSlotInfo {
	repeated int32 EntityIds = 1;
	int32 MonsterType = 2;
}

message CrystalMonsterInfoPb {
	repeated CrystalMonsterSlotInfo SlotInfoList = 1;
}

message MonsterGachaDataPb {
	repeated CrystalMonsterInfoPb MonsterCrystalInfoList = 1;
}

message FanComponentPb {
	int32 NumOfTurns = 1;
}

message PassiveSkillItemPb {
	CombatCommon CombatCommon = 1;
	int64 SkillId = 2;
}

message PassiveSkillComponentPb {
	repeated PassiveSkillItemPb PassiveSkillItemPbList = 1;
}

message j3s {
	UseSkillInformation UseSkillInfo = 1;
	int32 MontageIndex = 2;
	int32 QIs = 3;
	string XIs = 4;
	float SpeedRatio = 5;
	int64 MessageId = 6;
	int64 MontageContext = 7;
}

message Zrh {
	int32 SkillId = 1;
	int64 constate_id = 2;
}

message Vys {
	repeated j3s YIs = 1;
	repeated Zrh Vih = 2;
}

message UseSkillInformation {
	CombatCommon CombatCommon = 1;
	int64 Flag = 2;
	int32 SkillId = 3;
	MovementInformation MovementInformation = 4;
	Vector Location = 5;
	int64 TargetId = 6;
	float TimeStamp = 7;
	bool IsSpecialSkill = 8;
	int32 Duration = 9;
	int32 SkillInterruptLevel = 10;
	int32 FightState = 11;
}

message Wys {
	int64 constate_id = 1;
}

message Qys {
	int64 constate_id = 1;
}

message Xys {
	int64 constate_id = 1;
}

message Kys {
	int64 constate_id = 1;
}

// MessageId: 22612 (Notify)
message EntityAddNotify {
	repeated EntityPb EntityPbs = 82;
	bool RemoveTagIds = 125;
}

// MessageId: 28781 (Notify)
message EntityRemoveNotify {
	repeated EntityRemoveInfo RemoveInfos = 127;
	bool IsRemove = 121;
}

message K3s {
	int32 type = 1;
	int32 tTs = 2;
	string Name = 3;
}

enum Q3s {
	Q3s_NotDelay = 0;
	Q3s_qKn = 1;
}

message VarDefinePb {
	int32 VarType = 1;
	oneof Value {
		bool Boolean = 2;
		int64 Int = 3;
		string String = 4;
		float Float = 5;
		int32 Entity = 6;
		int32 Quest = 7;
		QuestState QuestState = 8;
		Vector Pos = 9;
		int64 Prefab = 10;
	}
}

message X3s {
	VarDefinePb Value = 1;
}

message Y3s {
	string Name = 1;
}

message J3s {
	string Name = 1;
}

message z3s {
	int32 SourceType = 1;
	oneof Z3s {
		X3s _Ts = 2;
		Y3s uTs = 3;
		J3s cTs = 4;
	}
}

message NpcPb {
	int32 SplineEntityId = 2;
	int32 SpawnEntityId = 3;
}

// MessageId: 15300 (Notify)
message nes {
	int32 Flag = 121;
	int32 mTs = 48;
}

// MessageId: 16365 (Push)
message hes {
	int64 Flag = 180;
	int32 ConfigId = 167;
	Vector Pos = 183;
	Rotator Rot = 198;
	int32 Level = 120;
	int32 mKn = 174;
}

enum LivingStatus {
	LivingStatus_Alive = 0;
	LivingStatus_Dead = 1;
	LivingStatus_Init = 2;
}

enum EntityState {
	EntityState_Default = 0;
	EntityState_Sleep = 1;
	EntityState_Born = 2;
	EntityState_Other = 3;
}

// MessageId: 18461 (Notify)
message EntranceStateNotify {
	int64 Flag = 138;
	int32 State = 164;
}

// MessageId: 24695 (Request)
message EntityBuffProducerRequest {
	int64 BuffConsumerId = 232;
}

// MessageId: 25449 (Response)
message EntityBuffProducerResponse {
	ErrorCode ErrorCode = 151;
}

enum BuffOperateType {
	BuffOperateType_AddBuff = 0;
	BuffOperateType_RemoveBuff = 1;
	BuffOperateType_UndoBuff = 2;
}

// MessageId: 25010 (Request)
message EntityBuffProducerOperateRequest {
	int32 OpType = 117;
	int64 OpEntityId = 202;
}

// MessageId: 29769 (Response)
message EntityBuffProducerOperateResponse {
	ErrorCode ErrorCode = 82;
	int32 OpType = 2;
	int64 OpEntityId = 16;
}

// MessageId: 22557 (Request)
message LogicStateInitRequest {
	CombatCommon CombatCommon = 219;
	int64 EntityId = 1;
	LogicStateComponentPb InitData = 138;
}

// MessageId: 24877 (Response)
message LogicStateInitResponse {
}

// MessageId: 23760 (Notify)
message LogicStateInitNotify {
	CombatCommon CombatCommon = 44;
	int64 EntityId = 199;
	LogicStateComponentPb InitData = 114;
}

// MessageId: 27948 (Request)
message SwitchLogicStateRequest {
	LogicStateComponentPb States = 20;
}

// MessageId: 27768 (Response)
message SwitchLogicStateResponse {
	ErrorCode ErrorCode = 195;
}

// MessageId: 16229 (Notify)
message SwitchLogicStateNotify {
	LogicStateComponentPb States = 183;
}

// MessageId: 26610 (Request)
message EntityActiveRequest {
	int64 EntityId = 231;
}

// MessageId: 28403 (Response)
message EntityActiveResponse {
	ErrorCode ErrorCode = 174;
	repeated EntityComponentPb ComponentPbs = 190;
	bool IsVisible = 78;
	Vector Pos = 1;
	Rotator Rot = 222;
}

// MessageId: 18032 (Request)
message AnimationGameplayTagRequest {
	int32 AddTagIds = 253;
	bool RemoveTagIds = 240;
}

// MessageId: 15141 (Response)
message AnimationGameplayTagResponse {
	ErrorCode ErrorCode = 43;
}

// MessageId: 28652 (Notify)
message AnimationGameplayTagNotify {
	int32 AddTagIds = 58;
	bool RemoveTagIds = 121;
}

// MessageId: 20436 (Request)
message AnimalDieRequest {
	int64 EntityId = 8;
	Vector Pos = 192;
}

// MessageId: 20702 (Response)
message AnimalDieResponse {
	ErrorCode ErrorCode = 39;
}

// MessageId: 28774 (Notify)
message AnimalDieNotify {
	int64 EntityId = 57;
	int32 PlayerId = 81;
}

// MessageId: 19578 (Request)
message AnimalDestroyRequest {
	int64 EntityId = 242;
}

// MessageId: 24955 (Response)
message AnimalDestroyResponse {
	ErrorCode ErrorCode = 51;
}

// MessageId: 21522 (Request)
message AnimalDropRequest {
	int64 EntityId = 114;
}

// MessageId: 18951 (Response)
message AnimalDropResponse {
	ErrorCode ErrorCode = 187;
}

// MessageId: 24225 (Notify)
message EntityStateReadyNotify {
	int64 EntityId = 69;
	int32 TagId = 161;
	bool Ready = 229;
}

// MessageId: 17792 (Request)
message EntityInteractRequest {
	int64 EntityId = 178;
	int32 OptionIndex = 251;
	int64 VisionEntityId = 185;
}

// MessageId: 29153 (Response)
message EntityInteractResponse {
	ErrorCode ErrorCode = 13;
	bool Interacting = 104;
}

// MessageId: 28742 (Request)
message EntityRandomInteractRequest {
	int64 EntityId = 11;
	int32 OptionIndex = 64;
}

// MessageId: 17238 (Response)
message EntityRandomInteractResponse {
	ErrorCode ErrorCode = 119;
	bool Interacting = 57;
}

// MessageId: 21447 (Request)
message EntityDynamicInteractRequest {
	int64 EntityId = 51;
	string OptionGuid = 151;
}

// MessageId: 16913 (Response)
message EntityDynamicInteractResponse {
	ErrorCode ErrorCode = 126;
	bool Interacting = 106;
}

// MessageId: 15984 (Notify)
message EntityAddDynamicInteractNotify {
	int64 EntityId = 80;
	string OptionGuid = 133;
	GameCtxPb GameCtx = 46;
	string Text = 7;
	bool eCa = 215;
}

// MessageId: 20089 (Notify)
message EntityChangeDynamicInteractTextNotify {
	int64 EntityId = 88;
	string OptionGuid = 188;
	string Text = 168;
}

// MessageId: 28696 (Notify)
message EntityRemoveDynamicInteractNotify {
	int64 EntityId = 171;
	string OptionGuid = 192;
}

// MessageId: 16711 (Notify)
message EntityInteractingNotify {
	int64 EntityId = 85;
	bool IsInteracting = 244;
}

// MessageId: 20817 (Notify)
message EntityAddBubbleNotify {
	int64 EntityId = 251;
	string ActionGuid = 109;
}

// MessageId: 15410 (Notify)
message EntityRemoveBubbleNotify {
	int64 EntityId = 153;
	string ActionGuid = 19;
}

// MessageId: 19580 (Request)
message EntityPosAbnormalRequest {
	int64 EntityId = 198;
	bool IsAbnormal = 14;
}

// MessageId: 23145 (Response)
message EntityPosAbnormalResponse {
	int32 code = 153;
}

// MessageId: 19484 (Request)
message EntityAdsorbRequest {
	int32 EntityId = 220;
}

// MessageId: 18306 (Response)
message EntityAdsorbResponse {
	ErrorCode ErrorCode = 138;
}

// MessageId: 16305 (Request)
message BoneVisibleChangeRequest {
	BoneVisibleData BoneVisibleData = 37;
}

// MessageId: 16452 (Response)
message BoneVisibleChangeResponse {
	ErrorCode ErrorCode = 165;
}

// MessageId: 23723 (Notify)
message BoneVisibleChangeNotify {
	BoneVisibleData BoneVisibleData = 67;
}

message EquipComponentPb {
	int32 WeaponId = 1;
	int32 WeaponBreachLevel = 2;
}

// MessageId: 24359 (Notify)
message EntityEquipChangeNotify {
	int64 EntityId = 187;
	EquipComponentPb EquipComponent = 234;
}

// MessageId: 18409 (Request)
message EntityStaticHookMoveRequest {
	int64 EntityId = 127;
	Vector Pos = 156;
}

// MessageId: 22754 (Response)
message EntityStaticHookMoveResponse {
	ErrorCode ErrorCode = 51;
}

// MessageId: 27475 (Notify)
message EntityStaticHookMoveNotify {
	int64 EntityId = 177;
	Vector Pos = 68;
}

// MessageId: 20167 (Notify)
message SilenceNpcNotify {
}

enum ELogicStateType {
	ELogicStateType_CharPositionState = 0;
	ELogicStateType_CharMoveState = 1;
	ELogicStateType_CharDirectionState = 2;
	ELogicStateType_CharPositionSubState = 3;
}

enum ECharPositionState {
	ECharPositionState_Ground = 0;
	ECharPositionState_Climb = 1;
	ECharPositionState_Air = 2;
	ECharPositionState_Water = 3;
	ECharPositionState_Ski = 4;
}

enum ECharPositionSubState {
	ECharPositionSubState_None = 0;
	ECharPositionSubState_WaterSurface = 1;
}

enum ECharMoveState {
	ECharMoveState_MoveStateOther = 0;
	ECharMoveState_MoveStateStand = 1;
	ECharMoveState_MoveStateWalk = 2;
	ECharMoveState_MoveStateWalkStop = 3;
	ECharMoveState_MoveStateRun = 4;
	ECharMoveState_MoveStateRunStop = 5;
	ECharMoveState_MoveStateSprint = 6;
	ECharMoveState_MoveStateSprintStop = 7;
	ECharMoveState_MoveStateDodge = 8;
	ECharMoveState_MoveStateLandRoll = 9;
	ECharMoveState_MoveStateKnockDown = 10;
	ECharMoveState_MoveStateParry = 11;
	ECharMoveState_MoveStateSoftKnock = 12;
	ECharMoveState_MoveStateHeavyKnock = 13;
	ECharMoveState_MoveStateNormalClimb = 14;
	ECharMoveState_MoveStateFastClimb = 15;
	ECharMoveState_MoveStateGlide = 16;
	ECharMoveState_MoveStateKnockUp = 17;
	ECharMoveState_MoveStateFastSwim = 18;
	ECharMoveState_MoveStateNormalSwim = 19;
	ECharMoveState_MoveStateSwing = 20;
	ECharMoveState_MoveStateCaptured = 21;
	ECharMoveState_MoveStateSlide = 22;
	ECharMoveState_MoveStateFlying = 23;
	ECharMoveState_MoveStateEnterClimb = 24;
	ECharMoveState_MoveStateExitClimb = 25;
	ECharMoveState_MoveStateNormalSki = 26;
	ECharMoveState_MoveStateStandUp = 27;
	ECharMoveState_MoveStateSoar = 28;
}

// MessageId: 21744 (Request)
message EntityPatrolStartRequest {
	int64 EntityId = 82;
	bool Dir = 249;
}

// MessageId: 24716 (Response)
message EntityPatrolStartResponse {
	int32 code = 190;
}

// MessageId: 15110 (Request)
message EntityPatrolStopRequest {
	int64 EntityId = 229;
}

// MessageId: 21013 (Response)
message EntityPatrolStopResponse {
	int32 code = 18;
}

// MessageId: 17259 (Request)
message EntityPatrolChangeDirRequest {
	int64 EntityId = 213;
	bool Dir = 125;
}

// MessageId: 19144 (Response)
message EntityPatrolChangeDirResponse {
	int32 code = 252;
}

message PatrolComponentPb {
	bool Dir = 1;
}

// MessageId: 15661 (Request)
message VfxNpcPatrolFinishRequest {
	int64 EntityId = 230;
}

// MessageId: 27078 (Response)
message VfxNpcPatrolFinishResponse {
	int32 code = 40;
}

// MessageId: 17998 (Request)
message EntitySendEventRequest {
	int64 EntityId = 243;
	string EventKey = 93;
}

// MessageId: 21706 (Response)
message EntitySendEventResponse {
	ErrorCode ErrorCode = 176;
}

// MessageId: 21896 (Request)
message Cgs {
	int64 EntityId = 48;
	int32 c6n = 3;
}

// MessageId: 29954 (Response)
message ggs {
	ErrorCode ErrorCode = 97;
	int64 EntityId = 229;
	int32 c6n = 37;
}

// MessageId: 17028 (Request)
message rts {
	int64 EntityId = 244;
	int32 eKn = 26;
	bool tKn = 130;
}

// MessageId: 23198 (Response)
message ots {
	ErrorCode ErrorCode = 73;
}

enum nFs {
	nFs_AttachTargetNone = 0;
	nFs_AttachTargetEntity = 1;
	nFs_AttachTargetActorPath = 2;
}

message sFs {
	int32 a6n = 1;
	string l6n = 2;
}

// MessageId: 20384 (Request)
message fgs {
	int64 EntityId = 61;
	Vector o6n = 32;
	Rotator n6n = 141;
	int32 s6n = 16;
	oneof Target {
		sFs h6n = 23;
		string _6n = 154;
	}
}

// MessageId: 18199 (Response)
message vgs {
	ErrorCode ErrorCode = 2;
}

// MessageId: 18377 (Notify)
message pgs {
	int64 EntityId = 236;
	Vector o6n = 183;
	Rotator n6n = 250;
	int32 s6n = 71;
	oneof Target {
		sFs h6n = 162;
		string _6n = 217;
	}
}

// MessageId: 27459 (Request)
message Mgs {
	int64 EntityId = 110;
	int32 u5n = 180;
	int32 index = 167;
	int32 TagId = 118;
}

// MessageId: 22109 (Response)
message Sgs {
	ErrorCode ErrorCode = 247;
}

// MessageId: 19624 (Notify)
message Efs {
	int64 EntityId = 87;
	string VarName = 254;
	VarDefinePb VarDefine = 138;
}

// MessageId: 16814 (Request)
message Nfs {
	int32 ConfigId = 249;
	int32 M9n = 166;
}

// MessageId: 20374 (Response)
message Ffs {
	ErrorCode ErrorCode = 4;
	Vector Pos = 180;
}

message ShieldInfoPb {
	int32 Handle = 1;
	int32 ConfigId = 2;
	int32 ShieldValue = 3;
	int32 Priority = 4;
	int32 BuffHandle = 5;
	bool IsValid = 6;
}

message ShieldComponentPb {
	repeated ShieldInfoPb ShieldInfoPbList = 1;
	int32 ShieldValueTotal = 2;
}

message cla {
	string type = 1;
	string State = 2;
}

// MessageId: 17134 (Notify)
message ula {
	int64 EntityId = 169;
	string type = 162;
	string State = 164;
}

message Nih {
	repeated int64 Hih = 1;
}

message VisionSkillInformation {
	int32 SkillId = 1;
	int32 Level = 2;
	repeated int32 StoneIds = 3;
	int32 Quality = 4;
}

// MessageId: 17484 (Notify)
message VisionSkillChangeNotify {
	int64 EntityId = 141;
	repeated VisionSkillInformation VisionSkillInfos = 28;
	int64 VisionEntityId = 49;
}

message PartComponentPb {
	repeated PartInformation PartLifeInfos = 1;
}

// MessageId: 24129 (Request)
message PartComponentInitRequest {
	int64 EntityId = 215;
	PartComponentPb PartComponent = 210;
}

// MessageId: 28845 (Response)
message PartComponentInitResponse {
}

// MessageId: 23184 (Notify)
message PartComponentInitNotify {
	int64 EntityId = 196;
	PartComponentPb PartComponent = 92;
}

message PartInformation {
	int32 PartId = 1;
	float LifeValue = 2;
	float LifeMax = 3;
	bool Activated = 4;
	int32 PartTag = 5;
}

message PartUpdateInfo {
	int32 PartId = 1;
	bool Activated = 2;
	bool Reset = 3;
}

// MessageId: 22558 (Request)
message PartUpdateRequest {
	int64 EntityId = 11;
	repeated PartUpdateInfo PartUpdateInfos = 38;
}

// MessageId: 28327 (Response)
message PartUpdateResponse {
	ErrorCode ErrorCode = 184;
}

// MessageId: 22157 (Notify)
message PartUpdateNotify {
	int64 EntityId = 216;
	repeated PartInformation PartInfos = 163;
}

enum ApplyGEType {
	ApplyGEType_Common = 0;
	ApplyGEType_UseExtraTime = 1;
}

// MessageId: 17266 (Request)
message ApplyGameplayEffectRequest {
	int32 Handle = 58;
	int64 Flag = 105;
	int32 Level = 236;
	int64 EntityId = 124;
	int64 InstigatorId = 132;
	int32 ApplyType = 67;
	int32 ServerId = 22;
	int32 StackCount = 90;
	bool IsActive = 76;
	oneof cFs {
		float Duration = 160;
	}
}

// MessageId: 18140 (Response)
message ApplyGameplayEffectResponse {
	int32 errCode = 61;
}

// MessageId: 26675 (Notify)
message ApplyGameplayEffectNotify {
	int32 Handle = 77;
	int64 Flag = 202;
	int32 Level = 206;
	int64 EntityId = 65;
	int64 InstigatorId = 243;
	int32 ApplyType = 191;
	bool IsActive = 47;
	int32 ServerId = 188;
	int32 StackCount = 148;
	oneof cFs {
		float Duration = 223;
	}
}

// MessageId: 27448 (Request)
message RemoveGameplayEffectRequest {
	int32 Handle = 155;
	int64 EntityId = 118;
	bool IsPrematureRemoval = 229;
}

// MessageId: 23319 (Response)
message RemoveGameplayEffectResponse {
	int32 errCode = 53;
	int32 Handle = 38;
}

// MessageId: 25688 (Notify)
message RemoveGameplayEffectNotify {
	int32 Handle = 219;
	int64 EntityId = 88;
}

// MessageId: 19686 (Request)
message OrderApplyBuffRequest {
	int64 Flag = 106;
	int32 Level = 126;
	int64 InstigatorId = 43;
	int32 ApplyType = 125;
	int32 ServerId = 149;
	int32 StackCount = 167;
	bool IsIterable = 237;
	oneof cFs {
		float Duration = 97;
	}
}

// MessageId: 20137 (Response)
message OrderApplyBuffResponse {
	ErrorCode ErrorCode = 20;
}

// MessageId: 20120 (Request)
message OrderRemoveBuffRequest {
	int64 Flag = 55;
	int32 StackCount = 21;
}

// MessageId: 17919 (Response)
message OrderRemoveBuffResponse {
	ErrorCode ErrorCode = 156;
}

// MessageId: 23089 (Notify)
message OrderApplyBuffNotify {
	int64 Flag = 125;
	int32 Level = 104;
	int64 InstigatorId = 184;
	int32 ApplyType = 48;
	int32 ServerId = 155;
	int32 StackCount = 88;
	bool IsIterable = 151;
	oneof cFs {
		float Duration = 169;
	}
}

// MessageId: 24409 (Notify)
message OrderRemoveBuffNotify {
	int64 Flag = 43;
	int32 StackCount = 164;
}

// MessageId: 19212 (Notify)
message ApplyBuffS2cRequestNotify {
	int64 Flag = 168;
	int32 Level = 60;
	int64 InstigatorId = 108;
	int32 ApplyType = 222;
	int32 ServerId = 8;
	int32 StackCount = 197;
	bool IsIterable = 180;
	int32 Reason = 131;
	oneof cFs {
		float Duration = 157;
	}
}

// MessageId: 18059 (Push)
message ApplyBuffS2cResponsePush {
	ErrorCode ErrorCode = 65;
	int32 Handle = 234;
	bool IsActive = 152;
}

// MessageId: 18320 (Notify)
message RemoveBuffS2cRequestNotify {
	int32 Handle = 177;
	int32 StackCount = 191;
	int32 Reason = 5;
}

// MessageId: 28754 (Push)
message RemoveBuffS2cResponsePush {
	ErrorCode ErrorCode = 181;
}

// MessageId: 25843 (Notify)
message RemoveBuffByIdS2cRequestNotify {
	int64 BuffId = 32;
	int32 StackCount = 191;
	int32 Reason = 186;
}

// MessageId: 27092 (Push)
message RemoveBuffByIdS2cResponsePush {
	ErrorCode ErrorCode = 36;
}

// MessageId: 22107 (Request)
message ActivateBuffRequest {
	int32 Handle = 174;
	bool On = 219;
}

// MessageId: 29340 (Response)
message ActivateBuffResponse {
	ErrorCode ErrorCode = 54;
}

// MessageId: 17158 (Notify)
message ActivateBuffNotify {
	int32 Handle = 218;
	bool On = 211;
}

// MessageId: 20815 (Request)
message OrderRemoveBuffByTagsRequest {
	repeated int32 TagIds = 130;
}

// MessageId: 23839 (Response)
message OrderRemoveBuffByTagsResponse {
	ErrorCode ErrorCode = 29;
}

// MessageId: 17244 (Notify)
message OrderRemoveBuffByTagsNotify {
	repeated int32 TagIds = 46;
}

message AttributeEventEffectData {
	repeated int32 TriggeredActiveHandles = 1;
}

message FightBuffEffectContext {
	float LeftCooldown = 1;
	oneof mFs {
		AttributeEventEffectData AttributeEventEffectData = 6;
	}
}

// MessageId: 19271 (Request)
message BuffEffectExecuteRequest {
	int32 index = 227;
	FightBuffEffectContext Context = 129;
}

// MessageId: 24615 (Response)
message BuffEffectExecuteResponse {
	int32 code = 190;
}

// MessageId: 22731 (Request)
message BuffStackCountRequest {
	int32 HandleId = 59;
	int32 NewStackCount = 205;
	bool IsPrematureRemoval = 216;
	int64 InstigatorId = 93;
}

// MessageId: 15686 (Response)
message BuffStackCountResponse {
	ErrorCode ErrorCode = 225;
}

// MessageId: 29238 (Notify)
message BuffStackCountNotify {
	int32 HandleId = 243;
	int32 NewStackCount = 209;
}

message FormationBuff {
	int32 Handle = 1;
	int64 Flag = 2;
	int32 Level = 3;
	int64 InstigatorId = 4;
	int32 ApplyType = 5;
	float Duration = 6;
	int32 ServerId = 8;
	int32 StackCount = 9;
	bool IsActive = 10;
	oneof gFs {
		float LeftDuration = 7;
	}
}

// MessageId: 23908 (Request)
message FormationBuffApplyRequest {
	int32 Handle = 211;
	int64 Flag = 146;
	int32 Level = 23;
	int64 InstigatorId = 102;
	int32 ApplyType = 20;
	int32 ServerId = 36;
	int32 StackCount = 74;
	bool IsActive = 84;
	oneof cFs {
		float Duration = 199;
	}
}

// MessageId: 20521 (Response)
message FormationBuffApplyResponse {
	int32 errCode = 30;
}

// MessageId: 27129 (Notify)
message FormationBuffApplyNotify {
	int32 Handle = 147;
	int64 Flag = 180;
	int32 Level = 87;
	int64 InstigatorId = 117;
	int32 ApplyType = 174;
	int32 ServerId = 243;
	int32 StackCount = 12;
	bool IsActive = 172;
	int32 PlayerId = 61;
	oneof cFs {
		float Duration = 79;
	}
}

// MessageId: 16706 (Request)
message FormationBuffRemoveRequest {
	int32 Handle = 46;
	bool IsPrematureRemoval = 204;
}

// MessageId: 28914 (Response)
message FormationBuffRemoveResponse {
	int32 errCode = 5;
}

// MessageId: 19643 (Notify)
message FormationBuffRemoveNotify {
	int32 PlayerId = 50;
	int32 Handle = 167;
}

// MessageId: 29437 (Request)
message FormationBuffActivateRequest {
	int32 Handle = 149;
	bool On = 250;
}

// MessageId: 23808 (Response)
message FormationBuffActivateResponse {
	int32 errCode = 131;
}

// MessageId: 19782 (Notify)
message FormationBuffActivateNotify {
	int32 PlayerId = 59;
	int32 Handle = 248;
	bool On = 6;
}

// MessageId: 17285 (Request)
message FormationBuffStackRequest {
	int32 HandleId = 70;
	int32 NewStackCount = 16;
}

// MessageId: 16992 (Response)
message FormationBuffStackResponse {
	ErrorCode ErrorCode = 53;
}

// MessageId: 25013 (Notify)
message FormationBuffStackNotify {
	int32 PlayerId = 221;
	int32 HandleId = 76;
	int32 NewStackCount = 157;
}

// MessageId: 18815 (Notify)
message FormationBuffApplyS2cRequestNotify {
	int64 Flag = 50;
	int32 Level = 133;
	int64 InstigatorId = 47;
	int32 ApplyType = 137;
	int32 ServerId = 249;
	int32 StackCount = 246;
	int32 Reason = 141;
	oneof cFs {
		float Duration = 196;
	}
}

// MessageId: 19220 (Push)
message FormationBuffApplyS2cResponsePush {
	int32 errCode = 94;
	int32 Handle = 157;
	bool IsActive = 208;
}

// MessageId: 17239 (Notify)
message FormationBuffRemoveS2cRequestNotify {
	int32 Handle = 115;
	int32 Reason = 77;
	int32 StackCount = 74;
}

// MessageId: 20104 (Push)
message FormationBuffRemoveS2cResponsePush {
	int32 errCode = 153;
}

// MessageId: 19207 (Notify)
message FormationBuffRemoveByIdS2cRequestNotify {
	int64 BuffId = 223;
	int32 Reason = 35;
	int32 StackCount = 44;
}

// MessageId: 24713 (Push)
message FormationBuffRemoveByIdS2cResponsePush {
	int32 errCode = 18;
}

message BuffEffectCd {
	int64 BuffId = 1;
	repeated int32 ListCdRemaining = 2;
}

// MessageId: 28897 (Request)
message BuffEffectRequest {
	int32 HandleId = 56;
	int32 index = 136;
}

// MessageId: 28785 (Response)
message BuffEffectResponse {
	int32 errCode = 250;
}

// MessageId: 24430 (Request)
message ChangeStateRequest {
	int32 FsmId = 172;
	int32 FromState = 69;
	int32 ToState = 13;
}

// MessageId: 27648 (Response)
message ChangeStateResponse {
	int32 FsmId = 147;
	DErrorResult Error = 206;
}

// MessageId: 15614 (Notify)
message ChangeStateNotify {
	int32 FsmId = 209;
	int32 FromState = 10;
	int32 ToState = 66;
}

// MessageId: 22140 (Request)
message ChangeStateConfirmRequest {
	int32 FsmId = 205;
	int32 State = 235;
}

// MessageId: 24809 (Response)
message ChangeStateConfirmResponse {
	int32 FsmId = 34;
	int32 State = 187;
	DErrorResult Error = 62;
}

// MessageId: 27694 (Notify)
message t3n {
	int32 FsmId = 11;
	int32 State = 32;
}

message fFs {
	int32 FsmId = 1;
	int32 OTs = 2;
	int32 Flag = 3;
	int32 kTs = 6;
}

message EntityFsmComponentPb {
	repeated fFs NTs = 1;
	int32 HashCode = 2;
	int32 CommonHashCode = 3;
	repeated DFsmBlackBoard BlackBoard = 4;
	FsmCustomBlackboardDatas FsmCustomBlackboardDatas = 5;
}

enum EFsmStateFlag {
	EFsmStateFlag_Changed = 0;
	EFsmStateFlag_Confirmed = 1;
}

// MessageId: 26085 (Request)
message FsmConditionPassRequest {
	int32 FsmId = 99;
	int32 FromState = 246;
	int32 ToState = 163;
	int32 ConditionIndex = 88;
	bool Value = 4;
}

// MessageId: 28167 (Response)
message FsmConditionPassResponse {
	int32 FsmId = 97;
	DErrorResult Error = 111;
}

// MessageId: 25884 (Notify)
message FsmResetNotify {
	EntityFsmComponentPb EntityFsmComponentPb = 140;
}

// MessageId: 23472 (Notify)
message FsmBlackboardNotify {
	repeated DFsmBlackBoard FsmBlackBoards = 163;
}

message FsmCustomBlackboardDatas {
	repeated DFsmBlackboardCustom BlackboardIntValues = 1;
}

// MessageId: 26070 (Notify)
message FsmCustomBlackboardNotify {
	FsmCustomBlackboardDatas FsmCustomBlackboardDatas = 55;
}

message DFsmBlackBoard {
	int32 Key = 1;
	int32 Value = 2;
}

message DFsmBlackboardCustom {
	string Key = 1;
	int32 Value = 2;
}

// MessageId: 27206 (Request)
message GmEntityFsmGroupInfoRequest {
	int64 EntityId = 152;
}

// MessageId: 18839 (Response)
message GmEntityFsmGroupInfoResponse {
	int64 EntityId = 74;
	repeated GmEntityFsmMachineInfo GmEntityFsmMachineInfos = 156;
}

message GmEntityFsmMachineInfo {
	int32 StateIndex = 1;
	repeated GmEntityFsmStateInfo GmEntityFsmStateInfos = 2;
}

message GmEntityFsmStateInfo {
	int32 StateIndex = 1;
	repeated GmEntityFsmTransitionInfo GmEntityFsmTransitionInfos = 2;
}

message GmEntityFsmTransitionInfo {
	int32 ToStateIndex = 1;
	repeated bool GmEntityFsmConditions = 2;
}

enum IFs {
	IFs_BT_Enter = 0;
	IFs_BT_Exit = 1;
	IFs_BT_BindStart = 2;
	IFs_BT_BindEnd = 3;
	IFs_BT_Task = 4;
}

// MessageId: 26668 (Request)
message x4n {
	int32 FsmId = 53;
	int32 State = 232;
	int32 index = 254;
	int32 X4n = 73;
}

// MessageId: 17379 (Response)
message Xfs {
	int32 FsmId = 25;
	int32 State = 227;
	ErrorCode ErrorCode = 149;
}

// MessageId: 23966 (Request)
message P4n {
	string i5n = 239;
	int32 V7s = 143;
	float SpeedRatio = 123;
	string StartSection = 105;
	float StartTimeSeconds = 70;
}

// MessageId: 19806 (Response)
message Yfs {
	ErrorCode ErrorCode = 171;
}

message BoardGridDynamicConfig {
	sint32 RowIndex = 1;
	sint32 ColumnIndex = 2;
	sint64 Flags = 3;
}

message PlacementItemPb {
	int32 LocatedBoardEntityConfigId = 1;
}

message BoardGridPositionInfo {
	int32 Row = 1;
	int32 Column = 2;
	int32 RotAngle = 3;
}

message OccupiedBoardGridInfo {
	BoardGridPositionInfo Pos = 1;
	int32 OccupyingEntityConfigId = 2;
	int32 EntityConfigType = 3;
}

message PositionAndRotate {
	Vector Pos = 1;
	Rotator Rot = 2;
}

// MessageId: 28171 (Notify)
message RemovePlacementFromBoardNotify {
	int32 EntityConfigType = 61;
	OccupiedBoardGridInfo GridInfo = 190;
}

// MessageId: 20048 (Notify)
message AddPlacementNotify {
	OccupiedBoardGridInfo GridInfo = 131;
	int32 EntityConfigType = 229;
}

message PlacementInfoChangeInfo {
	PlacementItemPb PlacementItemPb = 1;
	int64 PlacementEntityId = 2;
}

// MessageId: 23484 (Notify)
message PlacementInfoChangeNotify {
	repeated PlacementInfoChangeInfo ChangedList = 254;
}

// MessageId: 15682 (Request)
message PlaceItemOnBoardRequest {
	int64 TargetBoardEntityId = 125;
	int64 PlacementEntityId = 15;
	int32 ToPlace = 181;
	BoardGridPositionInfo PosOnBoard = 159;
	oneof DFs {
		PositionAndRotate PosRot = 108;
	}
}

// MessageId: 21056 (Response)
message PlaceItemOnBoardResponse {
	int32 errCode = 109;
	int32 ToPlace = 137;
}

// MessageId: 23234 (Notify)
message PlaceItemOnBoardNotify {
	int64 TargetBoardEntityId = 6;
	int64 PlacementEntityId = 47;
	int32 ToPlace = 146;
	BoardGridPositionInfo PosOnBoard = 55;
}

// MessageId: 21602 (Request)
message CommitBoardRequest {
	int64 BoardEntityId = 129;
}

// MessageId: 17650 (Response)
message CommitBoardResponse {
	int32 errCode = 251;
}

// MessageId: 24470 (Notify)
message CommitBoardSuccessNotify {
	int64 BoardEntityId = 76;
}

// MessageId: 16164 (Request)
message nzn {
	int64 TargetBoardEntityId = 225;
	int64 PlacementEntityId = 76;
	BoardGridPositionInfo PosOnBoard = 125;
	oneof DFs {
		PositionAndRotate PosRot = 177;
	}
}

// MessageId: 15339 (Response)
message MovePlacementResponse {
	int32 errCode = 7;
}

// MessageId: 17282 (Notify)
message MovePlacementNotify {
	int64 TargetBoardEntityId = 26;
	int64 PlacementEntityId = 113;
	BoardGridPositionInfo PosOnBoard = 140;
	oneof DFs {
		PositionAndRotate PosRot = 48;
	}
}

// MessageId: 25265 (Notify)
message BoardGridDynamicConfigChangeNotify {
	int64 BoardEntityId = 53;
	repeated BoardGridDynamicConfig ChangedConfigs = 158;
}

message Summon {
	enum x3s {
		x3s_ESummonTypeDefault = 0;
		x3s_ESummonTypeConcomitantVision = 1;
		x3s_ESummonTypeConcomitantCustom = 2;
		x3s_ESummonTypeConcomitantPhantomRole = 3;
	}


	message SummonerComponentPb {
		int64 SummonerId = 1;
		int32 SummonCfgId = 2;
		int32 SummonSkillId = 3;
		int32 PlayerId = 4;
		int32 type = 5;
	}


	message SummonsComponentPb {
		int32 Version = 1;
	}


	enum tJs {
		tJs_EPlayerFollowerDefault = 0;
		tJs_EPlayerFollowerExploreSkill = 1;
		tJs_EPlayerFollowerAuxiliary = 2;
		tJs_EPlayerFollowerMax = 3;
	}


	message STs {
		int32 type = 1;
		int64 EntityId = 2;
	}


	message Fih {
		repeated STs jih = 1;
	}


	message Gih {
		int64 PlayerEntityId = 1;
	}


	// MessageId: 24494 (Notify)
	message eJs {
		int32 PlayerId = 35;
		repeated Summon.STs jih = 153;
	}


}

// MessageId: 27418 (Notify)
message TeleportUpdateNotify {
	repeated int32 Ids = 74;
}

// MessageId: 22883 (Request)
message TeleportDataRequest {
}

// MessageId: 22228 (Response)
message TeleportDataResponse {
	int32 errCode = 212;
	repeated int32 Ids = 189;
}

// MessageId: 15217 (Request)
message TeleportTransferRequest {
	int32 Flag = 24;
}

// MessageId: 15798 (Response)
message TeleportTransferResponse {
	ErrorCode ErrorCode = 80;
	int32 IsTrace = 139;
	float PosX = 237;
	float PosY = 149;
	float PosZ = 235;
	float Pitch = 77;
	float Yaw = 55;
	float Roll = 138;
}

// MessageId: 23705 (Request)
message UnlockTeleportRequest {
	int32 Flag = 91;
}

// MessageId: 21719 (Response)
message UnlockTeleportResponse {
	ErrorCode ErrorCode = 74;
}

enum TeleportReason {
	TeleportReason_Transfer = 0;
	TeleportReason_ApiTeleport = 1;
	TeleportReason_BtRollbackFailed = 2;
	TeleportReason_ParkourTrans = 3;
	TeleportReason_Gm = 4;
	TeleportReason_Rouge = 5;
	TeleportReason_Fall = 6;
	TeleportReason_Action = 7;
	TeleportReason_UnOpenedAreaPullback = 8;
	TeleportReason_TemporaryTransfer = 9;
	TeleportReason_Vvs = 10;
	TeleportReason_Drown = 11;
	TeleportReason_FlowStart = 12;
	TeleportReason_CorniceTrans = 13;
}

// MessageId: 26900 (Notify)
message TeleportNotify {
	int32 IsTrace = 194;
	float PosX = 237;
	float PosY = 24;
	float PosZ = 246;
	float PosA = 111;
	int32 Reason = 65;
	GameCtxPb GameCtx = 78;
	TransitionOptionPb TransitionOption = 55;
}

enum TransitionType {
	TransitionType_Empty = 0;
	TransitionType_PlayEffect = 1;
	TransitionType_PlayMp4 = 2;
	TransitionType_CenterText = 3;
	TransitionType_FadeInScreen = 4;
	TransitionType_Seamless = 5;
}

message TransitionOptionPb {
	int32 TransitionType = 1;
	oneof p4s {
		string ResourePath = 2;
		TransitionFlowPb TransitionFlow = 3;
		wDOLLARs RDOLLARs = 4;
	}
}

message TransitionFlowPb {
	string FlowListName = 1;
	int32 FlowId = 2;
	int32 StateId = 3;
}

message wDOLLARs {
	string DDOLLARs = 1;
	float ADOLLARs = 2;
	float UDOLLARs = 3;
	float PDOLLARs = 4;
	bool cta = 5;
	Eta dta = 6;
}

message Eta {
	string mta = 1;
	string Cta = 2;
	float gta = 3;
	float fta = 4;
	float vta = 5;
	float pta = 6;
}

// MessageId: 25905 (Request)
message TeleportFinishRequest {
}

// MessageId: 21180 (Response)
message TeleportFinishResponse {
	ErrorCode ErrorCode = 106;
}

// MessageId: 19660 (Notify)
message FallFinishNotify {
}

// MessageId: 25547 (Request)
message UnOpenedAreaPullbackRequest {
}

// MessageId: 15573 (Response)
message UnOpenedAreaPullbackResponse {
	ErrorCode ErrorCode = 29;
}

// MessageId: 28094 (Request)
message TeleportDungeonRequest {
	int32 InstanceId = 71;
	repeated int32 RoleIds = 226;
	int32 PosEntityId = 171;
	TransitionOptionPb TransitionOption = 30;
}

// MessageId: 15723 (Response)
message TeleportDungeonResponse {
	ErrorCode ErrorCode = 221;
}

// MessageId: 17680 (Request)
message BlockListRequest {
}

// MessageId: 26602 (Response)
message BlockListResponse {
	repeated PlayerDetails BlockList = 82;
	ErrorCode ErrorCode = 195;
}

// MessageId: 22575 (Request)
message BlockPlayerRequest {
	int32 Flag = 1;
}

// MessageId: 21078 (Response)
message BlockPlayerResponse {
	PlayerDetails Info = 50;
	ErrorCode ErrorCode = 225;
}

// MessageId: 16529 (Request)
message UnblockPlayerRequest {
	int32 Flag = 163;
}

// MessageId: 19896 (Response)
message UnblockPlayerResponse {
	ErrorCode ErrorCode = 5;
}

message BuffItem {
	int32 ItemId = 1;
	int64 lLs = 3;
}

// MessageId: 20487 (Request)
message BuffItemRequest {
	int32 ItemId = 207;
	int32 Num = 232;
	int32 roleId = 150;
}

// MessageId: 24301 (Response)
message BuffItemResponse {
	ErrorCode ErrorCode = 104;
	BuffItem BuffItemInfo = 185;
	int32 roleId = 192;
}

// MessageId: 19358 (Notify)
message BuffItemNotify {
	repeated BuffItem ItemBuffList = 189;
}

// MessageId: 23554 (Notify)
message BuffItemUpdateNotify {
	BuffItem BuffItem = 161;
}

message CalabashDevelopConditionState {
	int32 ConditionId = 1;
	bool Rewarded = 2;
}

message CalabashDevelopInfo {
	int32 MonsterId = 1;
	repeated CalabashDevelopConditionState UnlockConditions = 2;
}

message CalabashMsg {
	int32 Level = 1;
	int32 Exp = 2;
	repeated int32 UnlockedLevels = 3;
	repeated CalabashDevelopInfo UnlockedDevelopRewards = 4;
	int32 IdentifyGuaranteeCount = 5;
}

message CalabashCfg {
	int32 LevelUpExp = 1;
	int32 LevelUpCondition = 3;
	map<int32, int32> CatchGain = 4;
}

// MessageId: 25049 (Notify)
message CalabashMsgNotify {
	CalabashMsg CalabashMsg = 189;
	CalabashCfg CalabashCfg = 213;
}

// MessageId: 26817 (Request)
message CalabashMsgRequest {
}

// MessageId: 29239 (Response)
message CalabashMsgResponse {
	int32 errCode = 211;
	CalabashMsg CalabashMsg = 63;
	CalabashCfg CalabashCfg = 62;
}

// MessageId: 18020 (Notify)
message CalabashExpAddNotify {
	int32 CurExp = 239;
	int32 AddExp = 195;
	int32 CurLevel = 237;
	CalabashCfg CalabashCfg = 242;
}

// MessageId: 21874 (Notify)
message CalabashDevelopRewardUnlockNotify {
	CalabashDevelopInfo UnlockedDevelopReward = 108;
	int32 ItemId = 237;
	int32 IncrId = 211;
}

// MessageId: 18412 (Notify)
message CalabashLevelsRewardNotify {
	repeated int32 RewardedLevels = 1;
}

// MessageId: 27955 (Request)
message CalabashLevelRewardRequest {
	int32 Level = 54;
}

// MessageId: 16914 (Response)
message CalabashLevelRewardResponse {
	ErrorCode ErrorCode = 83;
}

// MessageId: 23536 (Request)
message CdKeyVerifyRequest {
	string CdKey = 222;
}

// MessageId: 23179 (Response)
message CdKeyVerifyResponse {
	ErrorCode ErrorCode = 207;
}

// MessageId: 29319 (Request)
message ChatRequest {
	int32 ChannelId = 248;
	string Content = 38;
	repeated string ChatParams = 61;
}

// MessageId: 29640 (Response)
message ChatResponse {
	ErrorCode ErrorCode = 250;
	repeated string ErrorParams = 198;
	map<int32, string> Data = 21;
}

// MessageId: 24334 (Notify)
message ChatNotify {
	string Content = 49;
}

// MessageId: 21793 (Notify)
message SysInfoNotify {
	ErrorCode ErrorCode = 198;
	repeated string ErrorParams = 140;
}

// MessageId: 18073 (Notify)
message SysErrorNotify {
	ErrorCode ErrorCode = 203;
	repeated string ErrorParams = 105;
}

// MessageId: 16524 (Notify)
message ConsoleNotify {
	string type = 95;
	string Content = 150;
}

enum ChatContentType {
	l8n_SIs = 0;
	l8n_Emoji = 1;
}

// MessageId: 25220 (Request)
message PrivateChatRequest {
	int32 TargetUID = 129;
	ChatContentType ChatContentType = 100;
	string Content = 72;
}

// MessageId: 27775 (Response)
message PrivateChatResponse {
	int32 TargetUID = 122;
	ErrorCode ErrorCode = 155;
	string MsgId = 14;
	string FilterMsg = 11;
}

message ChatContentProto {
	int32 SenderUID = 1;
	ChatContentType ChatContentType = 2;
	string Content = 3;
	bool OfflineMsg = 4;
	int64 UTCTime = 5;
	string MsgId = 6;
	string Wih = 7;
}

// MessageId: 22071 (Notify)
message PrivateMessageNotify {
	ChatContentProto ChatContent = 144;
}

// MessageId: 27759 (Request)
message PrivateChatHistoryRequest {
	int32 TargetUID = 170;
	int32 StartIndex = 123;
}

// MessageId: 20989 (Response)
message PrivateChatHistoryResponse {
	ErrorCode ErrorCode = 170;
	PrivateChatHistoryContentProto Data = 210;
}

message PrivateChatHistoryContentProto {
	int32 TargetUID = 1;
	repeated ChatContentProto Chats = 2;
	bool HistoryIsEnd = 3;
	int32 TotalNums = 4;
}

// MessageId: 24204 (Notify)
message PrivateChatHistoryNotify {
	repeated PrivateChatHistoryContentProto AllChats = 121;
}

// MessageId: 29777 (Request)
message PrivateChatDataRequest {
}

// MessageId: 18711 (Response)
message PrivateChatDataResponse {
	bool Qih = 174;
}

// MessageId: 26215 (Request)
message ChatMutePlayerRequest {
	int32 TargetUID = 218;
	bool Mute = 68;
}

// MessageId: 22949 (Response)
message ChatMutePlayerResponse {
	ErrorCode ErrorCode = 39;
	repeated int32 RemoveMutes = 174;
}

enum PrivateChatOperateType {
	PrivateChatOperateType_CloseChat = 0;
	PrivateChatOperateType_OpenChat = 1;
	PrivateChatOperateType_ReadMsg = 2;
}

// MessageId: 25241 (Request)
message PrivateChatOperateRequest {
	int32 OperateType = 121;
	int32 TarPlayerId = 246;
}

// MessageId: 26822 (Response)
message PrivateChatOperateResponse {
	ErrorCode ErrorCode = 173;
}

// MessageId: 15364 (Notify)
message ChatMutePlayerListNotify {
	repeated int32 PlayerId = 247;
}

enum ChatChannelType {
	ChatChannelType_Default = 0;
	ChatChannelType_Private = 1;
	ChatChannelType_Team = 2;
}

enum SubChatChannelType {
	SubChatChannelType_WorldTeam = 0;
	SubChatChannelType_MatchTeam = 1;
}

// MessageId: 19345 (Request)
message ChannelChatRequest {
	int32 ChannelType = 214;
	int32 SubChannelType = 183;
	ChatContentType ChatContentType = 66;
	string Content = 205;
}

// MessageId: 18010 (Response)
message ChannelChatResponse {
	ErrorCode ErrorCode = 112;
}

// MessageId: 28363 (Notify)
message ChannelChatMessageNotify {
	int32 ChannelType = 114;
	int32 SubChannelType = 65;
	ChannelChatMessageInfo MessageInfo = 142;
}

enum ChatChannelNoticeType {
	ChatChannelNoticeType_None = 0;
	ChatChannelNoticeType_EnterTeam = 1;
	ChatChannelNoticeType_ExitTeam = 2;
}


message ChannelChatMessageInfo {
	int32 SenderId = 1;
	int32 SenderIcon = 2;
	string SenderName = 3;
	int32 ChatContentType = 4;
	string Content = 5;
	int32 NoticeType = 6;
	int64 SendTime = 7;
	string Kih = 8;
	string Wih = 9;
}

// MessageId: 18087 (Notify)
message ChannelChatHistoryNotify {
	int32 ChannelType = 13;
	int32 SubChannelType = 3;
	repeated ChannelChatMessageInfo MessageInfos = 153;
}

enum bca {
	bca_TaskReward = 0;
	bca_SignReward = 2;
	bca_ScoreReward = 3;
}

// MessageId: 17423 (Request)
message Lca {
	int32 k6n = 55;
	repeated int32 Ids = 163;
	int32 ActivityId = 59;
}

// MessageId: 18443 (Response)
message Rca {
	ErrorCode ErrorCode = 154;
}

message CombatMessage {
	message CombatMessageTest {
		CombatCommon CombatCommon = 1;
		oneof kFs {
			FormationBuffApplyS2cResponsePush FormationBuffApplyS2cResponsePush = 2;
			FormationBuffRemoveS2cResponsePush FormationBuffRemoveS2cResponsePush = 3;
			ApplyBuffS2cResponsePush ApplyBuffS2cResponsePush = 4;
			RemoveBuffS2cResponsePush RemoveBuffS2cResponsePush = 5;
			RemoveBuffByIdS2cResponsePush RemoveBuffByIdS2cResponsePush = 6;
			FormationBuffRemoveByIdS2cResponsePush FormationBuffRemoveByIdS2cResponsePush = 7;
		}
	}

	message CombatNotifyData {
		        CombatCommon CombatCommon = 1;
			CreateBulletNotify CreateBulletNotify = 2;
			DestroyBulletNotify DestroyBulletNotify = 3;
			DamageExecuteNotify DamageExecuteNotify = 4;
			ApplyGameplayEffectNotify ApplyGameplayEffectNotify = 5;
			RemoveGameplayEffectNotify RemoveGameplayEffectNotify = 6;
			HitNotify HitNotify = 7;
			SkillNotify SkillNotify = 8;
			UseSkillNotify UseSkillNotify = 9;
			EndSkillNotify EndSkillNotify = 10;
			EntityLoadCompleteNotify EntityLoadCompleteNotify = 11;
			PartUpdateNotify PartUpdateNotify = 12;
			PartComponentInitNotify PartComponentInitNotify = 14;
			MaterialNotify MaterialNotify = 15;
			EJs EJs = 16;
			EntityIsVisibleNotify EntityIsVisibleNotify = 17;
			SwitchCharacterStateNotify SwitchCharacterStateNotify = 18;
			bFn bFn = 19;
			LogicStateInitNotify LogicStateInitNotify = 20;
			SwitchLogicStateNotify SwitchLogicStateNotify = 21;
			AttributeChangedNotify AttributeChangedNotify = 22;
			AnimationStateChangedNotify AnimationStateChangedNotify = 23;
			AnimationStateInitNotify AnimationStateInitNotify = 24;
			ModifyBulletParamsNotify ModifyBulletParamsNotify = 25;
			DrownNotify DrownNotify = 26;
			OrderApplyBuffNotify OrderApplyBuffNotify = 27;
			OrderRemoveBuffNotify OrderRemoveBuffNotify = 28;
			ActivateBuffNotify ActivateBuffNotify = 29;
			OrderRemoveBuffByTagsNotify OrderRemoveBuffByTagsNotify = 30;
			Ai.AiInformationNotify AiInformationNotify = 31;
			BattleStateChangeNotify BattleStateChangeNotify = 32;
			AnimationGameplayTagNotify AnimationGameplayTagNotify = 33;
			BoneVisibleChangeNotify BoneVisibleChangeNotify = 34;
			Ai.AiBlackboardCdNotify AiBlackboardCdNotify = 35;
			CaughtNotify CaughtNotify = 36;
			EntityStaticHookMoveNotify EntityStaticHookMoveNotify = 37;
			ChangeStateNotify ChangeStateNotify = 38;
			t3n t3n = 40;
			BuffStackCountNotify BuffStackCountNotify = 41;
			MontagePlayNotify MontagePlayNotify = 42;
			ANStartNotify ANStartNotify = 43;
			FsmResetNotify FsmResetNotify = 44;
			Debug.DamageRecordNotify DamageRecordNotify = 45;
			Ai.AiHateNotify AiHateNotify = 46;
			FsmBlackboardNotify FsmBlackboardNotify = 47;
			CharacterBattleStateChangeNotify CharacterBattleStateChangeNotify = 48;
			FormationBuffApplyNotify FormationBuffApplyNotify = 49;
			FormationBuffStackNotify FormationBuffStackNotify = 50;
			FormationBuffApplyS2cRequestNotify FormationBuffApplyS2cRequestNotify = 51;
			FormationBuffRemoveS2cRequestNotify FormationBuffRemoveS2cRequestNotify = 52;
			ApplyBuffS2cRequestNotify ApplyBuffS2cRequestNotify = 53;
			RemoveBuffS2cRequestNotify RemoveBuffS2cRequestNotify = 54;
			FormationBuffRemoveNotify FormationBuffRemoveNotify = 55;
			FormationBuffActivateNotify FormationBuffActivateNotify = 56;
			ActorVisibleNotify ActorVisibleNotify = 57;
			RTimeStopRequest RTimeStopRequest = 58;
			RemoveBuffByIdS2cRequestNotify RemoveBuffByIdS2cRequestNotify = 59;
			FormationBuffRemoveByIdS2cRequestNotify FormationBuffRemoveByIdS2cRequestNotify = 60;
			ShieldUpdateNotify ShieldUpdateNotify = 61;
			PlayerBattleStateChangeNotify PlayerBattleStateChangeNotify = 62;
			FsmCustomBlackboardNotify FsmCustomBlackboardNotify = 63;
			PassiveSkillAddNotify PassiveSkillAddNotify = 64;
			PassiveSkillRemoveNotify PassiveSkillRemoveNotify = 65;
			fZa fZa = 66;
	}


	message CombatContext {
		oneof kFs {
			FsmStateChangeContext FsmStateChangeContext = 1;
			SkillContext SkillContext = 2;
			MontageContext MontageContext = 3;
			AddBuffContext AddBuffContext = 4;
			BulletContext BulletContext = 5;
		}

	}


	message CombatRequestData {
		CombatCommon CombatCommon = 1;
		int32 RequestId = 2;
			CreateBulletRequest CreateBulletRequest = 3;
			DestroyBulletRequest DestroyBulletRequest = 4;
			DamageExecuteRequest DamageExecuteRequest = 5;
			ApplyGameplayEffectRequest ApplyGameplayEffectRequest = 6;
			RemoveGameplayEffectRequest RemoveGameplayEffectRequest = 7;
			HitRequest HitRequest = 8;
			HitEndRequest HitEndRequest = 9;
			SkillRequest SkillRequest = 10;
			UseSkillRequest UseSkillRequest = 11;
			EndSkillRequest EndSkillRequest = 12;
			PartUpdateRequest PartUpdateRequest = 13;
			MaterialRequest MaterialRequest = 14;
//			yJs yJs = 15;
			EntityIsVisibleRequest EntityIsVisibleRequest = 16;
			SwitchCharacterStateRequest SwitchCharacterStateRequest = 17;
			LogicStateInitRequest LogicStateInitRequest = 18;
			SwitchLogicStateRequest SwitchLogicStateRequest = 19;
			AnimationStateChangedRequest AnimationStateChangedRequest = 20;
			AnimationStateInitRequest AnimationStateInitRequest = 21;
			ModifyBulletParamsRequest ModifyBulletParamsRequest = 22;
			DrownRequest DrownRequest = 23;
			OrderApplyBuffRequest OrderApplyBuffRequest = 24;
			OrderRemoveBuffRequest OrderRemoveBuffRequest = 25;
			ActivateBuffRequest ActivateBuffRequest = 26;
			OrderRemoveBuffByTagsRequest OrderRemoveBuffByTagsRequest = 27;
			Ai.AiInformationRequest AiInformationRequest = 28;
			ToughCalcExtraRatioChangeRequest ToughCalcExtraRatioChangeRequest = 29;
			BattleStateChangeRequest BattleStateChangeRequest = 30;
			AnimationGameplayTagRequest AnimationGameplayTagRequest = 31;
			BoneVisibleChangeRequest BoneVisibleChangeRequest = 32;
			Ai.AiBlackboardsRequest AiBlackboardsRequest = 33;
			Ai.AiBlackboardCdRequest AiBlackboardCdRequest = 34;
			Ai.AiHateRequest AiHateRequest = 35;
			MonsterBoomRequest MonsterBoomRequest = 36;
			CaughtRequest CaughtRequest = 37;
			EntityStaticHookMoveRequest EntityStaticHookMoveRequest = 38;
			ChangeStateRequest ChangeStateRequest = 39;
			ChangeStateConfirmRequest ChangeStateConfirmRequest = 40;
			FsmConditionPassRequest FsmConditionPassRequest = 41;
			BuffStackCountRequest BuffStackCountRequest = 42;
			ANStartRequest ANStartRequest = 43;
			UseSkillFailRequest UseSkillFailRequest = 44;
			EnterViewDirectionRequest EnterViewDirectionRequest = 45;
			ExitViewDirectionRequest ExitViewDirectionRequest = 46;
			PassiveSkillAddRequest PassiveSkillAddRequest = 47;
			InterruptSkillInDelayRequest InterruptSkillInDelayRequest = 49;
			TriggerExitSkillRequest TriggerExitSkillRequest = 50;
			FormationBuffApplyRequest FormationBuffApplyRequest = 51;
			FormationBuffStackRequest FormationBuffStackRequest = 52;
			FormationBuffRemoveRequest FormationBuffRemoveRequest = 53;
			FormationBuffActivateRequest FormationBuffActivateRequest = 54;
			ActorVisibleRequest ActorVisibleRequest = 55;
			BuffEffectRequest BuffEffectRequest = 56;
			FragileChangeRequest FragileChangeRequest = 57;
			RTimeStopRequest RTimeStopRequest = 58;
			DrownEndTeleportRequest DrownEndTeleportRequest = 59;
			MonsterDrownRequest MonsterDrownRequest = 60;
			PassiveSkillRemoveRequest PassiveSkillRemoveRequest = 61;
//			R4n R4n = 62;
//			x4n x4n = 63;
//			P4n P4n = 64;
//			B4n B4n = 65;
			SwitchRoleRequest SwitchRoleRequest = 66;
//			n3a n3a = 67;
//			k8a k8a = 68;
			CombatMessage.CombatMaxCaseMessageRequest CombatMaxCaseMessageRequest = 99;
	}


	message CombatResponseData {
		CombatCommon CombatCommon = 1;
		int32 RequestId = 2;
		oneof kFs {
			CreateBulletResponse CreateBulletResponse = 3;
			DestroyBulletResponse DestroyBulletResponse = 4;
			DamageExecuteResponse DamageExecuteResponse = 5;
			ApplyGameplayEffectResponse ApplyGameplayEffectResponse = 6;
			RemoveGameplayEffectResponse RemoveGameplayEffectResponse = 7;
			HitResponse HitResponse = 8;
			HitEndResponse HitEndResponse = 9;
			SkillResponse SkillResponse = 10;
			UseSkillResponse UseSkillResponse = 11;
			EndSkillResponse EndSkillResponse = 12;
			PartUpdateResponse PartUpdateResponse = 13;
			MaterialResponse MaterialResponse = 14;
			IJs IJs = 15;
			EntityIsVisibleResponse EntityIsVisibleResponse = 16;
			SwitchCharacterStateResponse SwitchCharacterStateResponse = 17;
			LogicStateInitResponse LogicStateInitResponse = 18;
			SwitchLogicStateResponse SwitchLogicStateResponse = 19;
			AnimationStateChangedResponse AnimationStateChangedResponse = 20;
			AnimationStateInitResponse AnimationStateInitResponse = 21;
			ModifyBulletParamsResponse ModifyBulletParamsResponse = 22;
			DrownResponse DrownResponse = 23;
			OrderApplyBuffResponse OrderApplyBuffResponse = 24;
			OrderRemoveBuffResponse OrderRemoveBuffResponse = 25;
			ActivateBuffResponse ActivateBuffResponse = 26;
			OrderRemoveBuffByTagsResponse OrderRemoveBuffByTagsResponse = 27;
			Ai.AiInformationResponse AiInformationResponse = 28;
			ToughCalcExtraRatioChangeResponse ToughCalcExtraRatioChangeResponse = 29;
			BattleStateChangeResponse BattleStateChangeResponse = 30;
			AnimationGameplayTagResponse AnimationGameplayTagResponse = 31;
			BoneVisibleChangeResponse BoneVisibleChangeResponse = 32;
			Ai.AiBlackboardsResponse AiBlackboardsResponse = 33;
			Ai.AiBlackboardCdResponse AiBlackboardCdResponse = 34;
			Ai.AiHateResponse AiHateResponse = 35;
			MonsterBoomResponse MonsterBoomResponse = 36;
			CaughtResponse CaughtResponse = 37;
			EntityStaticHookMoveResponse EntityStaticHookMoveResponse = 38;
			ChangeStateResponse ChangeStateResponse = 39;
			ChangeStateConfirmResponse ChangeStateConfirmResponse = 40;
			FsmConditionPassResponse FsmConditionPassResponse = 41;
			BuffStackCountResponse BuffStackCountResponse = 42;
			ANStartResponse ANStartResponse = 43;
			UseSkillFailResponse UseSkillFailResponse = 44;
			EnterViewDirectionResponse EnterViewDirectionResponse = 45;
			ExitViewDirectionResponse ExitViewDirectionResponse = 46;
			PassiveSkillAddResponse PassiveSkillAddResponse = 47;
			InterruptSkillInDelayResponse InterruptSkillInDelayResponse = 49;
			TriggerExitSkillResponse TriggerExitSkillResponse = 50;
			FormationBuffApplyResponse FormationBuffApplyResponse = 51;
			FormationBuffStackResponse FormationBuffStackResponse = 52;
			FormationBuffRemoveResponse FormationBuffRemoveResponse = 53;
			FormationBuffActivateResponse FormationBuffActivateResponse = 54;
			ActorVisibleResponse ActorVisibleResponse = 55;
			BuffEffectResponse BuffEffectResponse = 56;
			FragileChangeResponse FragileChangeResponse = 57;
			RTimeStopResponse RTimeStopResponse = 58;
			DrownEndTeleportResponse DrownEndTeleportResponse = 59;
			MonsterDrownResponse MonsterDrownResponse = 60;
			PassiveSkillRemoveResponse PassiveSkillRemoveResponse = 61;
			kCs kCs = 62;
			Xfs Xfs = 63;
			Yfs Yfs = 64;
			Jfs Jfs = 65;
			SwitchRoleResponse SwitchRoleResponse = 66;
			uth uth = 67;
			cth cth = 68;
		}
	}


	message CombatSendData {
			CombatMessage.CombatMessageTest Push = 2;
			CombatMessage.CombatRequestData request = 3;
	}


	message CombatReceiveData {
			CombatMessage.CombatNotifyData CombatNotifyData = 2;
			CombatMessage.CombatResponseData CombatResponseData = 3;
	}


	// MessageId: 15879 (Request)
	message CombatSendPackRequest {
		repeated CombatSendData Data = 223;
	}


	// MessageId: 29383 (Response)
	message CombatSendPackResponse {
		ErrorCode ErrorCode = 218;
		CombatMessage.CombatReceivePackNotify ReceivePackNotify = 158;
	}


	// MessageId: 15830 (Notify)
	message CombatReceivePackNotify {
		repeated CombatReceiveData Data = 251;
	}


	// MessageId: 26452 (Request)
	message CombatMaxCaseMessageRequest {
	}


	// MessageId: 22995 (Response)
	message CombatMaxCaseMessageResponse {
	}


	// MessageId: 24130 (Request)
	message CombatMessagePrefixInfoRequest {
		string Flag = 181;
	}


	// MessageId: 17181 (Response)
	message CombatMessagePrefixInfoResponse {
		bytes PrefixInfo = 142;
	}


	// MessageId: 18767 (Request)
	message CombatMessagePostInfoRequest {
		bytes PostId = 183;
	}


	// MessageId: 26786 (Response)
	message CombatMessagePostInfoResponse {
		string PostInfo = 143;
	}


}

// MessageId: 29693 (Request)
message SceneItemStateRequest {
	int64 EntityId = 129;
	int32 OperateType = 145;
}

// MessageId: 16909 (Response)
message SceneItemStateResponse {
	ErrorCode ErrorCode = 54;
}

// MessageId: 21772 (Request)
message EntityLoadCompleteRequest {
	repeated int64 EntityIds = 169;
}

// MessageId: 24363 (Response)
message EntityLoadCompleteResponse {
}

// MessageId: 27935 (Notify)
message EntityLoadCompleteNotify {
	int32 PlayerId = 217;
	repeated int64 EntityIds = 238;
	repeated int64 EntityIdsUnload = 215;
}

// MessageId: 29796 (Request)
message MaterialRequest {
	MaterialInfo MaterialInfo = 38;
	CombatCommon CombatCommon = 139;
}

message MaterialInfo {
	int64 EntityId = 1;
	string AssetName = 2;
	bool IsGroup = 3;
}

// MessageId: 25886 (Response)
message MaterialResponse {
	ErrorCode ErrorCode = 139;
}

// MessageId: 29655 (Notify)
message MaterialNotify {
	MaterialInfo MaterialInfo = 237;
	CombatCommon CombatCommon = 211;
}

// MessageId: 25654 (Request)
message CommonOrganResetTimeRequest {
	int64 EntityId = 176;
}

// MessageId: 28766 (Response)
message CommonOrganResetTimeResponse {
	ErrorCode ErrorCode = 54;
	int64 EntityId = 127;
	int32 ResetTime = 245;
}

message Sta {
	int64 EntityId = 1;
	Vector Location = 2;
}

// MessageId: 29004 (Request)
message hta {
	repeated Sta uta = 241;
}

// MessageId: 23314 (Response)
message lta {
	ErrorCode ErrorCode = 239;
}

//message v0a {
//	int64 EntityId = 1;
//	Vector Location = 2;
//	float c0a = 3;
//	float d0a = 4;
//	float m0a = 5;
//	float C0a = 6;
//}

// MessageId: 29164 (Request)
//message l0a {
//	v0a g0a = 148;
//}

// MessageId: 19122 (Notify)
//message _0a {
//	v0a g0a = 19;
//}

// MessageId: 18814 (Response)
message u0a {
	ErrorCode ErrorCode = 159;
}

message DynamicEntityInformation {
	int64 Flag = 1;
	int32 EntityType = 2;
	int32 ConfigId = 3;
	int32 PlayerId = 4;
	int64 OwnerId = 5;
	MovementInformation MovementInformation = 6;
	repeated GameplayAttributeData GameAttributes = 7;
	bool InitAttribute = 8;
	bool IsVisible = 9;
	repeated int32 AnimationStates = 10;
	bool InitGameplayTag = 11;
	repeated GameplayTagData GameplayTags = 12;
	int32 Level = 13;
	repeated BlackboardParam BlackboardParams = 14;
	repeated string Tags = 15;
	repeated PrivateTag PrivateTags = 16;
	bool DeathStatus = 17;
	int32 HardnessModeId = 19;
	repeated PartInformation PartLifeInfos = 20;
	repeated VisionSkillInformation VisionSkillInfos = 21;
	repeated FightBuffInformation FightBuffInfos = 22;
	int32 CreatureGroup = 23;
	ListenInformation ListenInformation = 24;
	repeated SysBuffInformation SysBuffInfos = 25;
	int32 LivingStatus = 26;
	repeated int32 EntityCommonTags = 27;
	int32 WeaponConfId = 28;
	int32 DurabilityValue = 29;
	Vector InitLocation = 30;
	SummonInfo SummonInfo = 31;
	repeated EntityComponentPb ComponentPbs = 32;
}

// MessageId: 29879 (Notify)
message EntityLivingStatusNotify {
	int64 Flag = 23;
	int32 LivingStatus = 127;
	repeated DropVisionItemResult DropVisionItem = 255;
}

message DropVisionItemResult {
	int32 PlayerId = 1;
	bool Drop = 2;
}

message ListenInformation {
	repeated int32 Flag = 1;
	float Range = 2;
}

message ScenePlayerInformation {
	int32 PlayerId = 1;
	string PlayerName = 2;
	int32 PlayerIcon = 3;
	int32 Level = 4;
	string GuildName = 5;
	string GuildIntro = 6;
	Vector Location = 7;
	bool IsOffline = 8;
	int32 PlayerPrefix = 9;
	int32 PlayerGEIncHandle = 10;
	repeated FightRoleInfos FightRoleInfos = 11;
	repeated FormationBuff FormationBuffs = 12;
	Rotator Rotation = 13;
	int32 USs = 14;
	int32 CurRole = 15;
}

message FightRoleInformation {
	int32 roleId = 1;
	int64 EntityId = 2;
	bool IsControl = 5;
}

// MessageId: 26192 (Notify)
message UpdatePlayerAllFightRoleNotify {
	int32 PlayerId = 62;
	repeated FightRoleInformation FightRoleInfos = 12;
}

message PlayerFightRolesInfo {
	int32 PlayerId = 1;
	repeated FightRoleInformation vRs = 2;
	bool IsPhantom = 3;
	bool is_retain = 4;
}

// MessageId: 25939 (Notify)
message Ous {
	repeated PlayerFightRolesInfo SRs = 7;
}

// MessageId: 24082 (Notify)
message DOLLARgs {
	int32 PlayerId = 233;
	int32 USs = 190;
}

message yRs {
	int32 PlayerId = 1;
	repeated FightRoleInfos FightRoleInfos = 2;
	int32 Xih = 3;
}

message FightRoleInfo {
	int32 roleId = 1;
	int64 EntityId = 2;
}

message FightRoleInfos {
	int32 USs = 1;
	repeated FightRoleInfo FightRoleInfos = 2;
	int32 CurRole = 3;
	bool is_retain = 4;
	int32 LivingStatus = 5;
	bool M0a = 6;
}

enum Z7s {
	Z7s_GroupNone = 0;
	Z7s_Battle = 1;
	Z7s_hxs = 2;
	Z7s_Plot = 3;
}

// MessageId: 29192 (Notify)
message Hgs {
	repeated yRs yRs = 140;
}

// MessageId: 29098 (Notify)
message UpdatePlayerSingleFightRoleNotify {
	int32 PlayerId = 138;
	FightRoleInformation FightRoleInfo = 64;
}

// MessageId: 19999 (Notify)
message ChangePlayerFightRoleNotify {
	int32 PlayerId = 153;
	repeated FightRoleInformation FightRoleInfos = 242;
	bool IsPhantom = 233;
}

message SceneInformation {
	string SceneId = 1;
	int32 InstanceId = 2;
	int32 OwnerId = 3;
	repeated ScenePlayerInformation PlayerInfos = 4;
	repeated DynamicEntityInformation DynamicEntityList = 5;
	repeated BlackboardParam BlackboardParams = 6;
	int64 EndTime = 8;
	PlayerSceneAoiData AoiData = 11;
	repeated int64 OwnerFinishMingSuGens = 12;
	int32 Mode = 13;
	SceneTimeInfo TimeInfo = 14;
	repeated int32 HostFogIds = 15;
	repeated string LoadedSubLevels = 16;
	repeated SceneAreaState AreaStates = 17;
	int32 ResetPointEntityId = 18;
	repeated int32 DataLayers = 19;
	map<int32, int32> AreaMpc = 20;
	int64 CurContextId = 21;
	repeated dNs wSs = 23;
	int64 tla = 24;
}

message SceneAreaState {
	int32 AreaId = 1;
	bool State = 2;
}

// MessageId: 29646 (Notify)
message SceneAreaStateNotify {
	SceneAreaState AreaState = 115;
}

// MessageId: 16118 (Notify)
message HostTeleportUnlockNotify {
	int32 HostPlayerId = 217;
	int32 HostTeleportId = 157;
}

// MessageId: 20236 (Notify)
message HostFogIdUnlockNotify {
	int32 HostPlayerId = 218;
	int32 HostFogId = 203;
}

message SceneTimeInfo {
	int32 Hour = 1;
	int32 Minute = 2;
	int64 OwnerTimeClock_TimeSpan = 3;
}

// MessageId: 25031 (Notify)
message SyncSceneTimeNotify {
	SceneTimeInfo TimeInfo = 129;
}

enum SceneMode {
	SceneMode_Single = 0;
	SceneMode_Multi = 1;
}

// MessageId: 25077 (Notify)
message ChangeSceneModeNotify {
	string SceneId = 174;
	int32 Mode = 83;
}

// MessageId: 26032 (Notify)
message Bfs {
}

// MessageId: 26035 (Request)
message yfs {
}

// MessageId: 26118 (Response)
message Ifs {
	ErrorCode ErrorCode = 18;
}

// MessageId: 17460 (Notify)
message ScenePlayerOfflineNotify {
	int32 PlayerId = 225;
	bool IsOffline = 237;
	bool IsReLogin = 110;
}

// MessageId: 24102 (Notify)
message JoinSceneNotify {
	SceneInformation SceneInfo = 135;
	int64 MaxEntityId = 85;
	TransitionOptionPb TransitionOption = 40;
}

// MessageId: 15703 (Notify)
message jgs {
}

// MessageId: 23028 (Notify)
message OtherJoinSceneNotify {
	ScenePlayerInformation PlayerInfo = 215;
}

enum InstanceType {
	InstanceType_NoneInstance = 0;
	InstanceType_BigWorldInstance = 1;
	InstanceType_NormalInstance = 2;
	InstanceType_MirrorInstance = 3;
	InstanceType_TowerChallengeInstance = 4;
	InstanceType_CycleTowerChallenge = 5;
}

enum LeaveReason {
	LeaveReason_Initiative = 0;
	LeaveReason_BeKick = 1;
	LeaveReason_Dissolve = 2;
}

// MessageId: 22258 (Notify)
message LeaveSceneNotify {
	int32 PlayerId = 247;
	string SceneId = 203;
	TransitionOptionPb TransitionOption = 230;
}

message MovingEntityData {
	int64 EntityId = 1;
	int64 Originator = 2;
	repeated MoveReplaySample MoveInfos = 3;
}

// MessageId: 28450 (Push)
message MovePackagePush {
	repeated MovingEntityData MovingEntities = 115;
	int32 qZa = 19;
}

// MessageId: 19482 (Notify)
message MovePackageNotify {
	repeated MovingEntityData MovingEntities = 171;
}

// MessageId: 17865 (Push)
message zus {
	repeated MovingEntityData MovingEntities = 15;
	int32 qZa = 13;
}

// MessageId: 26301 (Notify)
message Zus {
	repeated MovingEntityData MovingEntities = 69;
}

// MessageId: 21915 (Push)
message EntitySimplyMoveInfoPackagePush {
	repeated EntitySimplyMoveInfo MoveInfos = 222;
}

message o4s {
	Vector LinearVelocity = 1;
	Vector Location = 2;
	Rotator Rotation = 3;
	float TimeStamp = 4;
}

// MessageId: 22496 (Push)
message tcs {
	CombatCommon CombatCommon = 128;
	repeated o4s MoveInfos = 238;
}

// MessageId: 16994 (Notify)
message ics {
	CombatCommon CombatCommon = 22;
	repeated o4s MoveInfos = 82;
}

// MessageId: 29856 (Notify)
message rcs {
	int64 Flag = 245;
	int32 PlayerId = 193;
}

// MessageId: 29641 (Request)
message ocs {
	int64 Flag = 237;
}

// MessageId: 16925 (Response)
message CaptureEntityResponse {
	int32 errCode = 68;
	int64 Flag = 136;
}

// MessageId: 19297 (Request)
message RemoveSummonEntityRequest {
	int64 SummonerId = 115;
	int32 SkillId = 235;
	int32 RemoveType = 32;
	repeated int64 RemoveEntityIds = 208;
}

// MessageId: 27745 (Response)
message acs {
	int32 errCode = 187;
}

// MessageId: 27750 (Request)
message ChangeEntityRoleRequest {
	int64 Flag = 138;
	int32 PlayerId = 151;
}

// MessageId: 22170 (Response)
message ChangeEntityRoleResponse {
	bool Success = 82;
	int64 Flag = 200;
	int32 PlayerId = 19;
}

// MessageId: 28238 (Request)
message EntityOnLandedRequest {
	int64 Flag = 118;
}

// MessageId: 29305 (Response)
message EntityOnLandedResponse {
}

// MessageId: 21298 (Notify)
message EntityOnLandedNotify {
	int64 Flag = 152;
}

// MessageId: 20138 (Request)
message AttributeInitRequest {
	int64 Flag = 189;
	repeated GameplayAttributeData IsStopCharacter = 119;
}

// MessageId: 26124 (Response)
message AttributeInitResponse {
	bool Success = 7;
	int64 Flag = 26;
}

// MessageId: 22003 (Notify)
message AttributeInitNotify {
	int64 Flag = 158;
	repeated GameplayAttributeData IsStopCharacter = 178;
}

// MessageId: 23407 (Request)
message AttributeChangedRequest {
	int64 Flag = 26;
	repeated GameplayAttributeData IsStopCharacter = 68;
}

// MessageId: 23144 (Response)
message AttributeChangedResponse {
	ErrorCode ErrorCode = 232;
}

// MessageId: 22198 (Notify)
message AttributeChangedNotify {
	int64 Flag = 53;
	repeated GameplayAttributeData IsStopCharacter = 116;
}

// MessageId: 17250 (Notify)
message MonsterLevelNotify {
	int64 Flag = 81;
	int32 Level = 137;
}

// MessageId: 15596 (Notify)
message MonsterLevelArrayNotify {
	repeated MonsterLevelNotify Monsters = 94;
}

// MessageId: 15466 (Notify)
message MonsterAttributeNotify {
	int64 Flag = 209;
	map<int32, int32> IsStopCharacter = 143;
}

// MessageId: 25682 (Notify)
message Scs {
	repeated MonsterAttributeNotify Monsters = 22;
}

// MessageId: 26617 (Request)
message AnimationStateInitRequest {
	CombatCommon CombatCommon = 105;
	int64 Flag = 87;
	repeated int32 States = 6;
	repeated int32 SpecialStates = 2;
}

// MessageId: 29126 (Response)
message AnimationStateInitResponse {
	ErrorCode ErrorCode = 236;
}

// MessageId: 23268 (Notify)
message AnimationStateInitNotify {
	CombatCommon CombatCommon = 3;
	int64 Flag = 54;
	repeated int32 States = 227;
	float TimeStamp = 45;
	repeated int32 SpecialStates = 167;
}

// MessageId: 22655 (Request)
message AnimationStateChangedRequest {
	CombatCommon CombatCommon = 147;
	int64 Flag = 216;
	repeated int32 States = 42;
	repeated int32 SpecialStates = 248;
}

// MessageId: 16764 (Response)
message AnimationStateChangedResponse {
	ErrorCode ErrorCode = 138;
}

// MessageId: 28168 (Notify)
message AnimationStateChangedNotify {
	CombatCommon CombatCommon = 52;
	int64 Flag = 177;
	repeated int32 States = 166;
	float TimeStamp = 129;
	repeated int32 SpecialStates = 183;
}

// MessageId: 26093 (Notify)
message GameplayTagInitNotify {
	int64 Flag = 20;
	repeated GameplayTagData Tags = 246;
}

// MessageId: 22076 (Notify)
message GameplayTagChangedNotify {
	int64 Flag = 114;
	repeated GameplayTagData Tags = 246;
}

// MessageId: 26763 (Notify)
message EntityCommonTagNotify {
	int64 Flag = 68;
	repeated CommonTagData Tags = 207;
}

// MessageId: 28451 (Notify)
message ChangeControlRoleNotify {
	int64 upId = 214;
	int64 downId = 105;
	int32 PlayerId = 104;
	bool NeedSetLocation = 83;
	Vector Location = 79;
}

message n4s {
	int64 EntityId = 1;
	bool Status = 2;
}

// MessageId: 20924 (Request)
message HardnessModeChangedRequest {
	int64 EntityId = 245;
	int32 HardnessModeId = 95;
}

// MessageId: 23422 (Response)
message HardnessModeChangedResponse {
	ErrorCode ErrorCode = 127;
}

// MessageId: 19693 (Notify)
message HardnessModeChangedNotify {
	int64 EntityId = 140;
	int32 HardnessModeId = 117;
}

message SummonRequestInfo {
	int64 SummonEntityId = 1;
	int32 SkillId = 2;
	int32 SummonConfigId = 3;
	Vector Pos = 4;
	Rotator Rot = 5;
	bool IsVisible = 6;
}

// MessageId: 20553 (Request)
message SummonRequest {
	int64 SummonerEntityId = 86;
	SummonRequestInfo SummonInfo = 112;
}

// MessageId: 28569 (Response)
message SummonResponse {
	ErrorCode ErrorCode = 2;
}

// MessageId: 15151 (Request)
message Summon2Request {
	int64 SummonerEntityId = 143;
	SummonRequestInfo SummonInfo = 154;
	int32 Version = 248;
}

// MessageId: 19298 (Response)
message Summon2Response {
	ErrorCode ErrorCode = 179;
	int32 Version = 239;
}

// MessageId: 15747 (Notify)
message SummonEntityNotify {
	int64 SummonerId = 50;
	repeated int64 SummonIds = 135;
}

// MessageId: 24124 (Notify)
message VisionSkillCallNotify {
	int32 PlayerId = 150;
	DynamicEntityInformation EntityInfo = 111;
}

message InstanceTimer {
	int32 Status = 1;
	int32 RemainTick = 2;
}

// MessageId: 25817 (Notify)
message InstanceTimerNotify {
	map<int32, InstanceTimer> InstanceTimers = 189;
}

// MessageId: 18614 (Notify)
message UpdateInstanceTimerNotify {
	map<int32, InstanceTimer> InstanceTimers = 31;
}

// MessageId: 18179 (Notify)
message RemoveInstanceTimerNotify {
	int32 TimerId = 43;
}

// MessageId: 20627 (Request)
message RemoveInstanceTimerRequest {
	int32 TimerId = 42;
}

// MessageId: 18309 (Response)
message RemoveInstanceTimerResponse {
	ErrorCode ErrorCode = 81;
	int32 TimerId = 78;
}

message l4s {
	int32 Status = 1;
	int32 RemainTick = 2;
}

message _4s {
	map<int32, l4s> rDs = 1;
}

message u4s {
	map<int32, l4s> rDs = 1;
}

message c4s {
	int32 TimerId = 1;
}

message d4s {
	int32 TimerId = 1;
}

message m4s {
	ErrorCode ErrorCode = 1;
	int32 TimerId = 2;
}

// MessageId: 18468 (Notify)
message UpdateInstanceOwnerInfoNotify {
	int64 Flag = 234;
	InstanceOwnerInfo InstanceOwnerInfo = 134;
}

// MessageId: 16178 (Notify)
message UpdateOwnerMingSuGenNotify {
	int64 Flag = 150;
}

// MessageId: 18682 (Notify)
message AddSysBuffNotify {
	int64 EntityId = 27;
	repeated SysBuffInformation BuffInfos = 93;
}

// MessageId: 21730 (Notify)
message UpdateSysBuffNotify {
	int64 EntityId = 83;
	repeated SysBuffInformation BuffInfos = 238;
}

// MessageId: 23036 (Notify)
message RemoveSysBuffNotify {
	int64 EntityId = 155;
	repeated int32 Ids = 91;
}

// MessageId: 24397 (Push)
message ChangeSceneClockPush {
	int32 Hour = 49;
	int32 Minute = 214;
	bool sDs = 46;
}

enum SceneDateUpdateReason {
	SceneDateUpdateReason_TimeFlowAuto = 0;
	SceneDateUpdateReason_LevelPlayAuto = 1;
	SceneDateUpdateReason_PlayerOperate = 2;
}

// MessageId: 21495 (Request)
message UpdateSceneDateRequest {
	uint32 AddDays = 202;
	int32 Hour = 81;
	int32 Minute = 167;
	int32 Reason = 32;
}

// MessageId: 16028 (Response)
message UpdateSceneDateResponse {
	ErrorCode ErrorCode = 55;
	uint32 CurrDate = 25;
}

// MessageId: 21043 (Notify)
message SceneDateNotify {
	uint32 CurrDate = 218;
}

// MessageId: 29346 (Push)
message HoldWeaponPush {
	int64 EntityId = 241;
	int64 WeaponEntityId = 128;
}

// MessageId: 25653 (Push)
message DiscardWeaponPush {
	int64 EntityId = 255;
	MovementInformation MovementInformation = 142;
}

// MessageId: 25591 (Request)
message DiscardWeaponRequest {
	int64 EntityId = 167;
	MovementInformation MovementInformation = 96;
}

// MessageId: 23974 (Response)
message DiscardWeaponResponse {
	bool DiscardSucc = 58;
}

// MessageId: 29224 (Notify)
message HoldWeaponNotify {
	int64 EntityId = 245;
	int32 WeaponConfId = 107;
}

// MessageId: 23744 (Request)
message CreatStoryCharacterRequest {
}

// MessageId: 19070 (Response)
message CreatStoryCharacterResponse {
	ErrorCode ErrorCode = 124;
	int64 EntityId = 245;
}

// MessageId: 26841 (Request)
message DeleteStoryCharacterRequest {
}

// MessageId: 28092 (Response)
message DeleteStoryCharacterResponse {
	ErrorCode ErrorCode = 173;
	int32 FightRoleId = 137;
}

// MessageId: 19148 (Notify)
message EnterAoiNotify {
	repeated DynamicEntityInformation EntityInfos = 106;
}

// MessageId: 16936 (Notify)
message AddEntityAoiNotify {
	repeated DynamicEntityInformation EntityInfos = 55;
}

// MessageId: 26251 (Notify)
message LeaveAoiNotify {
	repeated int64 EntityIds = 102;
}

// MessageId: 15860 (Notify)
message RemoveEntityAoiNotify {
	repeated EntityRemoveInfo RemoveInfos = 190;
}

// MessageId: 22993 (Notify)
message PlayerAoiRangeNotify {
	int32 MinX = 200;
	int32 MaxX = 186;
	int32 MinY = 158;
	int32 MaxY = 131;
}

message PlayerSceneAoiData {
	repeated DynamicEntityInformation DynamicEntityList = 1;
	repeated int64 GenIds = 2;
	repeated EntityPb Entities = 3;
}

message SceneGamePlayInfo {
	int32 GamePlayId = 1;
	bool IsFirst = 2;
	int32 Status = 3;
	uint32 OpenTime = 4;
}

// MessageId: 18214 (Notify)
message SceneGamePlayInfoNotify {
	repeated SceneGamePlayInfo GamePlayInfo = 168;
}

// MessageId: 25509 (Notify)
message SceneGamePlayFirstNotify {
	int32 GamePlayId = 16;
}

// MessageId: 26282 (Notify)
message SceneGamePlayStatusNotify {
	int32 GamePlayId = 135;
	int32 Status = 60;
}

// MessageId: 26792 (Notify)
message SceneGamePlayScopeNotify {
	int32 GamePlayId = 56;
	bool IsEnter = 217;
}

// MessageId: 20825 (Notify)
message SceneGamePlayOpenTimeNotify {
	int32 GamePlayId = 48;
	uint32 OpenTime = 151;
}

// MessageId: 22623 (Request)
message CreatureDetailRequest {
	int64 Flag = 34;
}

// MessageId: 24620 (Response)
message CreatureDetailResponse {
	ErrorCode ErrorCode = 98;
	int64 Flag = 13;
	int32 CurCount = 76;
	int64 NextRefreshTime = 244;
	int32 ConfigIndex = 136;
	int32 AreaIndex = 211;
	int32 ExistCount = 65;
	bool ConditionSatisfy = 108;
	repeated DynamicEntityInformation AliveEntities = 56;
}

// MessageId: 18486 (Notify)
message ResetLocationForZRangeNotify {
	int64 EntityId = 108;
	Vector ResetLocation = 211;
	Rotator Rotation = 14;
	bool NotifyRot = 25;
	bool ChangeInitPos = 155;
}

// MessageId: 19137 (Request)
message ChangeEntityStateRequest {
	int32 EntityId = 187;
	int32 StateTagId = 12;
}

// MessageId: 24339 (Response)
message ChangeEntityStateResponse {
	ErrorCode ErrorCode = 104;
}

// MessageId: 15277 (Request)
message FoundationRequest {
	int64 EntityId = 33;
	int64 AccusedEntityId = 40;
	int32 ActiveOperate = 79;
	Vector Pos = 204;
	Rotator Rot = 10;
}

// MessageId: 26305 (Response)
message FoundationResponse {
	ErrorCode ErrorCode = 178;
	int32 ActiveOperate = 66;
}

// MessageId: 16044 (Notify)
message BeControlledPosInFoundationNotify {
	int64 FoundationEntityId = 61;
	int64 BeControlledEntityId = 130;
	int32 InstId = 109;
	int32 BIs = 244;
}

// MessageId: 17348 (Request)
message BeControlledRequest {
	int64 EntityId = 3;
	bool IsControl = 65;
}

// MessageId: 22034 (Response)
message BeControlledResponse {
	ErrorCode ErrorCode = 179;
}

// MessageId: 18587 (Notify)
message BeControlledNotify {
	int64 EntityId = 127;
	int64 RoleEntityId = 232;
	bool NeedReset = 3;
}

// MessageId: 24100 (Request)
message BeControlledShowRequest {
	int64 EntityId = 139;
	bool IsShow = 213;
}

// MessageId: 21656 (Response)
message BeControlledShowResponse {
	ErrorCode ErrorCode = 42;
}

// MessageId: 24571 (Notify)
message BeControlledShowNotify {
	int64 EntityId = 132;
	int64 RoleEntityId = 1;
	bool IsShow = 223;
}

enum TeleControlThrowWay {
	TeleControlThrowWay_ThrowCreateBullet = 0;
	TeleControlThrowWay_ThrowLetGo = 1;
	TeleControlThrowWay_ThrowThrow = 2;
}

// MessageId: 20527 (Request)
message BeControlledThrowRequest {
	int64 EntityId = 253;
	int32 ThrowType = 101;
}

// MessageId: 22800 (Response)
message BeControlledThrowResponse {
	ErrorCode ErrorCode = 170;
}

// MessageId: 23259 (Notify)
message RelationIdNotify {
	int32 MapId = 252;
	int32 RelationId = 111;
	int32 IstId = 23;
	int32 BIs = 67;
}

message SummonInfo {
	int32 SummonCfgId = 1;
	int64 SummonerId = 2;
	int32 SummonSkillId = 3;
}

// MessageId: 25095 (Notify)
message EntityPosResetNotify {
	int32 EntityId = 165;
}

enum ODs {
	ODs_InActive = 0;
	ODs_Active = 1;
}

// MessageId: 23498 (Request)
message Bds {
	int32 GDs = 95;
	int32 ODs = 112;
}

// MessageId: 18170 (Response)
message qds {
	ErrorCode ErrorCode = 162;
}

// MessageId: 16084 (Notify)
message Gds {
	int32 pjn = 53;
	bool kDs = 151;
}

// MessageId: 29155 (Request)
message Ods {
	int32 pjn = 37;
}

// MessageId: 18110 (Response)
message kds {
	ErrorCode ErrorCode = 10;
	int32 pjn = 244;
}

// MessageId: 20847 (Request)
message Nds {
	int64 EntityId = 24;
}

// MessageId: 26625 (Response)
message Fds {
	ErrorCode ErrorCode = 127;
}

// MessageId: 15343 (Request)
message Vds {
	int64 EntityId = 139;
}

// MessageId: 24406 (Response)
message DOLLARds {
	ErrorCode ErrorCode = 185;
}

// MessageId: 25807 (Notify)
message bFn {
	int64 NDs = 142;
}

// MessageId: 23999 (Request)
message Hds {
	int32 InstId = 23;
	int32 PosEntityId = 115;
}

// MessageId: 17428 (Response)
message jds {
	ErrorCode ErrorCode = 68;
}

// MessageId: 24207 (Request)
message DrownRequest {
}

// MessageId: 15704 (Response)
message DrownResponse {
	ErrorCode ErrorCode = 107;
}

// MessageId: 28543 (Notify)
message DrownNotify {
}

// MessageId: 23856 (Request)
message DrownEndTeleportRequest {
}

// MessageId: 15415 (Response)
message DrownEndTeleportResponse {
	ErrorCode ErrorCode = 141;
}

// MessageId: 28147 (Request)
message MonsterDrownRequest {
	Vector Pos = 203;
}

// MessageId: 19143 (Response)
message MonsterDrownResponse {
	ErrorCode ErrorCode = 65;
}

// MessageId: 27866 (Notify)
message EnableNearbyTrackingNotify {
	repeated int64 EntityIds = 42;
	bool IsEnable = 221;
}

// MessageId: 20405 (Notify)
message Yds {
	repeated string FDs = 125;
	repeated string VDs = 128;
	int32 DOLLARDs = 53;
}

// MessageId: 29812 (Notify)
message Jds {
	repeated string HDs = 51;
}

// MessageId: 21549 (Request)
message SceneLoadingFinishRequest {
	string SceneId = 62;
}

// MessageId: 21003 (Response)
message SceneLoadingFinishResponse {
	ErrorCode ErrorCode = 17;
}

// MessageId: 29127 (Notify)
message ems {
}

// MessageId: 18406 (Notify)
message tms {
	int32 PlayerId = 215;
}

// MessageId: 21313 (Notify)
message ims {
	int32 ResetPointEntityId = 79;
}

// MessageId: 22679 (Request)
message SitChairRequest {
	int64 EntityId = 101;
	bool IsSitDown = 132;
	CombatCommon Data = 191;
	AnimationStateChangedRequest request = 44;
}

// MessageId: 20125 (Response)
message oms {
	ErrorCode ErrorCode = 196;
}

// MessageId: 25478 (Request)
message nms {
	int64 EntityId = 254;
}

// MessageId: 21773 (Response)
message sms {
	ErrorCode ErrorCode = 10;
}

// MessageId: 17113 (Notify)
message SceneTestNotify {
	ErrorCode ErrorCode = 138;
	string ErrorMsg = 91;
	int32 PlayerId = 70;
}

// MessageId: 19162 (Notify)
message SceneChangeDataLayerNotify {
	repeated int32 LoadDataLayers = 178;
	repeated int32 UnloadDataLayers = 141;
	int32 EntityId = 92;
}

// MessageId: 28079 (Request)
message lms {
	int32 InstId = 71;
}

// MessageId: 27261 (Response)
message _ms {
	ErrorCode ErrorCode = 123;
}

// MessageId: 23739 (Request)
message ums {
	int64 EntityId = 16;
	int64 cKn = 130;
}

// MessageId: 19336 (Response)
message cms {
	ErrorCode ErrorCode = 58;
}

// MessageId: 27520 (Request)
message dms {
	int64 EntityId = 223;
}

// MessageId: 27688 (Response)
message mms {
	ErrorCode ErrorCode = 193;
}

// MessageId: 26327 (Request)
message Wgs {
	int64 EntityId = 203;
}

// MessageId: 24019 (Response)
message Kgs {
	ErrorCode ErrorCode = 74;
}

// MessageId: 16295 (Request)
message Gfs {
	int64 EntityId = 208;
	bool IsControl = 36;
}

// MessageId: 28457 (Response)
message Ofs {
	ErrorCode ErrorCode = 133;
}

// MessageId: 16386 (Notify)
message kfs {
	int64 EntityId = 198;
	int32 wIs = 162;
}

message eoh {
	int64 TargetId = 1;
	repeated int64 DOLLARHa = 2;
}

message gDOLLARs {
	int64 dDOLLARs = 1;
	repeated eoh KHa = 2;
	bool CDOLLARs = 3;
}

// MessageId: 24239 (Request)
message aDOLLARs {
	gDOLLARs gDOLLARs = 182;
}

// MessageId: 21324 (Response)
message hDOLLARs {
	ErrorCode ErrorCode = 71;
}

// MessageId: 20130 (Notify)
message lDOLLARs {
	repeated gDOLLARs fDOLLARs = 135;
}

// MessageId: 27482 (Request)
message _DOLLARs {
	int64 EntityId = 141;
}

// MessageId: 19547 (Response)
message uDOLLARs {
	ErrorCode ErrorCode = 237;
}

// MessageId: 16070 (Request)
message Jha {
	int64 EntityId = 239;
	bool ila = 44;
	int32 BulletId = 127;
}

// MessageId: 26066 (Response)
message zha {
	ErrorCode ErrorCode = 64;
}

// MessageId: 18590 (Request)
message Veh {
	int64 EntityId = 40;
}

// MessageId: 24971 (Response)
message Heh {
	ErrorCode ErrorCode = 145;
}

// MessageId: 15619 (Notify)
message ath {
	int64 EntityId = 195;
	int64 Yih = 241;
}

// MessageId: 16180 (Request)
message bth {
	int64 EntityId = 227;
	bool IsEnter = 71;
}

// MessageId: 23119 (Response)
message Bth {
	ErrorCode ErrorCode = 139;
}

message a4s {
	int32 IsTrace = 1;
	int32 PlayerId = 2;
	Vector Location = 3;
}

// MessageId: 29021 (Notify)
message Gth {
	repeated a4s zih = 209;
}

enum EEntityFsmChangeType {
	EEntityFsmChangeType_Enter = 0;
	EEntityFsmChangeType_Exit = 1;
	EEntityFsmChangeType_BindStart = 3;
	EEntityFsmChangeType_BindEnd = 4;
	EEntityFsmChangeType_Task = 5;
}

enum EBulletCreateSource {
	EBulletCreateSource_NormalSource = 0;
	EBulletCreateSource_ReboundSource = 1;
}

message FsmStateChangeContext {
	int32 FsmId = 1;
	int32 State = 2;
	int32 ChangeType = 3;
	int32 index = 4;
	int64 constate_id = 5;
}

message SkillContext {
	int32 SkillId = 1;
	int64 constate_id = 2;
}

message MontageContext {
	int32 SkillId = 1;
	int32 MontageIndex = 2;
	int64 constate_id = 3;
}

message AddBuffContext {
	int32 BuffHandle = 1;
	int64 constate_id = 2;
}

message BulletContext {
	ActiveBulletHandle Handle = 1;
	int64 constate_id = 2;
}

message HitInformation {
	int64 Originator = 1;
	int64 Flag = 2;
	int64 TargetId = 3;
	int64 BulletId = 4;
	bool HasBeHitData = 5;
	Vector HitEffectPos = 6;
	Rotator HitEffectRotate = 7;
	bool IsShake = 8;
	Vector HitPos = 9;
	bool EnterFk = 10;
	bool IsHitWeakness = 11;
	bool IsTriggerCounterattack = 12;
	Rotator VictimRotation = 13;
	bool IsChangeVictimRotation = 14;
	string HitPart = 15;
	bool IsTriggerVisionCounterAttack = 16;
	int32 SkillId = 17;
	int32 FightState = 18;
	int32 BeHitAnim = 19;
	int32 Source = 20;
}

message SkillNodeInfo {
	int32 SubProtocol = 1;
	int32 MontageIndex = 2;
	float SpeedRatio = 3;
	int32 SkillSingleId = 4;
	int32 SkillIndex = 5;
	string StartSection = 6;
	float StartTimeSeconds = 7;
}

// MessageId: 16699 (Request)
message SkillRequest {
	UseSkillInformation UseSkillInfo = 185;
	SkillNodeInfo SkillNodeInfos = 118;
}

// MessageId: 24504 (Response)
message SkillResponse {
	ErrorCode ErrorCode = 163;
}

// MessageId: 22979 (Notify)
message SkillNotify {
	UseSkillInformation UseSkillInfo = 64;
	SkillNodeInfo SkillNodeInfos = 186;
}

// MessageId: 16263 (Request)
message UseSkillRequest {
	CombatCommon CombatCommon = 123;
	UseSkillInformation UseSkillInfo = 112;
	int32 SkillSingleId = 108;
}

// MessageId: 29283 (Response)
message UseSkillResponse {
	UseSkillInformation UseSkillInfo = 162;
	int32 SkillSingleId = 164;
	ErrorCode ErrorCode = 98;
}

// MessageId: 29523 (Notify)
message UseSkillNotify {
	CombatCommon CombatCommon = 216;
	UseSkillInformation UseSkillInfo = 120;
	int32 SkillSingleId = 115;
}

// MessageId: 16901 (Request)
message EndSkillRequest {
	CombatCommon CombatCommon = 216;
	UseSkillInformation UseSkillInfo = 201;
	int32 SkillSingleId = 110;
}

// MessageId: 23256 (Response)
message EndSkillResponse {
	UseSkillInformation UseSkillInfo = 214;
	int32 SkillSingleId = 131;
}

// MessageId: 27859 (Notify)
message EndSkillNotify {
	CombatCommon CombatCommon = 219;
	UseSkillInformation UseSkillInfo = 82;
	int32 SkillSingleId = 251;
}

// MessageId: 20002 (Request)
message InterruptSkillInDelayRequest {
	int32 SkillId = 163;
}

// MessageId: 22765 (Response)
message InterruptSkillInDelayResponse {
	int32 SkillId = 144;
}

// MessageId: 19436 (Request)
message UseSkillFailRequest {
	int32 SkillId = 178;
}

// MessageId: 22312 (Response)
message UseSkillFailResponse {
	int32 SkillId = 208;
	DErrorResult Error = 88;
}

// MessageId: 26643 (Request)
message HitRequest {
	CombatCommon CombatCommon = 146;
	HitInformation HitInfo = 245;
}

// MessageId: 27334 (Response)
message HitResponse {
	HitInformation HitInfo = 155;
	ErrorCode ErrorCode = 95;
}

// MessageId: 20716 (Notify)
message HitNotify {
	CombatCommon CombatCommon = 254;
	HitInformation HitInfo = 229;
}

// MessageId: 29578 (Request)
message HitEndRequest {
	CombatCommon CombatCommon = 96;
	int64 TargetId = 25;
}

// MessageId: 24721 (Response)
message HitEndResponse {
	ErrorCode ErrorCode = 134;
}

message CaughtInfo {
	int64 Attacker = 1;
	int64 CaughtInfoId = 2;
	bool IsEnd = 3;
	int32 FightState = 4;
}

// MessageId: 23451 (Request)
message CaughtRequest {
	CaughtInfo Info = 103;
}

// MessageId: 23490 (Response)
message CaughtResponse {
	ErrorCode ErrorCode = 49;
}

// MessageId: 18025 (Notify)
message CaughtNotify {
	CaughtInfo Info = 184;
}

message ActiveBulletHandle {
	int32 PlayerId = 1;
	int32 HandleId = 2;
}

// MessageId: 24919 (Request)
message CreateBulletRequest {
	CombatCommon CombatCommon = 26;
	ActiveBulletHandle Handle = 72;
	int64 OwnerEntityId = 154;
	int64 BulletId = 131;
	int32 SkillId = 232;
	Vector Location = 89;
	Rotator Rotation = 173;
	int64 TargetId = 137;
	int64 SpawnEntityId = 85;
	int64 SpawnVelocityEntityId = 194;
	bool IsLocal = 95;
	int32 Tjn = 97;
	Vector Ljn = 130;
	Vector Djn = 233;
	oneof R4s {
		ActiveBulletHandle ParentHandle = 175;
	}
}

// MessageId: 17496 (Response)
message CreateBulletResponse {
	ErrorCode ErrorCode = 60;
}

// MessageId: 23181 (Notify)
message CreateBulletNotify {
	CombatCommon CombatCommon = 169;
	ActiveBulletHandle Handle = 160;
	int64 OwnerEntityId = 52;
	int64 BulletId = 195;
	int32 SkillId = 6;
	Vector Location = 248;
	Rotator Rotation = 33;
	ActiveBulletHandle ParentHandle = 89;
	int64 TargetId = 84;
	int64 SpawnEntityId = 38;
	int64 SpawnVelocityEntityId = 133;
	Vector LocationEntityId = 151;
	int32 Tjn = 227;
	Vector M8n = 206;
	Vector Ljn = 131;
	Vector Djn = 5;
	oneof D4s {
		int64 rAs = 136;
	}
}

// MessageId: 20656 (Request)
message DestroyBulletRequest {
	CombatCommon CombatCommon = 154;
	ActiveBulletHandle Handle = 35;
}

// MessageId: 17864 (Response)
message DestroyBulletResponse {
	ErrorCode ErrorCode = 200;
}

// MessageId: 20961 (Notify)
message DestroyBulletNotify {
	CombatCommon CombatCommon = 252;
	ActiveBulletHandle Handle = 113;
	bool IsCreateSubBullet = 63;
}

message ModifyBulletParams {
	CombatCommon CombatCommon = 1;
	ActiveBulletHandle Handle = 2;
	int64 TargetId = 3;
}

// MessageId: 21995 (Request)
message ModifyBulletParamsRequest {
	ModifyBulletParams ModifyBulletParams = 103;
}

// MessageId: 15486 (Response)
message ModifyBulletParamsResponse {
	ErrorCode ErrorCode = 168;
}

// MessageId: 21104 (Notify)
message ModifyBulletParamsNotify {
	ModifyBulletParams ModifyBulletParams = 241;
}

enum DamageSourceType {
	DamageSourceType_FromBullet = 0;
	DamageSourceType_FromEffect = 1;
}

message DamageContext {
	int32 SourceType = 1;
	int64 BulletId = 2;
	repeated int32 BulletTags = 3;
	oneof U4s {
		int32 SkillId = 4;
	}
}

// MessageId: 22663 (Request)
message DamageExecuteRequest {
	int64 DamageId = 127;
	int32 SkillLevel = 28;
	int64 AttackerEntityId = 186;
	int64 TargetEntityId = 76;
	bool IsAddEnergy = 68;
	bool IsCounterAttack = 183;
	bool ForceCritical = 121;
	bool IsBlocked = 141;
	int32 PartId = 238;
	int64 CounterSkillMessageId = 5;
	DamageContext DamageContext = 86;
	int32 RandomSeed = 129;
}

// MessageId: 26359 (Response)
message DamageExecuteResponse {
	ErrorCode ErrorCode = 137;
	int64 AttackerEntityId = 11;
	int64 TargetEntityId = 244;
	int32 Damage = 254;
	int32 PartId = 42;
	bool IsCrit = 2;
	bool KilledTarget = 20;
	int32 ShieldCoverDamage = 231;
	int32 ImmuneType = 17;
}

// MessageId: 20444 (Notify)
message DamageExecuteNotify {
	int64 DamageId = 137;
	int64 AttackerEntityId = 172;
	int64 TargetEntityId = 248;
	int32 Damage = 204;
	int32 PartId = 64;
	bool IsCrit = 46;
	bool KilledTarget = 250;
	int32 ShieldCoverDamage = 100;
	int32 SkillLevel = 95;
	DamageContext DamageContext = 106;
	int32 ImmuneType = 37;
}

// MessageId: 24321 (Request)
message PassiveSkillAddRequest {
	int64 PassiveSkillId = 20;
	int64 TargetEntityId = 43;
}

// MessageId: 25611 (Response)
message PassiveSkillAddResponse {
	ErrorCode ErrorCode = 25;
}

// MessageId: 29986 (Request)
message PassiveSkillRemoveRequest {
	int64 PassiveSkillId = 31;
	int64 TargetEntityId = 228;
}

// MessageId: 25033 (Response)
message PassiveSkillRemoveResponse {
	ErrorCode ErrorCode = 12;
}

// MessageId: 22579 (Notify)
message PassiveSkillAddNotify {
	int64 EntityId = 131;
	repeated PassiveSkillItemPb PassiveSkillItemPbList = 28;
}

// MessageId: 26537 (Notify)
message PassiveSkillRemoveNotify {
	int64 EntityId = 159;
	repeated int64 SkillIdList = 86;
}

// MessageId: 25272 (Request)
message EnterViewDirectionRequest {
}

// MessageId: 20686 (Response)
message EnterViewDirectionResponse {
}

// MessageId: 20630 (Request)
message ExitViewDirectionRequest {
}

// MessageId: 28791 (Response)
message ExitViewDirectionResponse {
}

// MessageId: 16288 (Request)
message TriggerExitSkillRequest {
	int64 EnterEntityId = 43;
	int64 LeaveEntityId = 215;
}

// MessageId: 25556 (Response)
message TriggerExitSkillResponse {
}

message MonsterInfo {
	int32 MonsterId = 1;
	int32 Num = 2;
	int64 gen_id = 3;
}

enum BattleResult {
	BattleResult_AllKill = 0;
	BattleResult_Death = 1;
	BattleResult_Run = 2;
	BattleResult_aEs = 3;
}

enum MonsterResult {
	MonsterResult_MonsterResultDeath = 0;
	MonsterResult_MonsterResultRun = 1;
}

// MessageId: 18541 (Push)
message Cis {
	int32 roleId = 101;
	int32 Result = 80;
}

// MessageId: 28345 (Request)
message gis {
	int32 roleId = 197;
	int32 Result = 238;
}

// MessageId: 22404 (Response)
message fis {
}

message SkillReport {
	int32 SkillId = 1;
	int32 use_count = 2;
	int32 hit_count = 3;
	int32 expect_hit_count = 4;
	int32 real_hit_count = 5;
	int64 Damage = 6;
}

// MessageId: 27270 (Push)
message InstFightEndPush {
	int32 InstId = 149;
	string FightId = 101;
	int32 CostTime = 131;
	int64 AccDamage = 233;
	int64 AccShieldDamage = 204;
	int64 AccSelfDamage = 171;
	int64 AccSkillHeal = 146;
	int64 AccItemHeal = 175;
	int32 StopTimes = 216;
	int32 DamageMax = 39;
	int32 ComboMax = 147;
	int32 AccDodgaTimes = 8;
	int32 DodgeSuccTimes = 36;
}

enum B4s {
	B4s_nAs = 0;
	B4s_GameplayEffect = 1;
	B4s_PAs = 2;
}

// MessageId: 23699 (Request)
message SwitchBattleModeRequest {
	bool Client = 156;
	int32 ClientControllerModule = 14;
}

// MessageId: 22879 (Response)
message SwitchBattleModeResponse {
	bool Client = 195;
}

// MessageId: 20871 (Notify)
message SwitchBattleModeNotify {
	repeated int32 ServerControllerModules = 109;
	repeated int32 ClientControllerModules = 195;
}

// MessageId: 18947 (Notify)
message BattleLogNotify {
	string Log = 149;
}

// MessageId: 22367 (Request)
message LandingDamageRequest {
	int64 EntityId = 100;
	float SpeedZ = 205;
	int32 TimeExceeding = 109;
}

// MessageId: 15155 (Response)
message LandingDamageResponse {
	ErrorCode ErrorCode = 54;
}

// MessageId: 18228 (Request)
message EntityIsVisibleRequest {
	int64 Flag = 15;
	bool IsVisible = 173;
	CombatCommon CombatCommon = 2;
}

// MessageId: 17003 (Response)
message EntityIsVisibleResponse {
	ErrorCode ErrorCode = 172;
}

// MessageId: 27843 (Notify)
message EntityIsVisibleNotify {
	int64 Flag = 167;
	bool IsVisible = 254;
	CombatCommon CombatCommon = 74;
}

// MessageId: 18880 (Request)
message ActorVisibleRequest {
	int64 Flag = 211;
	bool IsActorVisible = 185;
}

// MessageId: 15763 (Response)
message ActorVisibleResponse {
	ErrorCode ErrorCode = 81;
}

// MessageId: 15034 (Notify)
message ActorVisibleNotify {
	int64 Flag = 141;
	bool IsActorVisible = 8;
}

// MessageId: 25065 (Request)
message SwitchCharacterStateRequest {
	CombatCommon CombatCommon = 237;
	int64 Flag = 112;
	int32 OldState = 162;
	int32 NewState = 10;
}

// MessageId: 17763 (Response)
message SwitchCharacterStateResponse {
}

// MessageId: 16861 (Notify)
message SwitchCharacterStateNotify {
	CombatCommon CombatCommon = 93;
	int64 Flag = 198;
	int32 OldState = 20;
	int32 NewState = 233;
}

// MessageId: 16499 (Request)
message BattleStateChangeRequest {
	int64 EntityId = 210;
	bool InBattle = 143;
}

// MessageId: 20586 (Response)
message BattleStateChangeResponse {
	ErrorCode ErrorCode = 32;
}

// MessageId: 26828 (Notify)
message BattleStateChangeNotify {
	int64 EntityId = 1;
	bool InBattle = 36;
}

// MessageId: 21500 (Request)
message ToughCalcExtraRatioChangeRequest {
	int64 Flag = 2;
	int32 Duration = 105;
}

// MessageId: 29480 (Response)
message ToughCalcExtraRatioChangeResponse {
	ErrorCode ErrorCode = 143;
}

// MessageId: 16481 (Request)
message MonsterBoomRequest {
	int32 Delay = 142;
}

// MessageId: 27266 (Response)
message MonsterBoomResponse {
	ErrorCode ErrorCode = 62;
}

message EntityBattleTagInfo {
	int32 TagId = 1;
	int32 count = 2;
}

// MessageId: 22636 (Request)
message EntityBattleInfoRequest {
	int64 EntityId = 186;
}

// MessageId: 26563 (Response)
message EntityBattleInfoResponse {
	int64 EntityId = 42;
	ErrorCode ErrorCode = 246;
	FightBuffComponentPb FightBuffComponentPb = 210;
	repeated EntityBattleTagInfo EntityBattleTagInfo = 170;
	repeated GameplayAttributeData IsStopCharacter = 176;
	repeated FormationAttr FormationAttrs = 195;
	repeated FormationBuff FormationBuffs = 43;
	PartComponentPb PartComponentPb = 125;
	repeated Ai.AiHateEntity HateList = 164;
	ShieldComponentPb ShieldComponentPb = 75;
	repeated EntityBattleTagInfo PlayerTagInfos = 224;
}

// MessageId: 23977 (Request)
message MontagePlayRequest {
	int32 MontageIndex = 23;
}

// MessageId: 25414 (Response)
message MontagePlayResponse {
	int32 SkillId = 129;
	int32 MontageIndex = 169;
	DErrorResult Error = 85;
}

// MessageId: 29366 (Notify)
message MontagePlayNotify {
	int32 SkillId = 10;
	int32 MontageIndex = 180;
}

// MessageId: 16341 (Request)
message ANStartRequest {
	int32 SkillId = 172;
	int32 MontageIndex = 202;
	int32 AnIndex = 93;
}

// MessageId: 27455 (Response)
message ANStartResponse {
	int32 SkillId = 143;
	int32 MontageIndex = 88;
	int32 AnIndex = 4;
	DErrorResult Error = 232;
}

// MessageId: 19584 (Notify)
message ANStartNotify {
	int32 SkillId = 88;
	int32 MontageIndex = 229;
	int32 AnIndex = 58;
}

enum EDamageImmune {
	EDamageImmune_EDamageImmune_Default = 0;
	EDamageImmune_EDamageImmune_Invincible = 1;
	EDamageImmune_EDamageImmune_BuffEffectElement = 2;
}

message CharacterBattleStateInfo {
	int64 EntityId = 1;
	bool InBattle = 2;
}

// MessageId: 18146 (Notify)
message Oth {
	int64 Flag = 219;
}

// MessageId: 16203 (Notify)
message CharacterBattleStateChangeNotify {
	repeated CharacterBattleStateInfo CharacterBattleStateInfo = 94;
}

// MessageId: 16162 (Notify)
message PlayerBattleStateChangeNotify {
	int32 PlayerId = 91;
	bool InBattle = 125;
}

enum EShieldUpdateType {
	EShieldUpdateType_EShieldUpdateTypeAdd = 0;
	EShieldUpdateType_EShieldUpdateTypeDel = 1;
	EShieldUpdateType_EShieldUpdateTypeModify = 2;
}

message ShieldUpdateInfo {
	int32 Handle = 1;
	int32 ConfigId = 2;
	int32 ShieldValue = 3;
	int32 UpdateType = 4;
}

// MessageId: 22160 (Notify)
message ShieldUpdateNotify {
	repeated ShieldUpdateInfo Shields = 17;
}

// MessageId: 20306 (Notify)
message Egs {
	int32 NAs = 62;
	int32 FAs = 50;
}

// MessageId: 25687 (Request)
message n3a {
	int32 TagId = 92;
	int32 TagCount = 141;
}

// MessageId: 24305 (Response)
message uth {
	ErrorCode ErrorCode = 140;
}

// MessageId: 21675 (Request)
message yJs {
	int64 TJs = 59;
}

// MessageId: 27802 (Response)
message IJs {
}

// MessageId: 21005 (Notify)
message EJs {
	int64 TJs = 137;
}

// MessageId: 17199 (Notify)
message _th {
	bool Result = 1;
	int32 ChangeList = 128;
}

// MessageId: 21157 (Notify)
message fZa {
	int64 DownEntityId = 167;
	int64 UpEntityId = 24;
	int32 j8a = 117;
}

// MessageId: 23356 (Request)
message k8a {
	int64 DownEntityId = 183;
	int64 UpEntityId = 14;
	int32 j8a = 66;
}

// MessageId: 17914 (Response)
message cth {
	ErrorCode ErrorCode = 110;
}

message FormationAttr {
	int32 AttrId = 1;
	int32 Ratio = 2;
	int32 BaseMaxValue = 3;
	int32 MaxValue = 4;
	int32 CurrentValue = 5;
}

// MessageId: 21794 (Notify)
message FormationAttrNotify {
	int64 Duration = 45;
	repeated FormationAttr FormationAttrs = 159;
}

// MessageId: 15588 (Request)
message FormationAttrRequest {
	int64 Duration = 230;
	repeated FormationAttr FormationAttrs = 186;
}

// MessageId: 29600 (Response)
message FormationAttrResponse {
	ErrorCode ErrorCode = 184;
}

message N4s {
	int32 AttrId = 1;
	int32 Ratio = 2;
	int32 MaxValue = 4;
	int32 CurrentValue = 5;
}

// MessageId: 27207 (Notify)
message RTimeStopRequest {
	int64 Flag = 26;
	repeated N4s IsStopCharacter = 159;
	int64 Duration = 188;
}

// MessageId: 17463 (Request)
message FragileChangeRequest {
	int64 EntityId = 189;
	bool Flag = 3;
}

// MessageId: 23689 (Response)
message FragileChangeResponse {
	ErrorCode ErrorCode = 210;
}

message Debug {
	enum F4s {
		F4s_ECheatInputDefault = 0;
		F4s_ECheatInputDel = 1;
		F4s_ECheatInputEnd = 2;
	}


	// MessageId: 15872 (Request)
	message CheatInputRequest {
		int32 type = 166;
		int32 AoeDestroyEnemyRange = 214;
		repeated int64 EntityList = 61;
	}


	// MessageId: 17292 (Response)
	message CheatInputResponse {
		ErrorCode ErrorCode = 145;
	}


	message DamageRecordEntity {
		int64 EntityId = 1;
		repeated int64 BuffIds = 2;
		repeated GameplayAttributeData Attr = 3;
		repeated GameplayAttributeData AttrSnapshot = 4;
	}


	// MessageId: 24619 (Notify)
	message DamageRecordNotify {
		int64 TimestampMs = 2;
		int64 DamageConfId = 62;
		int32 DamageValue = 159;
		int32 SkillId = 225;
		int32 SkillLevel = 64;
		int64 BulletId = 164;
		int32 DamageSourceType = 109;
		bool IsCritical = 39;
		Debug.DamageRecordEntity Attacker = 163;
		Debug.DamageRecordEntity JAs = 89;
	}


	// MessageId: 25067 (Request)
	message EnableDamageRecordRequest {
		bool Enable = 149;
		int32 zga = 199;
	}


	// MessageId: 24532 (Response)
	message EnableDamageRecordResponse {
		ErrorCode ErrorCode = 165;
	}


	// MessageId: 23911 (Notify)
	message GmVoxelInfoNotify {
		float CellSize = 52;
		repeated Debug.VoxelSpan Spans = 193;
	}


	// MessageId: 16629 (Notify)
	message GmIsOverlapNotify {
		float CellSize = 153;
		Debug.VoxelSpan Box = 89;
		bool IsOverlap = 124;
	}


	message VoxelSpan {
		float X = 1;
		float Y = 2;
		float Smin = 3;
		float Smax = 4;
	}


	// MessageId: 17862 (Request)
	message OutputDebugInfoRequest {
		string ClientInfo = 2;
	}


	// MessageId: 16132 (Response)
	message OutputDebugInfoResponse {
	}


	// MessageId: 16061 (Notify)
	message Lfs {
	}


	// MessageId: 22703 (Notify)
	message xth {
	}


}

// MessageId: 15359 (Push)
message TimeStopPush {
	float TimeDilation = 59;
}

// MessageId: 17033 (Request)
message B4n {
	bool Flag = 72;
	int32 Duration = 96;
}

// MessageId: 24182 (Response)
message Jfs {
	ErrorCode ErrorCode = 107;
}

// MessageId: 15601 (Request)
message f4n {
	bool Flag = 177;
	bool sPs = 58;
	int32 Duration = 234;
}

// MessageId: 19168 (Response)
message RTimeStopResponse {
	ErrorCode ErrorCode = 174;
}

// MessageId: 19859 (Push)
message ueh {
	int64 EntityId = 94;
	float TimeDilation = 176;
}

// MessageId: 22571 (Request)
message R4n {
	bool Flag = 198;
	int32 Duration = 118;
}

// MessageId: 28474 (Response)
message kCs {
	ErrorCode ErrorCode = 224;
}

enum SwitchRoleType {
	SwitchRoleType_SignleWorld = 0;
	SwitchRoleType_MultiWorld = 1;
	SwitchRoleType_FbInstance = 2;
}

message FormationRoleInfo {
	int32 roleId = 1;
	int32 MaxHp = 2;
	int32 CurHp = 3;
	int32 Level = 4;
}

message FightFormationNotifyInfo {
	int32 FormationId = 1;
	int32 CurRole = 2;
	repeated FormationRoleInfo RoleInfos = 3;
	bool IsCurrent = 4;
}

message FightFormation {
	int32 FormationId = 1;
	int32 CurRole = 2;
	repeated int32 RoleIds = 3;
	bool IsCurrent = 4;
}

// MessageId: 28609 (Request)
message SwitchRoleRequest {
	int32 roleId = 173;
	int32 SwitchType = 237;
}

// MessageId: 17305 (Response)
message SwitchRoleResponse {
	ErrorCode ErrorCode = 250;
	int32 roleId = 76;
}

// MessageId: 22246 (Notify)
message SwitchRoleNotify {
	int32 PlayerId = 55;
	int64 UpEntityId = 83;
	int64 DownEntityId = 212;
}

// MessageId: 27602 (Notify)
message DieSwitchRoleNotify {
	int32 CurRoleId = 81;
}

// MessageId: 25429 (Request)
message UpdateFormationRequest {
	repeated FightFormation formations = 218;
}

// MessageId: 20238 (Response)
message UpdateFormationResponse {
	ErrorCode ErrorCode = 72;
	FightFormation Formation = 234;
}

message PlayerFightFormations {
	int32 PlayerId = 1;
	repeated FightFormationNotifyInfo formations = 2;
}

// MessageId: 20881 (Notify)
message UpdateFormationNotify {
	repeated PlayerFightFormations PlayersFormations = 77;
}

// MessageId: 17584 (Request)
message UpdateFightRoleRequest {
	int32 CurRoleId = 253;
	repeated int32 RoleIds = 10;
}

// MessageId: 18138 (Response)
message UpdateFightRoleResponse {
	ErrorCode ErrorCode = 10;
}

// MessageId: 18398 (Notify)
message FormationAutoAddRoleNotify {
	repeated int32 Roles = 184;
	int32 FormationId = 18;
}

// MessageId: 24282 (Request)
message GetFormationDataRequest {
}

// MessageId: 17269 (Response)
message GetFormationDataResponse {
	ErrorCode ErrorCode = 73;
	repeated FightFormation formations = 163;
}

// MessageId: 29341 (Notify)
message FormationUpdateNotify {
	repeated int32 RemoveFormationIds = 208;
	repeated FightFormation Formation = 194;
	int32 FormationId = 168;
}

message H4s {
	oneof Hua {
		jua Fua = 4;
	}

	int32 roleId = 1;
	int32 kua = 2;
	jua Nua = 3;
	int32 Vva = 5;
	int32 PhantomLevel = 6;
}

message jua {
}

// MessageId: 20793 (Push)
message _Zn {
}

enum ControlType {
	ControlType_Unknown = 0;
	ControlType_TemporaryTeleportCtrl = 1;
}

message j4s {
	repeated int64 aPs = 1;
}

message W4s {
	oneof K4s {
		j4s TemporaryTeleportParam = 2;
	}

	int32 hPs = 1;
}

// MessageId: 16564 (Notify)
message uZn {
	repeated W4s lPs = 237;
}

// MessageId: 26512 (Notify)
message cZn {
	repeated W4s lPs = 197;
}

// MessageId: 18033 (Notify)
message dZn {
	repeated W4s lPs = 143;
}

message SingleItemInfo {
	int32 ItemId = 1;
	int32 ItemNum = 2;
}

message TPs {
	int32 _Ps = 1;
	int32 uPs = 2;
}

message X4s {
	int32 Flag = 1;
	int32 CookCount = 2;
	int32 LastRoleId = 3;
	int32 LimitCount = 4;
	int32 mPs = 5;
	int64 LimitBeginTime = 6;
	int64 LimitEndTime = 7;
}

message Y4s {
	int32 Flag = 1;
	int64 LimitBeginTime = 2;
	int64 LimitEndTime = 3;
}

message J4s {
	int32 Flag = 1;
	bool LockState = 2;
	repeated int32 vPs = 3;
	repeated int32 pPs = 4;
}

// MessageId: 24850 (Request)
message mZn {
	int32 xVn = 33;
	int64 EntityId = 154;
}

// MessageId: 15710 (Response)
message CZn {
	int32 code = 207;
	int64 EntityId = 116;
}

// MessageId: 27145 (Request)
message gZn {
	int32 LVn = 173;
}

// MessageId: 18531 (Response)
message fZn {
	int32 code = 242;
	int32 LVn = 248;
}

// MessageId: 28606 (Request)
message CookFoodRequest {
	int32 Flag = 63;
	int32 roleId = 3;
	int32 CookCount = 194;
	int64 InteractEntityId = 96;
}

// MessageId: 20909 (Response)
message CookFoodResponse {
	int32 code = 199;
	int32 Flag = 190;
	repeated SingleItemInfo ItemInfos = 152;
	int32 ActiveSkillType = 21;
	repeated SingleItemInfo ExtraItemInfos = 107;
	int32 roleId = 37;
}

// MessageId: 18002 (Request)
message FoodProcessRequest {
	int32 Flag = 239;
	repeated SingleItemInfo PrimaryFood = 89;
	int32 CookCount = 58;
	int64 InteractEntityId = 156;
}

// MessageId: 27149 (Response)
message FoodProcessResponse {
	int32 code = 154;
	int32 Flag = 96;
	repeated SingleItemInfo FinalFood = 240;
	bool LockState = 143;
	repeated int32 UnlockParam = 133;
}

// MessageId: 26434 (Request)
message EZn {
}

// MessageId: 16878 (Response)
message yZn {
	int32 code = 91;
}

// MessageId: 23542 (Notify)
message IZn {
	TPs TPs = 219;
}

// MessageId: 26682 (Notify)
message TZn {
	repeated X4s LPs = 255;
	repeated J4s RPs = 39;
}

// MessageId: 22615 (Request)
message LZn {
}

// MessageId: 17574 (Response)
message RZn {
	int32 code = 137;
	TPs TPs = 113;
	repeated X4s LPs = 135;
	repeated J4s RPs = 192;
	repeated Y4s DPs = 7;
	int64 LimitRefreshTime = 121;
}

// MessageId: 15674 (Request)
message DZn {
	int32 PVn = 16;
}

// MessageId: 15478 (Response)
message AZn {
	int32 code = 155;
	int32 PVn = 183;
}

message DropBagItemInfo {
	int32 ShowPlanId = 1;
	int32 ItemId = 2;
	int32 ItemCount = 3;
}

// MessageId: 28251 (Notify)
message DropInBagNotify {
	int32 DropId = 197;
	repeated DropBagItemInfo DropItemInfos = 100;
}

message toh {
	string ClientTime = 1;
	int32 Jih = 2;
	int32 ItemType = 3;
	int32 ItemCount = 4;
	int32 Zih = 5;
	int32 erh = 6;
	int32 trh = 7;
	int32 irh = 8;
	int32 rrh = 9;
	int32 orh = 10;
	int32 nrh = 11;
	int32 srh = 12;
	int32 arh = 13;
	//int64 hrh = 14;
	int64 lrh = 15;
}

// MessageId: 19528 (Request)
message HZn {
	int64 DHn = 36;
	toh _rh = 92;
}

// MessageId: 18264 (Response)
message jZn {
	ErrorCode ErrorCode = 191;
}

enum ElevatorState {
	ElevatorState_End = 0;
	ElevatorState_h6n = 1;
	ElevatorState_Reverse = 2;
}

// MessageId: 24055 (Request)
message WZn {
	int64 EntityId = 124;
	int32 State = 94;
	int32 L5n = 25;
}

// MessageId: 15801 (Response)
message KZn {
	ErrorCode ErrorCode = 240;
}

// MessageId: 15374 (Notify)
message ElevatorMoveNotify {
	int64 EntityId = 41;
	int32 Location = 230;
}

message e6s {
	int32 UPs = 1;
	int32 wPs = 2;
	int32 Flag = 3;
}

// MessageId: 21384 (Notify)
message EnergyUpdateNotify {
	repeated e6s UpdateInfo = 153;
}

// MessageId: 19739 (Request)
message EnergySyncRequest {
	repeated int32 Ids = 237;
}

// MessageId: 29167 (Response)
message EnergySyncResponse {
	int32 errCode = 46;
	repeated e6s SyncInfo = 177;
}

// MessageId: 20752 (Request)
message ExploreProgressRequest {
	repeated int32 AreaIds = 3;
}

message AreaExploreInfo {
	int32 AreaId = 1;
	repeated OneExploreItem ExploreProgress = 2;
	int32 ExplorePercent = 3;
}

message OneExploreItem {
	int32 ExploreProgressId = 1;
	int32 ExplorePercent = 2;
	int32 CurCount = 3;
	int32 TotalCount = 4;
}

// MessageId: 20792 (Response)
message ExploreProgressResponse {
	repeated AreaExploreInfo areaProgress = 11;
}

// MessageId: 22350 (Request)
message ats {
	int32 AreaId = 107;
	int32 ExploreProgress = 168;
}

// MessageId: 19232 (Response)
message hts {
	ErrorCode ErrorCode = 19;
}

// MessageId: 29718 (Request)
message lts {
	int32 jVn = 24;
}

// MessageId: 22091 (Response)
message _ts {
	int32 OPs = 150;
	repeated r6s kPs = 25;
}

message r6s {
	int32 AreaId = 1;
	repeated int32 ExploreProgress = 2;
}

message FPs {
	int32 jVn = 1;
	int32 NPs = 2;
}

// MessageId: 18717 (Notify)
message uts {
	repeated FPs FPs = 111;
}

message DetectionEntityPosInfo {
	Vector Pos = 1;
	int32 ConfigId = 2;
}

// MessageId: 24148 (Notify)
message ExploreToolUpdateNotify {
	int32 SkillId = 218;
}

// MessageId: 20804 (Notify)
message ExploreToolAllNotify {
	repeated int32 SkillList = 43;
	int32 ExploreSkill = 150;
	repeated int32 Sna = 201;
}

enum o6s {
	o6s_Explore = 0;
	o6s_n6s = 1;
}

// MessageId: 22104 (Notify)
message ExploreSkillRouletteUpdateNotify {
	repeated ExploreSkillRoulette RouletteInfo = 9;
}

// MessageId: 15514 (Request)
message VisionExploreSkillSetRequest {
	int32 SkillId = 88;
	bool S0a = 194;
}

// MessageId: 23725 (Response)
message VisionExploreSkillSetResponse {
	int32 errCode = 219;
	int32 SkillId = 153;
}

// MessageId: 29859 (Notify)
message VisionExploreSkillNotify {
	int32 ExploreSkill = 48;
}

message ExploreSkillRoulette {
	repeated int32 SkillIds = 1;
	int32 ExtraItemId = 2;
}

// MessageId: 23317 (Request)
message ExploreSkillRouletteSetRequest {
	repeated ExploreSkillRoulette SkillRoulettes = 5;
}

// MessageId: 18150 (Response)
message ExploreSkillRouletteSetResponse {
	int32 errCode = 23;
	repeated ExploreSkillRoulette SkillRoulettes = 238;
}

// MessageId: 28521 (Request)
message ExploreSkillPullGiantRequest {
	int64 EntityId = 131;
}

// MessageId: 20626 (Response)
message ExploreSkillPullGiantResponse {
	int64 EntityId = 68;
	int32 code = 109;
}

// MessageId: 23511 (Request)
message UseDetectionSkillRequest {
	int32 SkillId = 3;
	Vector Pos = 108;
	Rotator Rot = 159;
	bool ConfirmUseDetectionSkill = 160;
}

// MessageId: 15746 (Response)
message UseDetectionSkillResponse {
	int32 code = 65;
	repeated DetectionEntityPosInfo DetectionEntityPosInfo = 30;
	int64 DetectionSlotId = 214;
}

// MessageId: 21679 (Notify)
message ExploreToolAuthorizationNotify {
	repeated int32 AuthorizationItems = 131;
}

// MessageId: 27902 (Request)
message SetFanNumberOfTurnsRequest {
	int64 EntityId = 45;
	int32 NumberOfTurns = 121;
}

// MessageId: 15938 (Response)
message SetFanNumberOfTurnsResponse {
	int32 errCode = 230;
}

// MessageId: 24428 (Request)
message SetBaoziStateRequest {
	int64 FanEntityId = 104;
	int64 BaoziEntityId = 24;
	int32 IsActive = 208;
}

// MessageId: 17246 (Response)
message SetBaoziStateResponse {
	int32 errCode = 153;
}

// MessageId: 24298 (Request)
message SetFanStateRequest {
	int64 FanEntityId = 28;
	int32 IsActive = 53;
}

// MessageId: 18778 (Response)
message SetFanStateResponse {
	int32 errCode = 255;
}

message FavorQuest {
	int32 Chapter = 1;
	int32 Status = 2;
}

enum FavorQuestStatus {
	FavorQuestStatus_cBs = 0;
	FavorQuestStatus_CanAccept = 1;
	FavorQuestStatus_Accepted = 2;
	FavorQuestStatus_Completed = 3;
}

enum FavorItemStatus {
	FavorItemStatus_ItemLocked = 0;
	FavorItemStatus_ItemCanUnLock = 1;
	FavorItemStatus_ItemUnLocked = 2;
}

enum FavorItemType {
	FavorItemType_o8n = 0;
	FavorItemType_Story = 1;
	FavorItemType_Goods = 2;
}

message FavorItem {
	int32 Flag = 1;
	int32 Status = 2;
}

message RoleFavor {
	int32 roleId = 1;
	int32 Level = 2;
	int32 Exp = 3;
	repeated FavorItem WordIds = 4;
	repeated FavorItem StoryIds = 5;
	repeated FavorItem GoodsIds = 6;
	FavorQuest FavorQuest = 7;
}

// MessageId: 17566 (Request)
message RoleFavorListRequest {
}

// MessageId: 29109 (Response)
message RoleFavorListResponse {
	int32 errCode = 194;
	repeated RoleFavor FavorList = 100;
}

// MessageId: 24651 (Notify)
message RoleFavorListNotify {
	repeated RoleFavor FavorList = 5;
	map<int32, ConditionInfo> RoleConditionInfoMap = 30;
}

// MessageId: 20449 (Notify)
message RoleFavorActiveNotify {
	RoleFavor RoleFavorInfo = 17;
}

// MessageId: 20383 (Notify)
message RoleFavorLevelUpdateNotify {
	int32 roleId = 247;
	int32 Level = 158;
	int32 Exp = 61;
}

// MessageId: 27823 (Notify)
message RoleFavorNewCanUnLockNotify {
	int32 ItemType = 221;
	int32 roleId = 83;
	int32 CanUnLockId = 213;
}

// MessageId: 25157 (Notify)
message RoleFavorExpTipsNotify {
	repeated ExpTips ExpTips = 118;
	int32 ItemId = 110;
	int32 count = 231;
}

message ExpTips {
	int32 roleId = 1;
	int32 Exp = 2;
}

message ItemFinishList {
	repeated int32 ConditionIdList = 1;
}

message ConditionItem {
	map<int32, ItemFinishList> ItemFinishMap = 1;
}

message ConditionInfo {
	map<int32, ConditionItem> FinishConditionMap = 2;
}

// MessageId: 22928 (Notify)
message RoleFavorFinishConditionNotify {
	map<int32, ConditionInfo> RoleConditionInfoMap = 124;
}

// MessageId: 16633 (Request)
message RoleFavorUnLockRequest {
	int32 ItemType = 139;
	int32 roleId = 154;
	int32 UnLockId = 129;
}

// MessageId: 17640 (Response)
message RoleFavorUnLockResponse {
	int32 errCode = 168;
	int32 ItemType = 140;
	int32 roleId = 228;
	int32 UnLockId = 208;
}

// MessageId: 21310 (Notify)
message RoleFavorNewQuestUpdateNotify {
	int32 roleId = 171;
	FavorQuest FavorQuest = 145;
}

enum C6s {
	C6s_Talk = 0;
	C6s_lxs = 1;
}

// MessageId: 24879 (Request)
message RoleFavorAcceptQuestRequest {
	int32 roleId = 81;
	int32 QuestType = 42;
	int32 Chapter = 87;
}

// MessageId: 28862 (Response)
message RoleFavorAcceptQuestResponse {
	int32 errCode = 125;
	int32 roleId = 163;
	int32 QuestType = 210;
}

// MessageId: 24054 (Request)
message RoleFavorTalkScoreRequest {
	int32 Score = 96;
	int32 ErrorCount = 235;
}

// MessageId: 29721 (Response)
message RoleFavorTalkScoreResponse {
	int32 errCode = 107;
	bool IsComplete = 97;
}

// MessageId: 18903 (Request)
message RoleMotionUnLockRequest {
	int32 roleId = 108;
	int32 UnLockId = 91;
}

// MessageId: 21359 (Response)
message RoleMotionUnLockResponse {
	int32 errCode = 80;
	int32 roleId = 230;
	int32 UnLockId = 28;
}

// MessageId: 24294 (Notify)
message RoleMotionNewCanUnLockNotify {
	int32 roleId = 172;
	int32 CanUnLockId = 198;
}

message g6s {
	int32 roleId = 1;
	repeated FavorItem hUs = 2;
}

// MessageId: 20835 (Notify)
message Xts {
	g6s lUs = 210;
}

// MessageId: 18891 (Notify)
message Yts {
	repeated g6s _Us = 181;
	map<int32, ConditionInfo> RoleConditionInfoMap = 146;
}

// MessageId: 26611 (Notify)
message Jts {
	map<int32, ConditionInfo> RoleConditionInfoMap = 114;
}

// MessageId: 29416 (Notify)
message wYs {
	int64 EntityId = 64;
}

// MessageId: 22922 (Notify)
message FlowStartNotify {
	int64 FlowIncId = 77;
	string FlowListName = 171;
	int32 FlowId = 167;
	int32 StateId = 244;
	GameCtxPb GameCtx = 174;
	string PlotMode = 139;
	bool Async = 250;
	bool IsSkip = 179;
	bool BYs = 147;
	Vector qYs = 140;
}

// MessageId: 21897 (Request)
message FlowEndRequest {
	int64 FlowIncId = 51;
	bool IsSkip = 231;
	map<int32, FlowOptionInfoList> OptionInfos = 41;
}

message FlowOptionInfoList {
	repeated FlowOptionInfo OptionIndexList = 1;
}

message FlowOptionInfo {
	int32 TalkId = 1;
	int32 OptionIndex = 2;
}

// MessageId: 17565 (Response)
message FlowEndResponse {
	int32 code = 117;
}

// MessageId: 22001 (Notify)
message FlowEndNotify {
	int64 FlowIncId = 58;
	bool Async = 29;
	bool IsFinished = 33;
}

// MessageId: 27420 (Request)
message FlowRestartRequest {
	int64 FlowIncId = 249;
}

// MessageId: 16136 (Response)
message FlowRestartResponse {
	int32 code = 137;
}

// MessageId: 24656 (Request)
message tFlowActionRequestrs {
	int64 FlowIncId = 90;
	int32 ActionId = 132;
}

// MessageId: 27594 (Response)
message FlowActionResponse {
	int32 code = 72;
}

// MessageId: 25403 (Notify)
message FlowShowEntityNotify {
	bool IsHide = 217;
	repeated int32 EntityIds = 196;
}

// MessageId: 24909 (Notify)
message ShowPasserByNpcNotify {
	bool IsHide = 108;
	repeated int64 EntityIds = 126;
}

// MessageId: 26969 (Notify)
message FlowServerSkipNotify {
	string FlowListName = 153;
	int32 FlowId = 163;
	int32 StateId = 57;
	bool FadeOutScreen = 132;
}

// MessageId: 19583 (Request)
message G7s {
	int64 FlowIncId = 140;
}

// MessageId: 28076 (Response)
message N7s {
	int32 code = 161;
}

// MessageId: 23034 (Request)
message ForgeInfoRequest {
}

// MessageId: 15910 (Response)
message ForgeInfoResponse {
	int32 code = 38;
	repeated OneForgeInfo ForgeInfoList = 40;
	repeated OneForgeConfig ForgeConfigs = 129;
	int64 LimitRefreshTime = 167;
}

message OneForgeInfo {
	int32 Flag = 1;
	int32 LastRoleId = 3;
	int32 LimitCount = 4;
	int32 LimitForgeCount = 5;
	int64 LimitBeginTime = 6;
	int64 LimitEndTime = 7;
}

message OneForgeConfig {
	int32 Flag = 1;
	int64 LimitBeginTime = 2;
	int64 LimitEndTime = 3;
}

// MessageId: 26599 (Request)
message ForgeItemRequest {
	int32 Flag = 183;
	int32 roleId = 234;
	int32 count = 194;
	int64 InteractEntityId = 207;
}

// MessageId: 26408 (Response)
message ForgeItemResponse {
	int32 code = 91;
	int32 Flag = 235;
	repeated SingleItemInfo ItemInfos = 136;
	int32 ActiveSkillType = 7;
	repeated SingleItemInfo ExtraItemInfos = 24;
	int32 roleId = 55;
}

// MessageId: 17065 (Notify)
message ForgeItemInfoUpdateNotify {
	repeated OneForgeInfo ForgeInfoList = 229;
}

// MessageId: 23728 (Request)
message ForgeFormulaUnlockRequest {
	int32 Flag = 189;
}

// MessageId: 24014 (Response)
message ForgeFormulaUnlockResponse {
	int32 code = 117;
	int32 Flag = 14;
}

message Formation {
	int32 Flag = 1;
	int32 RoleIndex = 2;
	repeated int32 Role = 3;
	bool IsCurrent = 4;
}

// MessageId: 27268 (Request)
message FormationRequest {
}

// MessageId: 25322 (Response)
message FormationResponse {
	repeated Formation Formation = 255;
	ErrorCode ErrorCode = 100;
}

// MessageId: 22495 (Request)
message FormationSwitchCurrentRequest {
	int32 Flag = 231;
}

// MessageId: 22884 (Response)
message FormationSwitchCurrentResponse {
	int32 CurrentId = 155;
	ErrorCode ErrorCode = 77;
}

// MessageId: 23390 (Request)
message FormationModifyRequest {
	int32 Flag = 138;
	repeated int32 Role = 82;
}

// MessageId: 23953 (Response)
message FormationModifyResponse {
	Formation Formation = 102;
	ErrorCode ErrorCode = 113;
}

message FormationChangeInfo {
	int32 Flag = 1;
	repeated int32 Role = 2;
}

// MessageId: 25943 (Request)
message FormationChangeRequest {
	repeated FormationChangeInfo ChangeList = 241;
	int32 FormationId = 37;
}

// MessageId: 23466 (Response)
message FormationChangeResponse {
	repeated FormationChangeInfo ChangeList = 65;
	int32 FormationId = 41;
	ErrorCode ErrorCode = 25;
}

// MessageId: 16546 (Request)
message FormationSwitchRoleRequest {
	int32 RoleIndex = 6;
}

// MessageId: 28972 (Response)
message FormationSwitchRoleResponse {
	int32 RoleIndex = 23;
	ErrorCode ErrorCode = 11;
}

// MessageId: 23515 (Notify)
message PbFormationAutoAddRoleNotify {
	repeated int32 Roles = 170;
	int32 FormationId = 128;
}

// MessageId: 25590 (Notify)
message PhantomFormationChangeNotify {
	int32 CurrRole = 208;
	repeated int32 RoleIds = 124;
	int32 FormationId = 76;
	bool IsExit = 218;
}

// MessageId: 19855 (Request)
message ClientCurrentRoleReportRequest {
	int32 PlayerId = 109;
	int32 CurrentRoleId = 241;
	int64 CurrentEntityId = 138;
}

// MessageId: 23233 (Response)
message ClientCurrentRoleReportResponse {
	int32 PlayerId = 29;
	int64 CurrentEntityId = 60;
}

message FriendInfo {
	PlayerDetails Info = 1;
	string Remark = 2;
}

message FriendApply {
	PlayerDetails Info = 1;
	int64 CreatedTime = 2;
}

// MessageId: 25534 (Request)
message FriendAllRequest {
}

// MessageId: 29571 (Response)
message FriendAllResponse {
	repeated FriendInfo FriendInfoList = 23;
	repeated FriendApply FriendApplyList = 130;
	ErrorCode ErrorCode = 104;
}

// MessageId: 24325 (Notify)
message FriendAddedNotify {
	FriendInfo Info = 24;
}

// MessageId: 24513 (Notify)
message FriendDeletedNotify {
	int32 Flag = 48;
}

// MessageId: 18962 (Notify)
message FriendApplyReceivedNotify {
	FriendApply FriendApply = 201;
}

// MessageId: 26276 (Notify)
message FriendApplyDeletedNotify {
	int32 Flag = 102;
}

enum FriendApplyWay {
	FriendApplyWay_Search = 0;
	FriendApplyWay_RecentlyTeam = 1;
}

// MessageId: 17885 (Request)
message FriendApplySendRequest {
	int32 Flag = 210;
	int32 Way = 113;
}

// MessageId: 16784 (Response)
message FriendApplySendResponse {
	ErrorCode ErrorCode = 143;
}

enum FriendApplyOperator {
	FriendApplyOperator_Approve = 0;
	FriendApplyOperator_Reject = 1;
}

// MessageId: 24614 (Request)
message FriendApplyHandleRequest {
	repeated int32 Ids = 206;
	int32 Operator = 207;
}

// MessageId: 25159 (Response)
message FriendApplyHandleResponse {
	map<int32, int32> HandledMap = 215;
	ErrorCode ErrorCode = 104;
}

// MessageId: 28398 (Request)
message FriendRemarkRequest {
	int32 Flag = 215;
	string Remark = 43;
}

// MessageId: 21509 (Response)
message FriendRemarkResponse {
	ErrorCode ErrorCode = 7;
}

// MessageId: 20126 (Request)
message FriendDeleteRequest {
	int32 Flag = 36;
}

// MessageId: 19310 (Response)
message FriendDeleteResponse {
	ErrorCode ErrorCode = 231;
}

message RecentlyTeamInfo {
	PlayerDetails Info = 1;
	int64 TeamTime = 2;
}

// MessageId: 21073 (Request)
message FriendRecentlyTeamRequest {
}

// MessageId: 18804 (Response)
message FriendRecentlyTeamResponse {
	repeated RecentlyTeamInfo Infos = 17;
	ErrorCode ErrorCode = 171;
}

// MessageId: 16374 (Notify)
message FriendRecentlyTeamUpdateNotify {
	repeated RecentlyTeamInfo AddInfos = 157;
	map<int32, int64> TimeUpdate = 129;
	repeated int32 RemoveIds = 81;
}

message Function {
	int32 Id = 1;
	int32 Flag = 5;
}

// MessageId: 23819 (Notify)
message FuncOpenNotify {
	repeated Function Func = 34;
}

// MessageId: 25203 (Notify)
message FuncOpenConfirmNotify {
	bytes FuncInfo = 150;
}

// MessageId: 29421 (Notify)
message FuncOpenUpdateNotify {
	repeated Function Func = 72;
}

// MessageId: 28051 (Request)
message FuncShowRequest {
	repeated int32 FuncId = 21;
}

// MessageId: 26906 (Response)
message FuncShowResponse {
	ErrorCode ErrorCode = 13;
}

message GachaConsume {
	int32 Times = 1;
	int32 Consume = 2;
}

message GachaPoolInfo {
	int32 Id = 1;
	int64 BeginTime = 2;
	int64 EndTime = 3;
	string Title = 4;
	string Description = 5;
	int32 UiType = 6;
	string ThemeColor = 7;
	repeated int32 ShowIdList = 8;
	repeated int32 UpList = 9;
	repeated int32 PreviewIdList = 10;
}

message GachaInfo {
	int32 Id = 1;
	int32 TodayTimes = 2;
	int32 TotalTimes = 3;
	int32 ItemId = 4;
	repeated GachaConsume GachaConsumes = 5;
	int32 UsePoolId = 6;
	repeated GachaPoolInfo Pools = 7;
	int64 BeginTime = 8;
	int64 EndTime = 9;
	int32 DailyLimitTimes = 10;
	int32 TotalLimitTimes = 11;
	string ResourcesId = 12;
}

message GachaReward {
	int32 ItemId = 1;
	int32 ItemCount = 2;
}

message GachaResult {
	GachaReward GachaReward = 1;
	repeated GachaReward ExtraRewards = 2;
	repeated GachaReward TransformRewards = 4;
	oneof B6s {
		GachaReward BottomExtraReward = 3;
	}
}

message q6s {
	GachaReward GachaReward = 1;
	int64 s9n = 2;
}

// MessageId: 23720 (Request)
message GachaInfoRequest {
	int32 Language = 28;
}

// MessageId: 15989 (Response)
message GachaInfoResponse {
	ErrorCode ErrorCode = 204;
	repeated GachaInfo GachaInfos = 109;
	int32 DailyTotalLeftTimes = 154;
	string RecordId = 41;
}

// MessageId: 28815 (Request)
message GachaRequest {
	int32 GachaId = 144;
	int32 GachaTimes = 50;
}

// MessageId: 21731 (Response)
message GachaResponse {
	ErrorCode ErrorCode = 23;
	repeated GachaResult GachaResults = 152;
}

// MessageId: 26063 (Notify)
message GachaResultNotify {
	repeated GachaResult GachaResults = 20;
}

// MessageId: 17932 (Request)
message GachaUsePoolRequest {
	int32 GachaId = 231;
	int32 PoolId = 68;
}

// MessageId: 21527 (Response)
message GachaUsePoolResponse {
	ErrorCode ErrorCode = 107;
}

message ioh {
	int32 ItemId = 1;
	bool frh = 2;
}

message roh {
	string prh = 1;
	repeated ioh vrh = 2;
	repeated ioh Mrh = 3;
	repeated ioh Srh = 4;
	repeated ioh yrh = 5;
	repeated ioh Erh = 6;
}

// MessageId: 17926 (Request)
message neh {
	int32 PoolId = 144;
}

// MessageId: 27569 (Response)
message seh {
	ErrorCode ErrorCode = 61;
	roh prh = 95;
}

message G6s {
	int32 ItemId = 1;
	int32 ItemNum = 2;
}

message O6s {
	int32 taskId = 1;
	repeated G6s iws = 2;
}

enum GatherTaskState {
	GatherTaskState_j6n = 0;
	GatherTaskState_Running = 1;
	GatherTaskState_InComplete = 2;
	GatherTaskState_Done = 3;
	GatherTaskState_TakeReward = 4;
}

message rws {
	int32 taskId = 1;
	int32 State = 2;
}

// MessageId: 19267 (Notify)
message ios {
	repeated rws rws = 91;
}

// MessageId: 29054 (Notify)
message ros {
	repeated int32 ows = 251;
}

// MessageId: 25249 (Notify)
message oos {
	repeated O6s nws = 29;
}

// MessageId: 24951 (Request)
message nos {
	int32 V6n = 62;
}

// MessageId: 28115 (Response)
message sos {
	ErrorCode ErrorCode = 172;
}

// MessageId: 21091 (Request)
message GuideInfoRequest {
}

// MessageId: 17582 (Response)
message GuideInfoResponse {
	repeated int32 GuideGroupFinishList = 183;
}

// MessageId: 16281 (Request)
message GuideTriggerRequest {
	int32 GroupId = 151;
}

// MessageId: 26820 (Response)
message GuideTriggerResponse {
	ErrorCode ErrorCode = 114;
	repeated string ErrorParams = 108;
}

// MessageId: 25607 (Request)
message GuideFinishRequest {
	int32 GroupId = 48;
}

// MessageId: 27370 (Response)
message GuideFinishResponse {
	ErrorCode ErrorCode = 84;
	repeated string ErrorParams = 124;
}

// MessageId: 18193 (Notify)
message GuideCondDoneNotify {
	int32 GroupId = 244;
}

// MessageId: 1650 (Request)
message HeartbeatRequest {
}

// MessageId: 1651 (Response)
message HeartbeatResponse {
}

// MessageId: 16372 (Request)
message GatewayEchoRequest {
	string Content = 147;
}

// MessageId: 19684 (Response)
message GatewayEchoResponse {
	string Content = 188;
}

enum IllustratedType {
	IllustratedType_Monster = 0;
	IllustratedType_VocalCorpse = 1;
	IllustratedType_ViewPoint = 2;
	IllustratedType_Weapon = 3;
	IllustratedType_Animal = 4;
	IllustratedType_aOs = 5;
	IllustratedType_Chip = 6;
	IllustratedType_Photograph = 7;
	IllustratedType_Noun = 8;
}

enum hws {
	hws_None = 0;
	hws_PhotographSub = 7;
	hws_RUs = 8;
	hws_aTs = 9;
}

message IllustratedEntry {
	int32 Flag = 1;
	uint32 CreateTime = 2;
	int32 Num = 3;
	bool IsRead = 4;
	oneof V6s {
		int32 hws = 5;
	}
}

message IllustratedClass {
	int32 type = 1;
	repeated IllustratedEntry IllustratedEntryList = 2;
}

// MessageId: 28088 (Request)
message IllustratedRedDotRequest {
}

// MessageId: 27925 (Response)
message IllustratedRedDotResponse {
	repeated int32 _ws = 75;
}

// MessageId: 23142 (Request)
message IllustratedInfoRequest {
	repeated int32 E9n = 233;
}

// MessageId: 26597 (Response)
message IllustratedInfoResponse {
	ErrorCode ErrorCode = 162;
	repeated string ErrorParams = 123;
	repeated IllustratedClass IllustratedClassList = 160;
}

// MessageId: 23987 (Request)
message IllustratedUnlockRequest {
	int32 type = 193;
	int32 Flag = 21;
}

// MessageId: 25162 (Response)
message IllustratedUnlockResponse {
	ErrorCode ErrorCode = 11;
	repeated string ErrorParams = 238;
	IllustratedEntry cws = 111;
}

// MessageId: 20414 (Notify)
message Tos {
	int32 type = 220;
	IllustratedEntry cws = 121;
	bool IsNew = 185;
}

// MessageId: 22844 (Request)
message Los {
	int32 type = 159;
	int32 Flag = 212;
}

// MessageId: 26703 (Response)
message Ros {
	ErrorCode ErrorCode = 91;
	repeated string ErrorParams = 113;
}

// MessageId: 20434 (Request)
message Dos {
}

// MessageId: 25546 (Response)
message Aos {
	repeated H6s mws = 238;
}

message H6s {
	int32 InfluenceId = 1;
	int32 RewardIndex = 2;
	int32 Cws = 3;
}

// MessageId: 28707 (Notify)
message Uos {
	repeated H6s mws = 232;
}

// MessageId: 27257 (Request)
message InfluenceRewardRequest {
	int32 InfluenceId = 166;
}

// MessageId: 22376 (Response)
message InfluenceRewardResponse {
	int32 code = 60;
	int32 InfluenceId = 200;
	int32 RewardIndex = 89;
	map<int32, int32> RewardItems = 136;
}

// MessageId: 20732 (Request)
message bos {
	int32 T9n = 134;
}

// MessageId: 15598 (Response)
message Bos {
	ErrorCode ErrorCode = 75;
}

// MessageId: 19184 (Notify)
message qos {
	repeated j6s fws = 140;
}

message j6s {
	int32 Flag = 1;
	int32 vws = 2;
}

// MessageId: 21963 (Notify)
message Gos {
	repeated j6s fws = 18;
}

// MessageId: 23442 (Request)
message Oos {
	int32 InstanceId = 249;
	repeated int32 RoleIds = 214;
	int32 EntranceId = 21;
	int32 PosEntityId = 113;
	TransitionOptionPb TransitionOption = 51;
	repeated int32 Tzs = 222;
}

// MessageId: 15565 (Response)
message kos {
	ErrorCode ErrorCode = 34;
}

// MessageId: 26705 (Request)
message Nos {
	int32 EntranceId = 130;
}

// MessageId: 29702 (Response)
message Fos {
	ErrorCode ErrorCode = 233;
}

// MessageId: 24520 (Request)
message InstEntranceDetailRequest {
	int32 EntranceId = 116;
}

// MessageId: 17449 (Response)
message InstEntranceDetailResponse {
	ErrorCode ErrorCode = 45;
	int32 EntranceId = 111;
	int64 LimitEndTime = 192;
	repeated InstDetailEntry InstDetailEntryList = 166;
}

message InstDetailEntry {
	int32 InstId = 1;
	int64 ResetTime = 2;
	int32 count = 3;
}

enum Kma {
	Kma_Default = 0;
	Kma_Esc = 1;
}

// MessageId: 28041 (Request)
message Hos {
	int32 InstId = 232;
	int32 PosEntityId = 105;
	int32 Way = 108;
}

// MessageId: 16561 (Response)
message jos {
	ErrorCode ErrorCode = 42;
}

// MessageId: 28975 (Notify)
message Wos {
	int32 Flag = 6;
}

// MessageId: 27474 (Request)
message Kos {
}

// MessageId: 15545 (Response)
message Qos {
	ErrorCode ErrorCode = 119;
}

// MessageId: 26908 (Notify)
message InstSettleNotify {
	bool IsSuccess = 95;
	map<int32, int32> RewardItems = 215;
	bool RewardFailTips = 239;
	int32 Magnification = 196;
}

// MessageId: 20520 (Notify)
message InstResultNotify {
	int32 Flag = 188;
	bool Succ = 136;
	int32 Reason = 127;
	bool IsRecReward = 59;
}

// MessageId: 27493 (Request)
message Jos {
}

// MessageId: 18976 (Response)
message zos {
	map<int32, int32> yws = 125;
	map<int32, int32> Iws = 127;
}

// MessageId: 27824 (Notify)
message Zos {
	int32 Tws = 173;
	int32 count = 243;
}

// MessageId: 16129 (Notify)
message ens {
}

// MessageId: 29433 (Notify)
message InstTimeoutNotify {
	int64 Timestamp = 199;
}

// MessageId: 22356 (Request)
message SingleInstRechallengeRequest {
	repeated int32 RoleIds = 89;
	repeated int32 Tzs = 202;
}

// MessageId: 21037 (Response)
message SingleInstRechallengeResponse {
	ErrorCode ErrorCode = 141;
}

message Irh {
	int32 Flag = 1;
	int32 count = 2;
	int32 IncrId = 3;
}

message ooh {
	Irh Irh = 1;
	repeated Irh RewardItems = 2;
}

message AddCountItemInfo {
	int32 Flag = 1;
	int32 count = 2;
	int32 IncrId = 3;
}

// MessageId: 27718 (Request)
message ons {
	repeated Q6s ItemList = 64;
}

message Q6s {
	int32 count = 2;
	int32 ItemId = 3;
	int32 IncrId = 4;
}

// MessageId: 23593 (Response)
message nns {
	int32 errCode = 163;
}

// MessageId: 22828 (Request)
message sns {
	repeated Q6s ItemList = 254;
}

// MessageId: 16776 (Response)
message ans {
	ErrorCode ErrorCode = 87;
	map<int32, int32> ItemMap = 24;
}

// MessageId: 24444 (Request)
message hns {
	int32 q9n = 58;
	int32 IncrId = 100;
}

// MessageId: 15148 (Response)
message lns {
	int32 errCode = 17;
}

// MessageId: 27909 (Request)
message _ns {
	int32 count = 226;
	int32 ItemId = 75;
}

// MessageId: 18061 (Response)
message uns {
	int32 errCode = 158;
}

message RewardItemInfo {
	int32 ShowPlanId = 1;
	int32 ItemId = 2;
	int32 count = 3;
	int32 IncrId = 4;
}

// MessageId: 16447 (Notify)
message ItemRewardNotify {
	int32 DropId = 103;
	repeated RewardItemInfo ItemList = 34;
	int32 Reason = 33;
	int32 Magnification = 212;
}

// MessageId: 19104 (Request)
message ItemGiftUseRequest {
	int32 count = 89;
	repeated int32 SelectedId = 176;
	int32 ItemId = 166;
}

// MessageId: 16068 (Response)
message ItemGiftUseResponse {
	repeated AddCountItemInfo Infos = 158;
	ErrorCode ErrorCode = 144;
}

// MessageId: 22735 (Notify)
message ItemGiftUseNotify {
	repeated AddCountItemInfo Infos = 134;
	int32 Flag = 249;
}

// MessageId: 18763 (Request)
message NormalItemRequest {
}

// MessageId: 20492 (Response)
message NormalItemResponse {
	repeated NormalItem NormalItemList = 208;
}

// MessageId: 21397 (Notify)
message NormalItemUpdateNotify {
	repeated NormalItem NormalItemList = 122;
	bool NoTips = 184;
}

// MessageId: 22716 (Notify)
message pns {
	repeated int32 Pws = 146;
}

// MessageId: 28027 (Notify)
message NormalItemAddNotify {
	repeated NormalItem NormalItemList = 124;
	bool NoTips = 159;
	int32 Reason = 27;
}

// MessageId: 18172 (Request)
message WeaponItemRequest {
}

// MessageId: 15228 (Response)
message WeaponItemResponse {
	repeated WeaponItem WeaponItemList = 246;
}

// MessageId: 17740 (Notify)
message WeaponItemAddNotify {
	repeated WeaponItem WeaponItemList = 145;
	bool AddFromRole = 64;
	int32 Reason = 109;
}

// MessageId: 21270 (Notify)
message Ins {
	repeated int32 xws = 102;
}

// MessageId: 27123 (Request)
message PhantomItemRequest {
}

message z6s {
	int32 roleId = 1;
	repeated int32 eHn = 2;
}

message Z6s {
	int32 roleId = 1;
	repeated ArrayIntInt BaseProp = 2;
	repeated ArrayIntInt AddProp = 3;
}

// MessageId: 18526 (Response)
message PhantomItemResponse {
	repeated PhantomItem PhantomItemList = 22;
	repeated z6s Gws = 32;
	repeated Z6s Ows = 91;
	int32 kws = 232;
	repeated int32 Nws = 106;
}

// MessageId: 25782 (Notify)
message PhantomItemAddNotify {
	repeated PhantomItem PhantomItemList = 210;
	int32 Reason = 1;
}

// MessageId: 21295 (Notify)
message Dns {
	repeated int32 Fws = 145;
}

// MessageId: 15219 (Notify)
message ItemFuncValueUpdateNotify {
	int32 IncrId = 230;
	int32 FuncValue = 211;
}

message WeaponItem {
	int32 Flag = 1;
	int32 IncrId = 2;
	int32 FuncValue = 3;
	int32 WeaponLevel = 4;
	int32 WeaponExp = 5;
	int32 WeaponBreach = 6;
	int32 WeaponResonLevel = 7;
	int32 roleId = 8;
}

message PhantomItem {
	int32 Flag = 1;
	int32 IncrId = 2;
	int32 FuncValue = 3;
	int32 PhantomLevel = 4;
	int32 PhantomExp = 5;
	repeated PhantomPropInfo PhantomMainProp = 6;
	repeated PhantomPropInfo PhantomSubProp = 7;
	int32 FetterGroupId = 8;
	int32 SkinId = 9;
}

message r5s {
	int32 index = 1;
	repeated PhantomPropInfo Qws = 2;
}

message NormalItem {
	int32 Flag = 1;
	int32 count = 2;
	int64 ExpireTime = 4;
}

message o5s {
	int32 Flag = 1;
	int32 count = 2;
}

message PhantomPropInfo {
	int32 PhantomPropId = 1;
	int32 Value = 2;
}

// MessageId: 23435 (Notify)
message ItemObtainNotify {
	int32 Reason = 217;
	repeated AddCountItemInfo Items = 53;
	repeated ooh Trh = 185;
}

// MessageId: 21698 (Notify)
message ItemPkgOpenNotify {
	repeated int32 OpenPkg = 185;
}

// MessageId: 29295 (Request)
message wns {
}

message n5s {
	int32 ItemId = 1;
	int32 count = 2;
	int32 IncrId = 3;
}

// MessageId: 20411 (Response)
message xns {
	bool zws = 27;
}

// MessageId: 15115 (Request)
message bns {
}

// MessageId: 25137 (Response)
message Bns {
	repeated n5s Zws = 137;
}

// MessageId: 23703 (Request)
message qns {
}

message ValidTimeItem {
	int32 Flag = 1;
	int32 count = 2;
	int32 IncrId = 3;
	int64 ExpireTime = 4;
}

// MessageId: 22343 (Response)
message Gns {
	repeated ValidTimeItem ItemList = 240;
}

// MessageId: 19742 (Notify)
message Ons {
	repeated ValidTimeItem ItemList = 188;
}

message RemoveValidTimeItem {
	int32 ItemId = 1;
	int32 IncrId = 2;
}

// MessageId: 15773 (Notify)
message ValidTimeItemRemoveNotify {
	repeated RemoveValidTimeItem ItemList = 160;
}

// MessageId: 24889 (Notify)
message ValidTimeItemAddNotify {
	repeated ValidTimeItem ItemList = 173;
	int32 Reason = 249;
}

message h5s {
	int32 roleId = 1;
	repeated ArrayIntInt BaseProp = 2;
	repeated ArrayIntInt AddProp = 3;
	Z6s Qws = 4;
}

// MessageId: 27414 (Request)
message zfs {
	repeated int32 RoleIds = 61;
}

// MessageId: 19349 (Response)
message Zfs {
	int32 Error = 227;
	repeated h5s exs = 150;
}

// MessageId: 16867 (Request)
message keh {
	int32 q9n = 108;
	int32 IncrId = 235;
}

// MessageId: 26415 (Response)
//message Oeh {
//	int32 errCode = 141;
//}

// MessageId: 26450 (Request)
message F_s {
}

// MessageId: 21436 (Response)
message V_s {
	int32 code = 49;
	repeated RoleInfo RoleList = 228;
}

// MessageId: 28965 (Notify)
message PbGetRoleListNotify {
	repeated RoleInfo RoleList = 168;
}

// MessageId: 26310 (Request)
message PbRoleActiveRequest {
	int32 roleId = 49;
}

// MessageId: 27549 (Response)
message PbRoleActiveResponse {
	int32 code = 191;
}

// MessageId: 20701 (Notify)
message PbRoleActiveNotify {
	RoleInfo Role = 99;
}

// MessageId: 18996 (Request)
message PbUpLevelRoleRequest {
	int32 roleId = 184;
	repeated ArrayIntInt ItemList = 67;
}

// MessageId: 28087 (Response)
message PbUpLevelRoleResponse {
	int32 code = 63;
	int32 roleId = 22;
	int32 Exp = 191;
	int32 Level = 44;
	map<int32, int32> ItemMap = 138;
}

// MessageId: 23217 (Request)
message PbOverRoleRequest {
	int32 roleId = 151;
}

// MessageId: 27433 (Response)
message PbOverRoleResponse {
	int32 code = 28;
	int32 roleId = 183;
	int32 Breakthrough = 161;
}

// MessageId: 21711 (Request)
message PbUpLevelSkillRequest {
	int32 roleId = 230;
	int32 SkillId = 92;
}

// MessageId: 20315 (Response)
message PbUpLevelSkillResponse {
	int32 code = 210;
	int32 roleId = 245;
	ArrayIntInt SkillInfo = 55;
}

// MessageId: 21692 (Request)
message PbUplevelStarRequest {
	int32 roleId = 4;
	int32 Star = 78;
}

// MessageId: 23068 (Response)
message PbUplevelStarResponse {
	int32 code = 65;
	int32 roleId = 117;
	int32 Star = 91;
}

// MessageId: 22280 (Request)
message PbChangeNameRequest {
	int32 roleId = 135;
	string Name = 130;
}

// MessageId: 23360 (Response)
message PbChangeNameResponse {
	int32 code = 109;
	int32 roleId = 7;
	string Name = 125;
}

// MessageId: 19273 (Notify)
message PbRolePropsNotify {
	int32 roleId = 193;
	repeated ArrayIntInt BaseProp = 225;
	repeated ArrayIntInt AddProp = 147;
}

// MessageId: 15694 (Request)
message PbRolePhantomRequest {
	int32 roleId = 164;
	int32 Pos = 33;
	int32 PhantomId = 35;
}

// MessageId: 19083 (Response)
message PbRolePhantomResponse {
	int32 code = 189;
	int32 roleId = 79;
	int32 Pos = 237;
	int32 PhantomId = 239;
}

message ArrayIntInt {
	int32 Key = 1;
	int32 Value = 2;
}

message ArrayIntDouble {
	int32 Key = 1;
	double Value = 2;
}

message ArraySkillNode {
	int32 SkillNodeId = 1;
	bool IsActive = 2;
	int32 SkillId = 3;
}

message ResonInfo {
	int32 ResonId = 1;
	bool Challenges = 2;
	int32 sxs = 3;
}

message RoleInfo {
	int32 roleId = 1;
	string Name = 2;
	int32 Level = 3;
	int32 Exp = 4;
	int32 Breakthrough = 5;
	repeated ArrayIntInt Skills = 6;
	repeated ArrayIntInt Phantom = 7;
	int32 Star = 8;
	int32 Favor = 10;
	repeated ResonInfo Reson = 11;
	int32 CurModel = 12;
	repeated int32 Models = 13;
	repeated ArrayIntInt BaseProp = 14;
	repeated ArrayIntInt AddProp = 15;
	uint32 CreateTime = 17;
	repeated ArraySkillNode SkillNodeState = 19;
	int32 ResonantChainGroupIndex = 20;
}

// MessageId: 28326 (Notify)
message PbRoleExpNotify {
	int32 roleId = 32;
	int32 Exp = 67;
	int32 Level = 179;
}

// MessageId: 21573 (Notify)
message PbRoleResonLockFinishNotify {
	int32 roleId = 8;
	int32 ResonId = 25;
}

// MessageId: 21892 (Notify)
message PbRoleScenePropsNotify {
	int32 roleId = 175;
	repeated ArrayIntInt BaseProp = 25;
	repeated ArrayIntInt AddProp = 132;
}

// MessageId: 25484 (Notify)
message PbRoleSkillLevelNotify {
	int32 roleId = 21;
	ArrayIntInt SkillInfo = 87;
}

message SkillEffect {
	int32 Level = 1;
	repeated OneSkillEffect EffectDescList = 3;
}

message OneSkillEffect {
	int32 Flag = 1;
	repeated string Desc = 3;
}

// MessageId: 19848 (Request)
message RoleLevelUpViewRequest {
	int32 roleId = 31;
	int32 MaxItemId = 60;
	repeated ArrayIntInt ItemList = 125;
}

// MessageId: 20610 (Response)
message RoleLevelUpViewResponse {
	int32 code = 126;
	int32 Level = 2;
	repeated ArrayIntInt LevelExpInfo = 71;
	int32 Exp = 89;
	int32 AddExp = 238;
	repeated ArrayIntDouble FinalProp = 181;
	repeated ArrayIntInt CostList = 92;
	repeated ArrayIntInt OverflowList = 239;
	repeated ArrayIntInt ItemList = 175;
}

// MessageId: 15774 (Request)
message RoleBreakThroughViewRequest {
	int32 roleId = 115;
}

// MessageId: 29489 (Response)
message RoleBreakThroughViewResponse {
	int32 code = 143;
	int32 LevelLimit = 62;
	int32 UnLockSkillId = 201;
	repeated ArrayIntInt CostList = 27;
	repeated ArrayIntInt RewardList = 213;
	repeated ArrayIntDouble FinalProp = 225;
	bool IsConditionFinish = 104;
}

// MessageId: 24683 (Request)
message RoleSkillLevelUpViewRequest {
	int32 roleId = 199;
	int32 SkillId = 40;
}

// MessageId: 22659 (Response)
message RoleSkillLevelUpViewResponse {
	int32 code = 252;
	repeated SkillEffect SkillEffectList = 126;
	repeated ArrayIntInt CostList = 181;
}

// MessageId: 17585 (Request)
message RoleSkillViewRequest {
	int32 roleId = 129;
	int32 SkillId = 255;
}

// MessageId: 17229 (Response)
message RoleSkillViewResponse {
	int32 code = 66;
	repeated SkillEffect SkillEffectList = 234;
	repeated SkillEffect PreSkillEffectList = 188;
	bool IsConditionFinish = 10;
}

// MessageId: 20591 (Notify)
message RoleChangeNameNotify {
	int32 roleId = 42;
	string Name = 123;
}

// MessageId: 18159 (Notify)
message RoleTrialOpenNotify {
	repeated int32 RoleIds = 37;
}

// MessageId: 28860 (Notify)
message RoleTrialCloseNotify {
	repeated int32 RoleIds = 168;
}

// MessageId: 23164 (Request)
message RoleActivateSkillRequest {
	int32 roleId = 195;
	int32 SkillNodeId = 12;
}

// MessageId: 24059 (Response)
message RoleActivateSkillResponse {
	int32 code = 177;
	int32 roleId = 219;
	ArrayIntInt SkillInfo = 56;
}

// MessageId: 16910 (Notify)
message RoleSkillNodeNotify {
	int32 roleId = 242;
	repeated ArraySkillNode SkillNodeState = 177;
}

// MessageId: 21156 (Request)
message ResonantChainUnlockRequest {
	int32 roleId = 35;
}

// MessageId: 29418 (Response)
message ResonantChainUnlockResponse {
	int32 errCode = 56;
	int32 roleId = 11;
	int32 ResonantChainGroupIndex = 94;
}

// MessageId: 15983 (Request)
message RoleSexChangeRequest {
	int32 Sex = 95;
}

// MessageId: 17264 (Response)
message RoleSexChangeResponse {
	ErrorCode ErrorCode = 3;
	int32 Sex = 214;
}

// MessageId: 24357 (Request)
message RoleElementChangeRequest {
	int32 ElementType = 110;
}

// MessageId: 24482 (Response)
message RoleElementChangeResponse {
	ErrorCode ErrorCode = 5;
}

// MessageId: 15327 (Notify)
message RoleChangeNotify {
	int32 SourceRoleId = 66;
	RoleInfo RoleInfo = 138;
}

// MessageId: 24633 (Notify)
message RoleChangeUnlockNotify {
	repeated int32 UnlockRoleIds = 211;
}

// MessageId: 25475 (Push)
message MaxMessageIdPush {
}

message ItemExchangeInfo {
	int32 ItemId = 1;
	int32 TodayTimes = 2;
	int32 TotalTimes = 3;
	int32 DailyLimit = 4;
	int32 TotalLimit = 5;
}

// MessageId: 28765 (Request)
message ItemExchangeInfoRequest {
}

// MessageId: 18051 (Response)
message ItemExchangeInfoResponse {
	repeated ItemExchangeInfo ItemExchangeInfos = 162;
}

// MessageId: 29011 (Request)
message ItemExchangeRequest {
	int32 ItemId = 12;
	int32 ExchangeTimes = 121;
}

// MessageId: 20145 (Response)
message ItemExchangeResponse {
	ErrorCode ErrorCode = 89;
	int32 ItemId = 254;
	int32 ItemCount = 122;
}

// MessageId: 23560 (Notify)
message EnterLevelPlayNotify {
	int32 Flag = 90;
	bool CanGetReward = 80;
	int32 State = 160;
}

// MessageId: 25876 (Notify)
message LeaveLevelPlayNotify {
	int32 Flag = 108;
}

message LevelPlayInfo {
	int32 Flag = 1;
	bool IsFirst = 2;
	int32 State = 3;
	int64 UpdateTime = 4;
	int32 GetRewardCount = 5;
}

// MessageId: 26838 (Notify)
message LevelPlayInfoNotify {
	repeated LevelPlayInfo LevelPlayInfo = 224;
}

// MessageId: 22319 (Notify)
message LevelPlayFirstNotify {
	int32 Flag = 61;
}

// MessageId: 17477 (Notify)
message LevelPlayStateNotify {
	int32 Flag = 214;
	int32 State = 14;
}

// MessageId: 24465 (Notify)
message LevelPlayOpenTimeNotify {
	int32 Flag = 208;
	int64 OpenTime = 240;
}

// MessageId: 23388 (Request)
message LevelPlayRewardRequest {
	int64 EntityId = 60;
}

// MessageId: 19965 (Response)
message LevelPlayRewardResponse {
	ErrorCode ErrorCode = 150;
}

message LevelPlayRewardInfo {
	int32 Flag = 1;
	bool GetReward = 2;
}

// MessageId: 22556 (Notify)
message LevelPlayRewardNotify {
	repeated LevelPlayRewardInfo LevelPlayRewards = 220;
}

// MessageId: 20757 (Notify)
message LevelPlayRewardCountResetNotify {
	repeated int32 LevelPlayIds = 178;
}

enum noh {
	noh_None = 0;
	noh_Ski = 1;
	noh_WingSuitFly = 2;
}

// MessageId: 16208 (Request)
message Seh {
	int32 n5a = 128;
	int32 s5a = 173;
}

// MessageId: 24511 (Response)
message yeh {
	ErrorCode ErrorCode = 203;
}

// MessageId: 21758 (Notify)
message Cth {
	int32 Flag = 150;
	int64 ResetTime = 10;
}

message LivenessInfo {
	int32 LivenessCount = 1;
	repeated int32 RewardedLiveness = 2;
	repeated LivenessTask Tasks = 3;
	int64 DayEnd = 4;
	int32 AreaId = 5;
}

message LivenessTask {
	int32 Flag = 1;
	int32 Current = 2;
	int32 Target = 3;
	bool IsFinished = 4;
	bool IsTaken = 5;
	bool bxs = 6;
}

// MessageId: 19636 (Request)
message LivenessRequest {
}

// MessageId: 16600 (Response)
message LivenessResponse {
	LivenessInfo LivenessInfo = 242;
}

// MessageId: 21130 (Notify)
message LivenessCountUpdateNotify {
	int32 LivenessCount = 5;
}

// MessageId: 29281 (Notify)
message LivenessUpdateNotify {
	LivenessInfo LivenessInfo = 115;
}

// MessageId: 22820 (Notify)
message LivenessRefreshNotify {
	LivenessInfo LivenessInfo = 113;
}

// MessageId: 22393 (Request)
message LivenessTaskTakeRequest {
	repeated int32 TaskIds = 187;
}

// MessageId: 23894 (Response)
message LivenessTaskTakeResponse {
	repeated int32 TaskIds = 23;
	ErrorCode ErrorCode = 123;
}

// MessageId: 24381 (Request)
message LivenessTakeRequest {
	repeated int32 Ids = 97;
}

// MessageId: 24166 (Response)
message LivenessTakeResponse {
	repeated int32 Ids = 108;
	ErrorCode ErrorCode = 18;
}

message LoadEquipData {
	int32 Pos = 1;
	int32 EquipIncID = 2;
}

message RoleLoadEquipData {
	int32 RoleID = 1;
	int32 Pos = 2;
	int32 EquipIncID = 3;
}

// MessageId: 27055 (Request)
message LoadEquipInfoRequest {
	int32 RoleID = 47;
}

// MessageId: 22299 (Response)
message LoadEquipInfoResponse {
	ErrorCode ErrorCode = 31;
	int32 RoleID = 90;
	repeated LoadEquipData EquipList = 115;
}

// MessageId: 22517 (Request)
message EquipTakeOnRequest {
	RoleLoadEquipData Data = 66;
}

// MessageId: 15941 (Response)
message EquipTakeOnResponse {
	ErrorCode ErrorCode = 40;
	repeated RoleLoadEquipData DataList = 240;
}

// MessageId: 22158 (Notify)
message EquipTakeOnNotify {
	repeated RoleLoadEquipData DataList = 239;
}

message AceBlackProductAccountInfo {
	string TdmDeviceId = 1;
	bool IsRoot = 2;
	bool IsSimulator = 3;
}

// MessageId: 101 (Request)
message CreateCharacterRequest {
	int32 Sex = 1;
	string Name = 2;
}

// MessageId: 102 (Response)
message CreateCharacterResponse {
	int32 code = 1;
	string Name = 2;
	int32 PlayerId = 3;
	int32 CreateTime = 4;
}

message e7n {
	int32 n7n = 1;
	string r7n = 2;
	int32 i7n = 3;
	string t7n = 4;
	string s7n = 5;
	string o7n = 6;
}

// MessageId: 103 (Request)
message LoginRequest {
	int32 Flag = 1;
	string Account = 2;
	string LoginTraceId = 3;
	string Token = 4;
	string AppVersion = 5;
	string LauncherVersion = 6;
	string ResourceVersion = 7;
	ClientBasicInfo ClientBasicInfo = 8;
	PublicResourceVersionInfo PublicResourceVersionInfo = 10;
	AceBlackProductAccountInfo AceBlackProductAccountInfo = 11;
	bool DevLoginCheckData = 12;
	string lea = 13;
	string DOLLARxa = 14;
	string Vxa = 15;
	string hwa = 16;
	string DOLLARNa = 17;
	oneof p5s {
		e7n e7n = 9;
	}

}

// MessageId: 104 (Response)
message LoginResponse {
	int32 code = 1;
	string ReconnectToken = 3;
	int64 Timestamp = 8;
	string Platform = 9;
	int32 ClientWaitingMode = 10;
	int32 ClientWaitingTime = 11;
	int32 ClientAutoInInterval = 12;
	int32 ClientDisplayTime = 13;
}


// MessageId: 105 (Request)
message EnterGameRequest {
	int32 SingleInstanceId = 1;
	int32 MultiInstanceId = 2;
	int32 Mode = 3;
	Vector Pos = 4;
}

// MessageId: 106 (Response)
message EnterGameResponse {
	int32 code = 1;
	int32 ClientWaitingMode = 2;
	int32 ClientWaitingTime = 3;
	int32 ClientAutoInInterval = 4;
}

// MessageId: 107 (Request)
message ReconnectRequest {
	int32 PlayerId = 1;
	int32 LastSvrSeqNo = 2;
	string ReconnectToken = 3;
	string ReconnectTraceId = 4;
}

// MessageId: 108 (Response)
message ReconnectResponse {
	ErrorCode ErrorCode = 1;
	int32 LastRecvSeqNo = 3;
	int64 Timestamp = 4;
	bool IsPermittedSilentLogin = 5;
}

// MessageId: 109 (Notify)
message LoginNotify {
	int32 Flag = 1;
}

// MessageId: 110 (Notify)
message LogoutNotify {
	oneof M5s {
		BanLogoutInfo banInfo = 3;
	}

	int32 code = 1;
	int32 logoutReason = 2;
}

// MessageId: 111 (Request)
message ProtoKeyRequest {
	bool IsLogin = 1;
	string TraceId = 2;
}

// MessageId: 112 (Response)
message ProtoKeyResponse {
	int32 code = 1;
	int32 type = 2;
	bytes Key = 3;
}

// MessageId: 113 (Notify)
message PushDataCompleteNotify {
}

// MessageId: 114 (Push)
message ExitGamePush {
}

// MessageId: 116 (Push)
message Roa {
	string AppVersion = 1;
	string LauncherVersion = 2;
	string ResourceVersion = 3;
}

// MessageId: 115 (Notify)
message Xha {
}

message PublicResourceVersionInfo {
	int32 PublicJsonVersion = 1;
	int32 PublicMiscVersion = 2;
	int32 PublicUniverseEditorVersion = 3;
}

// MessageId: 27904 (Request)
message CheckPublicResourceVersionRequest {
	PublicResourceVersionInfo PublicResourceVersionInfo = 95;
}

// MessageId: 29988 (Response)
message CheckPublicResourceVersionResponse {
	int32 ErrorId = 103;
	int32 TipLevel = 201;
}

// MessageId: 29019 (Request)
message LordGymInfoRequest {
}

// MessageId: 22438 (Response)
message LordGymInfoResponse {
	repeated int32 UnlockLoadGymIds = 223;
	repeated int32 ReadLoadGymIds = 65;
	repeated LordGymPassRecord LordGymPassRecords = 232;
}

message RoleBrief {
	int32 roleId = 1;
	int32 Level = 2;
}

message LordGymPassRecord {
	int32 LoadGymId = 1;
	int32 PassTime = 2;
	repeated RoleBrief RoleIds = 3;
}

// MessageId: 16838 (Notify)
message LordGymUnlockNotify {
	repeated int32 UnlockLoadGymIds = 188;
}

// MessageId: 19459 (Request)
message LordGymBeginRequest {
	int32 LoadGymId = 107;
}

// MessageId: 20928 (Response)
message LordGymBeginResponse {
	ErrorCode ErrorCode = 205;
}

// MessageId: 25823 (Request)
message LordGymReadRequest {
	int32 LoadGymId = 57;
}

// MessageId: 20123 (Response)
message LordGymReadResponse {
	ErrorCode ErrorCode = 16;
}

message ItemData {
	int32 ItemId = 1;
	int32 ItemIncId = 2;
	int32 count = 3;
}

// MessageId: 15920 (Notify)
message LordGymLevelPlayResultNotify {
	bool IsSuccess = 137;
	bool IsNewRecord = 236;
	LordGymPassRecord LordGymPassRecord = 242;
	repeated ItemData ItemDatas = 51;
}

enum MailLevel {
	MailLevel_None = 0;
	MailLevel_General = 1;
	MailLevel_Important = 2;
}

enum MailDeleteReason {
	MailDeleteReason_OverTime = 0;
	MailDeleteReason_OverSize = 1;
	MailDeleteReason_OfflineEvent = 2;
	MailDeleteReason_PublicCancelled = 3;
	MailDeleteReason_PlayerDelete = 4;
}

message PbMailAttachment {
	int32 Flag = 1;
	int32 count = 2;
}

message PbMailInfo {
	string Flag = 1;
	int64 ReceivedTime = 2;
	int64 ReadTime = 3;
	int32 State = 4;
	int32 Level = 5;
	string Title = 6;
	string Content = 7;
	string Sender = 8;
	int32 ValidTime = 9;
	int32 ReadValidTime = 10;
	repeated PbMailAttachment Attachments = 11;
	int32 ConfigId = 12;
}

// MessageId: 27328 (Notify)
message MailInfosNotify {
	repeated PbMailInfo MailInfos = 75;
}

// MessageId: 19023 (Notify)
message MailDeleteNotify {
	string Flag = 248;
	int32 Reason = 240;
}

enum MailAddReason {
	MailAddReason_Gm = 0;
	MailAddReason_BagFull = 1;
	MailAddReason_Public = 2;
	MailAddReason_OfflineEventAdd = 3;
	MailAddReason_QuestNpcAction = 4;
	MailAddReason_D5s = 5;
	MailAddReason_ReportPlayer = 6;
	MailAddReason_MonthCardRemind = 7;
	MailAddReason_BattlePassSettle = 8;
	MailAddReason_PayRebate = 9;
	MailAddReason_RemoveTemporaryTeleportBySceneDataLayerChange = 10;
	MailAddReason_R8n = 11;
	MailAddReason_PayRefund = 12;
	MailAddReason_Replenishment = 13;
	MailAddReason_GatherActivitySettle = 14;
	MailAddReason_HarvestActivitySettle = 15;
	MailAddReason_RoleTrialActivitySettle = 16;
	MailAddReason_KuroBbsFirstBind = 17;
	MailAddReason_ParkourActivitySettle = 18;
	MailAddReason_DailyAdventureActivitySettle = 19;
	MailAddReason_LongShanActivitySettle = 20;
	MailAddReason_SignActivitySettle = 21;
	MailAddReason_BossRushActivitySettle = 22;
	MailAddReason_PromotionActivity = 23;
	MailAddReason_RogueActivitySettle = 24;
	MailAddReason_TowerDefenceActivitySettle = 25;
	MailAddReason_ExploreToolUnlock = 26;
	MailAddReason_CalabashFixLevelExp = 27;
	MailAddReason_ActivityNotice = 28;
	MailAddReason_TrackMoonPhaseSettle = 29;
	MailAddReason_TrackMoonSettle = 30;
	MailAddReason_CircumFluenceSettle = 31;
	MailAddReason_CorniceMeetingActivitySettle = 32;
	MailAddReason_RiskHarvestSettle = 33;
	MailAddReason_BlackCoastThemeSettle = 34;
}

// MessageId: 23878 (Notify)
message MailAddNotify {
	PbMailInfo NewMail = 55;
	int32 Reason = 95;
}

// MessageId: 24070 (Request)
message MailReadRequest {
	string Flag = 179;
}

// MessageId: 25059 (Response)
message MailReadResponse {
	string Flag = 101;
	int32 State = 209;
	ErrorCode ErrorCode = 156;
	int64 ReadTime = 121;
}

// MessageId: 25674 (Request)
message MailGetAttachmentRequest {
	repeated string MailIds = 19;
}

// MessageId: 24642 (Response)
message MailGetAttachmentResponse {
	map<string, int32> SuccessIdMap = 82;
	ErrorCode ErrorCode = 97;
}

// MessageId: 16949 (Request)
message MailDeleteRequest {
	repeated string MailIds = 228;
}

// MessageId: 24081 (Response)
message MailDeleteResponse {
	repeated string SuccessIds = 7;
	ErrorCode ErrorCode = 30;
}

message MarkPointInfo {
	float PosX = 1;
	float PosY = 2;
	float PosZ = 3;
	int32 ConfigId = 4;
	int32 MarkId = 5;
	int32 IsTrace = 6;
	int32 MarkType = 7;
	int32 MapId = 8;
	bool Lrh = 9;
}

message MarkPointRequestInfo {
	float PosX = 1;
	float PosY = 2;
	float PosZ = 3;
	int32 ConfigId = 4;
	int32 MarkType = 5;
	bool MarkInfo = 6;
	int32 IsTrace = 7;
	int32 MapId = 8;
}

message TreasureBoxParam {
	repeated MarkPointRequestInfo TreasureBox = 1;
	int64 DetectionSlotId = 2;
}

message A5s {
	repeated MarkPointInfo MarkPointInfo = 1;
}

message soh {
	repeated MarkPointInfo MarkPointInfo = 1;
}

// MessageId: 24867 (Request)
message MapMarkInfoRequest {
}

// MessageId: 23211 (Response)
message MapMarkInfoResponse {
	ErrorCode ErrorCode = 127;
	repeated MarkPointInfo InfoList = 59;
	repeated MapMarkShowInfo ShowMarkIds = 213;
}

// MessageId: 25829 (Request)
message MapUnlockFieldInfoRequest {
}

// MessageId: 22201 (Response)
message MapUnlockFieldInfoResponse {
	ErrorCode ErrorCode = 255;
	repeated int32 FieldId = 215;
}

enum MapMarkShowFlag {
	MapMarkShowFlag_Hide = 0;
	MapMarkShowFlag_ShowNormal = 1;
	MapMarkShowFlag_ShowDisable = 2;
}

message MapMarkShowInfo {
	int32 MarkId = 1;
	bool IsShow = 2;
	uint32 ShowFlag = 3;
}

// MessageId: 25887 (Notify)
message MapMarkShowIdInfoUpdateNotify {
	int32 MarkId = 97;
	bool IsShow = 203;
	bool NeedFocus = 69;
	uint32 ShowFlag = 127;
}

// MessageId: 28590 (Notify)
message Pth {
	int32 MarkId = 143;
	bool Lrh = 20;
}

message TemporaryTeleportParam {
	int64 temporaryTeleportId = 1;
}

message w5s {
	enum ENUMS {
		ENUMS_None = 0;
		ENUMS_Custom = 1;
		ENUMS_aTs = 2;
		ENUMS_Building = 3;
		ENUMS_TemporaryTeleport = 4;
		ENUMS_SoundBox = 5;
		ENUMS_O7n = 6;
		ENUMS_TreasureBoxPoint = 7;
		ENUMS_CalmingWindBell = 8;
		ENUMS_EnrichmentArea = 9;
		ENUMS_EnrichmentAreaChild = 10;
	}


}

// MessageId: 19676 (Request)
message MapMarkRequest {
	oneof Params {
		TemporaryTeleportParam TemporaryTeleportParam = 125;
		TreasureBoxParam TreasureBoxParam = 70;
	}

	MarkPointRequestInfo MarkPointRequestInfo = 237;
}

// MessageId: 26188 (Response)
message zss {
	ErrorCode ErrorCode = 227;
	MarkPointInfo Info = 73;
}

// MessageId: 23940 (Request)
message Zss {
	repeated int32 EOa = 144;
}

// MessageId: 15117 (Response)
message eas {
	ErrorCode ErrorCode = 230;
	repeated int32 EOa = 33;
}

// MessageId: 27312 (Notify)
message MapUnlockFieldNotify {
	int32 FieldId = 164;
}

// MessageId: 15424 (Request)
message MapTraceInfoRequest {
}

// MessageId: 20901 (Response)
message MapTraceInfoResponse {
	ErrorCode ErrorCode = 183;
	repeated int32 MarkIdList = 86;
}

// MessageId: 19027 (Request)
message MapTraceRequest {
	int32 MarkId = 162;
}

// MessageId: 26444 (Response)
message MapTraceResponse {
	ErrorCode ErrorCode = 187;
	int32 MarkId = 39;
}

// MessageId: 26461 (Request)
message MapCancelTraceRequest {
	int32 MarkId = 12;
}

// MessageId: 21516 (Response)
message MapCancelTraceResponse {
	ErrorCode ErrorCode = 125;
	int32 MarkId = 110;
}

// MessageId: 21854 (Request)
message MapReplaceMarkRequest {
	int32 MarkId = 61;
	int32 ConfigId = 137;
}

// MessageId: 25364 (Response)
message MapReplaceMarkResponse {
	ErrorCode ErrorCode = 111;
	int32 MarkId = 24;
	int32 ConfigId = 104;
}

// MessageId: 28852 (Notify)
message uas {
	int32 MarkId = 98;
}

// MessageId: 27194 (Notify)
message cas {
	int32 MarkId = 8;
}

// MessageId: 25781 (Request)
message das {
	int32 MarkType = 239;
}

// MessageId: 16308 (Response)
message mas {
	ErrorCode ErrorCode = 77;
	repeated int32 MarkIdList = 2;
}

// MessageId: 15157 (Notify)
message MapMarkInfoNotify {
	repeated MarkPointInfo InfoList = 51;
	repeated MapMarkShowInfo ShowMarkIds = 177;
	repeated int32 UnlockMarkIds = 92;
}

// MessageId: 19835 (Notify)
message gas {
	int32 MarkId = 230;
}

enum MapOpenType {
	MapOpenType_HotKey = 0;
	MapOpenType_Mouse = 1;
	MapOpenType_Other = 2;
}

// MessageId: 20514 (Push)
message MapOpenPush {
	int32 OpenType = 68;
}

// MessageId: 22344 (Request)
message vas {
	int32 MarkId = 113;
	Vector Pos = 102;
}

// MessageId: 27721 (Response)
message pas {
	ErrorCode ErrorCode = 247;
}

// MessageId: 20468 (Notify)
message Mas {
	repeated int32 EOa = 28;
}

// MessageId: 27466 (Notify)
message Sas {
	MarkPointInfo Info = 192;
	A5s pbs = 5;
	soh Rrh = 249;
}

// MessageId: 18695 (Notify)
message Lgs {
	repeated int32 Mbs = 92;
	repeated int32 Sbs = 24;
}

// MessageId: 28539 (Notify)
message Rgs {
	repeated int32 Sbs = 166;
}

// MessageId: 16666 (Notify)
message Dgs {
	repeated int32 Mbs = 146;
}

// MessageId: 20976 (Request)
message Weh {
	int32 ItemId = 68;
}

// MessageId: 24122 (Response)
message Qeh {
	ErrorCode ErrorCode = 221;
}

enum MatchFailReason {
	MatchFailReason_TimeOut = 0;
	MatchFailReason_NotAccept = 1;
	MatchFailReason_ServerError = 2;
}

enum MatchTeamState {
	MatchTeamState_WaiteConfirm = 0;
	MatchTeamState_ReadyConfirm = 1;
	MatchTeamState_EnterInst = 2;
	MatchTeamState_EnterInstStart = 3;
}

enum MatchPlayerLeaveReason {
	MatchPlayerLeaveReason_NotConfirm = 0;
	MatchPlayerLeaveReason_Refuse = 1;
	MatchPlayerLeaveReason_Initiative = 2;
	MatchPlayerLeaveReason_BeKick = 3;
	MatchPlayerLeaveReason_HostLeave = 4;
	MatchPlayerLeaveReason_EnterInstance = 5;
	MatchPlayerLeaveReason_MatchServerDisable = 6;
	MatchPlayerLeaveReason_MatchGM = 7;
	MatchPlayerLeaveReason_EnterBigWorldInst = 8;
	MatchPlayerLeaveReason_EnableFunction = 9;
}

enum EMatchPlayerUiState {
	EMatchPlayerUiState_Wait = 0;
	EMatchPlayerUiState_Confirm = 2;
	EMatchPlayerUiState_Matching = 3;
	EMatchPlayerUiState_hTs = 4;
	EMatchPlayerUiState_Selecting = 5;
	EMatchPlayerUiState_Teleporting = 6;
	EMatchPlayerUiState_Max = 7;
}

enum aoh {
	aoh_Accept = 0;
	aoh_ActiveRefuse = 1;
	aoh_TimeOutRefuse = 2;
}

// MessageId: 16077 (Request)
message Eas {
	int32 InstId = 191;
	bool U9n = 36;
	int32 A9n = 48;
}

// MessageId: 29707 (Response)
message yas {
	ErrorCode ErrorCode = 52;
}

// MessageId: 17345 (Notify)
message Ias {
	int32 InstId = 255;
}

// MessageId: 16092 (Request)
message Tas {
}

// MessageId: 16794 (Response)
message Las {
	ErrorCode ErrorCode = 153;
}

// MessageId: 15471 (Notify)
message Ras {
	int32 PlayerId = 162;
}

// MessageId: 21725 (Notify)
message Das {
	int32 Reason = 246;
}

message O5s {
	int32 roleId = 1;
	int32 RoleLevel = 2;
	int32 Tzs = 3;
}

message k5s {
	int32 PlayerId = 1;
	repeated O5s RoleInfo = 2;
	string PlayerName = 3;
	bool ybs = 4;
	bool D9n = 5;
	int32 w9n = 6;
	string Vxa = 7;
}

message N5s {
	int32 HostId = 1;
	repeated k5s PlayerInfos = 2;
	int32 TeamState = 3;
	Vector Location = 4;
	Rotator Rotation = 5;
}

// MessageId: 24628 (Notify)
message Aas {
	N5s Ibs = 162;
}

// MessageId: 28206 (Request)
message Pas {
	bool R9n = 246;
}

// MessageId: 29261 (Response)
message Uas {
	ErrorCode ErrorCode = 7;
}

// MessageId: 24505 (Notify)
message was {
	int32 Tbs = 98;
}

// MessageId: 21443 (Notify)
message xas {
}

// MessageId: 17349 (Notify)
message MatchTeamStateNotify {
	int32 TeamState = 252;
}

// MessageId: 21170 (Request)
message Bas {
	repeated int32 roleId = 85;
	repeated int32 Tzs = 55;
}

// MessageId: 22788 (Response)
message qas {
	ErrorCode ErrorCode = 172;
}

// MessageId: 18798 (Notify)
message Gas {
	int32 PlayerId = 255;
	repeated O5s RoleInfo = 175;
}

// MessageId: 23005 (Request)
message Oas {
	bool D9n = 203;
}

// MessageId: 29220 (Response)
message kas {
	ErrorCode ErrorCode = 151;
}

// MessageId: 29811 (Notify)
message Nas {
	int32 PlayerId = 106;
	bool D9n = 159;
}

// MessageId: 20718 (Request)
message Fas {
}

// MessageId: 18194 (Response)
message Vas {
	ErrorCode ErrorCode = 128;
}

// MessageId: 20011 (Notify)
message DOLLARas {
	int32 PlayerId = 22;
	int32 LeaveReason = 226;
}

// MessageId: 19712 (Notify)
message jas {
	k5s PlayerInfo = 252;
}

// MessageId: 17031 (Request)
message Was {
	int32 PlayerId = 96;
}

// MessageId: 28492 (Response)
message Kas {
	ErrorCode ErrorCode = 132;
}

// MessageId: 24686 (Request)
message SetMatchTeamMatchFlagRequest {
	bool IsMatch = 225;
}

// MessageId: 15982 (Response)
message SetMatchTeamMatchFlagResponse {
	ErrorCode ErrorCode = 116;
}

// MessageId: 18085 (Notify)
message TeamMatchFlagNotify {
	bool MatchFlag = 125;
	int32 InstId = 157;
}

// MessageId: 20638 (Request)
message Jas {
}

// MessageId: 25219 (Response)
message zas {
	ErrorCode ErrorCode = 63;
}

// MessageId: 23740 (Request)
message Zas {
	int32 InstId = 68;
	bool U9n = 49;
	int32 A9n = 45;
}

// MessageId: 15624 (Response)
message ehs {
	ErrorCode ErrorCode = 158;
}

// MessageId: 26812 (Request)
message ths {
	int32 InstId = 62;
}

// MessageId: 23852 (Response)
message ihs {
	ErrorCode ErrorCode = 25;
}

// MessageId: 29420 (Notify)
message TeamMatchInviteNotify {
	int32 HostId = 58;
	int32 InstId = 189;
}

// MessageId: 18477 (Request)
message ohs {
	int32 mIa = 160;
	int32 HostId = 97;
	int32 InstId = 153;
}

// MessageId: 27437 (Response)
message nhs {
	ErrorCode ErrorCode = 168;
}

// MessageId: 29587 (Notify)
message shs {
	int32 mIa = 9;
	int32 PlayerId = 201;
}

// MessageId: 20102 (Request)
message ahs {
	int32 w9n = 88;
}

// MessageId: 27560 (Response)
message hhs {
	ErrorCode ErrorCode = 38;
}

// MessageId: 20682 (Notify)
message lhs {
	int32 PlayerId = 229;
	int32 w9n = 241;
}

// MessageId: 25625 (Notify)
message MessageDecodeFailNotify {
	int32 code = 154;
	uint32 Conv = 92;
	string ChannelId = 212;
	int32 SeqNo = 124;
}

// MessageId: 29042 (Notify)
message fhs {
	MonsterGachaDataPb MonsterGachaDataPb = 228;
}

// MessageId: 21219 (Request)
message MonthCardRequest {
}

// MessageId: 17769 (Response)
message MonthCardResponse {
	int32 Days = 132;
	bool IsDailyGot = 231;
	ErrorCode ErrorCode = 11;
}

// MessageId: 25148 (Notify)
message MonthCardDailyRewardNotify {
	int32 ItemId = 135;
	int32 count = 58;
	int32 Days = 247;
}

// MessageId: 18244 (Notify)
message MonthCardUseNotify {
	int32 ItemId = 34;
	int32 count = 67;
	int32 Days = 155;
	int32 DailyRewardItemId = 176;
	int32 DailyRewardItemCount = 15;
	int32 ExtendedDays = 32;
}

message MutiplayerInfo {
	int32 PlayerId = 1;
	string Name = 2;
	int32 IconId = 3;
	int32 Level = 4;
	string GuildName = 5;
	string GuildIntro = 6;
}

// MessageId: 27990 (Request)
message Ehs {
}

// MessageId: 28473 (Response)
message MutiplayerTeamRefreshNearListResponse {
	ErrorCode ErrorCode = 44;
	int32 NextRefreshTime = 86;
	repeated MutiplayerInfo InfoList = 127;
	repeated string ErrorParams = 96;
}

//message V5s {
//	double qbs = 1;
//	float Gbs = 2;
//	int32 Obs = 3;
//	sint32 kbs = 4;
//	uint32 Nbs = 5;
//	int64 Fbs = 6;
//	sint64 Vbs = 7;
//	uint64 DOLLARbs = 8;
//	fixed32 Hbs = 9;
//	fixed64 jbs = 10;
//	sfixed32 Wbs = 11;
//	sfixed64 Kbs = 12;
//	bool Qbs = 13;
//	string Xbs = 14;
//	bytes Ybs = 15;
//}

// MessageId: 20777 (Push)
//message Ihs {
//	V5s Data = 188;
//}

// MessageId: 21018 (Notify)
//message Ths {
//	V5s Data = 26;
//}

// MessageId: 16929 (Request)
//message Lhs {
//	V5s Data = 236;
//}

// MessageId: 25135 (Response)
//message Rhs {
//	V5s Data = 234;
//}

// MessageId: 26420 (Notify)
message Dhs {
	repeated int32 HadTakeReward = 94;
}

// MessageId: 22195 (Request)
message Ahs {
	int32 Level = 111;
}

// MessageId: 19281 (Response)
message Phs {
	ErrorCode ErrorCode = 196;
}

//message eBs {
//	int32 Jbs = 1;
//	bool zbs = 2;
//	bool Zbs = 3;
//}

// MessageId: 18237 (Request)
message Uhs {
	repeated int32 TaskIds = 187;
}

// MessageId: 26176 (Response)
//message whs {
//	repeated eBs eBs = 33;
//}

message DOLLAR5s {
	int32 ChallengeId = 1;
	int32 tBs = 3;
	int32 iBs = 4;
	repeated int32 rBs = 5;
}

// MessageId: 29559 (Request)
message xhs {
}

// MessageId: 26047 (Response)
message bhs {
	repeated DOLLAR5s Challenges = 25;
	repeated int32 oBs = 231;
}

// MessageId: 27971 (Notify)
message ParkourChallengeOpenNotify {
	int32 ChallengeId = 38;
	bool Challenges = 65;
}

// MessageId: 24176 (Request)
message ParkourChallengeTakeRequest {
	int32 ChallengeId = 53;
	int32 ScoreIndex = 76;
}

// MessageId: 18368 (Response)
message Ghs {
	ErrorCode ErrorCode = 234;
	map<int32, int32> Rewards = 135;
}

// MessageId: 18944 (Notify)
message ParkourChallengeEndNotify {
	int32 ChallengeId = 94;
	int32 Score = 105;
	int32 Duration = 100;
	bool IsComplete = 61;
}

// MessageId: 18700 (Request)
message ParkourChallengeTransRequest {
	int32 ChallengeId = 175;
}

// MessageId: 17806 (Response)
message ParkourChallengeTransResponse {
	ErrorCode ErrorCode = 173;
}

message PayItemInfo {
	int32 Flag = 1;
	int32 PayId = 2;
	int32 ItemId = 3;
	int32 ItemCount = 4;
	int32 BonusItemCount = 5;
	int32 SpecialBonusItemCount = 6;
	bool CanSpecialBonus = 7;
	string StageImage = 8;
	string ProductId = 9;
	string Amount = 10;
}

message PayGiftInfo {
	int32 Flag = 1;
	int32 PayId = 2;
	int32 ItemId = 3;
	int32 ItemCount = 4;
	int32 Sort = 5;
	int32 BuyLimit = 6;
	int32 BoughtCount = 7;
	string StageImage = 8;
	int64 BeginTime = 9;
	int64 EndTime = 10;
	string ProductId = 11;
	string Amount = 12;
	int32 TabId = 13;
	int32 type = 14;
	bool Locked = 15;
	bool Arh = 16;
	bool Drh = 17;
	int32 wrh = 18;
}

// MessageId: 24911 (Request)
message PayInfoRequest {
	string Version = 175;
}

// MessageId: 21666 (Response)
message PayInfoResponse {
	repeated PayItemInfo Infos = 225;
	string Version = 132;
	ErrorCode ErrorCode = 145;
}

// MessageId: 27232 (Request)
message Whs {
	int32 Flag = 137;
	string Version = 162;
}

// MessageId: 27626 (Response)
message Khs {
	string ReceiptId = 158;
	ErrorCode ErrorCode = 252;
	string gBs = 132;
}

// MessageId: 20497 (Notify)
message PayItemSuccessNotify {
	int32 Flag = 81;
	string ReceiptId = 176;
	int32 ItemId = 211;
	int32 ItemCount = 255;
}

// MessageId: 24533 (Notify)
message Xhs {
	repeated int32 Ids = 157;
}

// MessageId: 23556 (Request)
message PayGiftInfoRequest {
	string Version = 133;
}

// MessageId: 18472 (Response)
message PayGiftInfoResponse {
	repeated PayGiftInfo Infos = 22;
	string Version = 103;
	ErrorCode ErrorCode = 170;
}

// MessageId: 18906 (Request)
message zhs {
	int32 Flag = 156;
	string Version = 69;
}

// MessageId: 21352 (Response)
message Zhs {
	string ReceiptId = 238;
	ErrorCode ErrorCode = 237;
	string gBs = 81;
}

// MessageId: 19970 (Notify)
message PayGiftSuccessNotify {
	int32 Flag = 208;
	string ReceiptId = 167;
	int32 ItemId = 105;
	int32 ItemCount = 223;
	PayGiftInfo PayGiftInfo = 75;
}

// MessageId: 19071 (Notify)
message Uth {
	repeated PayGiftInfo Gifts = 190;
}

enum PayShopUpdateType {
	PayShopUpdateType_None = 0;
	PayShopUpdateType_Daily = 1;
	PayShopUpdateType_Weekly = 2;
	PayShopUpdateType_Monthly = 3;
	PayShopUpdateType_Forever = 4;
}

message PayShopPrice {
	int32 Flag = 1;
	int32 count = 2;
	int32 PromotionCount = 3;
}

enum PayShopItemType {
	PayShopItemType_Normal = 0;
	PayShopItemType_Direct = 1;
}

message PayShopItem {
	int32 Flag = 1;
	int32 ItemId = 3;
	int32 ItemCount = 4;
	bool Locked = 5;
	int32 BuyLimit = 6;
	int32 BoughtCount = 7;
	PayShopPrice Price = 8;
	int64 BeginTime = 9;
	int64 EndTime = 10;
	int64 BeginPromotionTime = 11;
	int64 EndPromotionTime = 12;
	int32 UpdateType = 13;
	int64 UpdateTime = 14;
	int32 ShopItemType = 15;
	int64 TagBeginTime = 17;
	int64 TagEndTime = 18;
	bool CanBuyGoods = 22;
	bool Drh = 23;
}

message PayShopInfo {
	int32 Flag = 1;
	repeated PayShopItem Items = 2;
	int64 UpdateTime = 3;
}

message PayGiftShopInfo {
	repeated PayGiftInfo Gifts = 1;
	string Version = 2;
}

// MessageId: 16585 (Notify)
message PayShopInfoNotify {
	repeated PayShopInfo Infos = 201;
	string Version = 129;
	PayGiftShopInfo PayGiftShopInfo = 173;
}

// MessageId: 22097 (Request)
message PayShopInfoRequest {
	string Version = 131;
}

// MessageId: 26863 (Response)
message PayShopInfoResponse {
	repeated PayShopInfo Infos = 32;
	string Version = 175;
	ErrorCode ErrorCode = 254;
	PayGiftShopInfo PayGiftShopInfo = 251;
}

// MessageId: 28448 (Request)
message PayShopUpdateRequest {
	int32 Flag = 194;
}

// MessageId: 28760 (Response)
message PayShopUpdateResponse {
	PayShopInfo Info = 170;
	ErrorCode ErrorCode = 220;
}

// MessageId: 15889 (Request)
message PayShopItemUpdateRequest {
	repeated int32 Q7n = 152;
}

// MessageId: 16017 (Response)
message PayShopItemUpdateResponse {
	repeated PayShopItem Items = 74;
	ErrorCode ErrorCode = 253;
}

// MessageId: 23149 (Request)
message PayShopBuyRequest {
	int32 Flag = 240;
	int32 count = 99;
	string Version = 58;
}

// MessageId: 20193 (Response)
message PayShopBuyResponse {
	int32 Flag = 79;
	int32 count = 115;
	ErrorCode ErrorCode = 186;
}

// MessageId: 18139 (Notify)
message _ls {
	repeated int32 ABs = 72;
}

// MessageId: 18201 (Request)
message uls {
	int32 Flag = 241;
	string Version = 83;
}

// MessageId: 24032 (Response)
message cls {
	string ReceiptId = 29;
	ErrorCode ErrorCode = 92;
	string gBs = 4;
}

// MessageId: 18502 (Notify)
message PayShopDirectBuyNotify {
	string ReceiptId = 111;
	int32 ShopItemId = 117;
	int32 ItemId = 44;
	int32 ItemCount = 195;
}

// MessageId: 25931 (Notify)
message PayShopConditionFinishNotify {
	repeated PayShopItem Items = 53;
}

message Y5s {
	int32 IncId = 1;
	int32 count = 2;
	int32 ItemId = 3;
}

// MessageId: 23584 (Request)
message PhantomLevelUpRequest {
	int32 IncId = 102;
	repeated Y5s ConsumeList = 145;
}

// MessageId: 15549 (Response)
message PhantomLevelUpResponse {
	ErrorCode ErrorCode = 88;
	PhantomItem UpdateInfo = 240;
	map<int32, int32> ItemMap = 187;
}

// MessageId: 28202 (Notify)
message fls {
	repeated z6s Gws = 46;
}

// MessageId: 24018 (Request)
message PhantomPutOnRequest {
	int32 IncId = 142;
	int32 roleId = 157;
	int32 Pos = 134;
}

// MessageId: 21592 (Response)
message PhantomPutOnResponse {
	ErrorCode ErrorCode = 73;
	repeated z6s UBs = 85;
}

// MessageId: 25952 (Request)
message Mls {
	repeated int32 eHn = 64;
}

// MessageId: 21258 (Response)
message Sls {
	ErrorCode ErrorCode = 40;
	map<int32, int32> ItemMap = 126;
}

// MessageId: 19081 (Request)
message Els {
	repeated int32 eHn = 165;
}

// MessageId: 20495 (Response)
message yls {
	ErrorCode ErrorCode = 224;
	map<int32, int32> ItemMap = 28;
}

// MessageId: 18222 (Request)
message PhantomRecommendRequest {
	int32 roleId = 10;
}

// MessageId: 29950 (Response)
message PhantomRecommendResponse {
	ErrorCode ErrorCode = 59;
	int32 roleId = 255;
	repeated int32 MonsterIdList = 219;
	int32 MainPropId = 110;
	int32 FetterGroupId = 27;
}

// MessageId: 26714 (Request)
message Lls {
	int32 roleId = 4;
	repeated int32 eHn = 40;
}

// MessageId: 22061 (Response)
message Rls {
	ErrorCode ErrorCode = 191;
	repeated z6s UBs = 72;
}

// MessageId: 23097 (Notify)
message PhantomItemUpdateNotify {
	repeated PhantomItem UpdateInfo = 41;
}

// MessageId: 29161 (Notify)
message Als {
	repeated Z6s Ows = 200;
}

// MessageId: 27978 (Request)
message PhantomIdentifyRequest {
	int32 IncrId = 241;
	int32 count = 199;
}

// MessageId: 23962 (Response)
message PhantomIdentifyResponse {
	ErrorCode ErrorCode = 99;
	PhantomItem UpdateInfo = 140;
}

// MessageId: 17410 (Notify)
message wls {
	int32 kws = 253;
}

// MessageId: 16503 (Notify)
message xls {
	repeated int32 bBs = 115;
}

// MessageId: 29426 (Request)
message PhantomSkinChangeRequest {
	int32 IncrId = 231;
	int32 SkinId = 224;
	bool ChangeDefault = 135;
}

// MessageId: 26397 (Response)
message PhantomSkinChangeResponse {
	ErrorCode ErrorCode = 242;
}

// MessageId: 20147 (Notify)
message qls {
	repeated int32 BBs = 18;
	repeated int32 qBs = 133;
}

// MessageId: 18476 (Request)
message PhantomRefiningRequest {
	repeated int32 A8n = 87;
}

// MessageId: 15959 (Response)
message PhantomRefiningResponse {
	ErrorCode ErrorCode = 213;
	repeated AddCountItemInfo Items = 185;
	repeated AddCountItemInfo GBs = 60;
	repeated PhantomItem OBs = 57;
}

// MessageId: 20511 (Request)
message Geh {
	repeated int32 A8n = 187;
}

// MessageId: 18716 (Response)
message Neh {
	ErrorCode ErrorCode = 48;
	repeated AddCountItemInfo Items = 196;
	repeated AddCountItemInfo GBs = 252;
	repeated PhantomItem OBs = 183;
}

message J5s {
	int32 Id = 1;
	int32 Flag = 2;
	int64 kBs = 3;
}

message z5s {
	int32 Flag = 1;
	repeated J5s NBs = 2;
}

// MessageId: 28396 (Request)
message Afs {
}

// MessageId: 20923 (Response)
message Pfs {
	repeated z5s FBs = 74;
}

// MessageId: 24591 (Notify)
message Ufs {
	repeated z5s FBs = 72;
}

// MessageId: 22347 (Notify)
message wfs {
	J5s VBs = 173;
}

// MessageId: 24793 (Request)
message xfs {
	repeated int32 QVn = 145;
}

// MessageId: 26527 (Response)
message bfs {
	int32 Error = 197;
}

message PassiveSkillInfo {
	int64 SkillId = 1;
	int64 SkillCdEndTime = 2;
}

message RolePassiveSkillInfo {
	int32 roleId = 1;
	repeated PassiveSkillInfo PassiveSkillInfoList = 2;
}

// MessageId: 16179 (Notify)
message PassiveSkillNotify {
	repeated RolePassiveSkillInfo RolePassiveSkillInfoList = 33;
}

// MessageId: 25691 (Request)
message UpdatePlayerPassiveSkillRequest {
	int32 roleId = 255;
	int64 PassiveSkillId = 75;
	int64 CdEndTime = 42;
}

// MessageId: 16354 (Response)
message UpdatePlayerPassiveSkillResponse {
	int32 errCode = 224;
}

// MessageId: 26704 (Notify)
message PlayerVarNotify {
	map<string, VarDefinePb> VarInfos = 38;
}

enum MotionType {
	MotionType_Spurt = 0;
	MotionType_Pullback = 1;
	MotionType_BeLand = 2;
	MotionType_MotionJump = 3;
	MotionType_AirSprint = 4;
	MotionType_BackFlip = 5;
	MotionType_StepAcross = 6;
	MotionType_ClimbTop = 7;
	MotionType_LimitDodge = 8;
	MotionType_CounterAttack = 9;
}

// MessageId: 19946 (Request)
message PlayerMotionRequest {
	int32 Motion = 106;
}

// MessageId: 25245 (Response)
message PlayerMotionResponse {
	int32 ErrorId = 26;
}

// MessageId: 23265 (Request)
message PressRequest {
	int32 PayloadSize = 5;
	int32 NotifyCount = 222;
	bytes Payload = 53;
}

// MessageId: 29265 (Response)
message PressResponse {
	bytes Payload = 158;
}

// MessageId: 24890 (Notify)
message PressNotify {
	bytes Payload = 203;
}

// MessageId: 25849 (Request)
message PressGameRequest {
	int32 PayloadSize = 115;
	int32 NotifyCount = 131;
	bytes Payload = 160;
}

// MessageId: 22055 (Response)
message PressGameResponse {
	bytes Payload = 18;
}

// MessageId: 29061 (Notify)
message PressGameNotify {
	bytes Payload = 225;
}

// MessageId: 22446 (Request)
message ProgressBarFinishRequest {
	int64 EntityId = 103;
}

// MessageId: 25984 (Response)
message ProgressBarFinishResponse {
	ErrorCode ErrorCode = 148;
}

// MessageId: 25076 (Notify)
message JSPatchNotify {
	string Content = 35;
}

enum QuestState {
	QuestState_InActive = 0;
	QuestState_hTs = 1;
	QuestState_zfs = 2;
	QuestState_Finish = 3;
	QuestState_Delete = 4;
}

message QuestInfo {
	int32 QuestId = 1;
	int32 Status = 2;
}

// MessageId: 29208 (Notify)
message QuestListNotify {
	repeated QuestInfo Quests = 5;
}

// MessageId: 17169 (Notify)
message TraceQuestNotify {
	int32 QuestId = 7;
}

// MessageId: 22531 (Request)
message TraceQuestRequest {
	int32 TraceType = 231;
	int32 QuestId = 156;
	int32 Operate = 3;
}

// MessageId: 20619 (Response)
message TraceQuestResponse {
	int32 ErrorId = 216;
}

// MessageId: 19843 (Notify)
message feh {
	repeated int32 QuestIds = 26;
}

enum r8s {
	r8s_Enter = 0;
	r8s_Zbs = 1;
}

// MessageId: 17770 (Request)
message QuestFinishActionRequest {
	int32 QuestId = 251;
	int32 NodeId = 222;
	int32 ActionId = 143;
	int32 ActTime = 165;
}

// MessageId: 27545 (Response)
message QuestFinishActionResponse {
	int32 ErrorId = 198;
}

// MessageId: 19319 (Request)
message QuestActionRequest {
	int32 QuestId = 61;
	int32 NodeId = 117;
	int32 ActionId = 42;
	int32 ActTime = 176;
}

// MessageId: 18826 (Response)
message QuestActionResponse {
	int32 ErrorId = 150;
}

// MessageId: 20797 (Notify)
message QuestReadyListNotify {
	repeated int32 QuestId = 94;
}

// MessageId: 23323 (Notify)
message QuestShowListNotify {
	repeated int32 QuestId = 88;
}

// MessageId: 15934 (Request)
message QuestNpcMoveOverRequest {
	int64 EntityId = 85;
}

// MessageId: 26913 (Response)
message QuestNpcMoveOverResponse {
	int32 ErrorId = 175;
}

// MessageId: 22421 (Notify)
message QuestStateUpdateNotify {
	int32 QuestId = 44;
	int32 State = 234;
}

// MessageId: 18787 (Request)
message QuestFinishActionEndRequest {
	repeated int32 QuestId = 170;
}

// MessageId: 18648 (Response)
message QuestFinishActionEndResponse {
	int32 ErrorId = 137;
}

// MessageId: 22294 (Notify)
message QuestFinishListNotify {
	repeated int32 QuestId = 45;
}

// MessageId: 19464 (Notify)
message DailyQuestUnlockAreaNotify {
	repeated int32 UnlockAreaIds = 98;
	repeated int32 UnlockInfluenceIds = 185;
	int32 CurrChoosedArea = 228;
	int32 CurrChoosedInfluence = 36;
	bool IsInit = 214;
}

// MessageId: 24667 (Notify)
message DailyQuestStateNotify {
	repeated int32 GetReward = 231;
	map<int32, int32> AllQuest = 167;
}

// MessageId: 29591 (Request)
message DailyQuestChangePreferRequest {
	int32 TargetArea = 216;
	int32 TargetInfluence = 52;
}

// MessageId: 28000 (Response)
message DailyQuestChangePreferResponse {
	int32 ErrorId = 73;
}

// MessageId: 29212 (Request)
message DailyQuestGetRewardRequest {
	repeated int32 QuestId = 124;
}

// MessageId: 22504 (Response)
message DailyQuestGetRewardResponse {
	int32 ErrorId = 162;
	repeated DailyQuestReward Rewards = 204;
}

message DailyQuestReward {
	int32 ItemId = 1;
	int32 ItemCount = 2;
}

// MessageId: 15883 (Notify)
message DailyQuestCancelNotify {
	repeated int32 QuestIds = 137;
}

// MessageId: 29142 (Request)
message RoleQuestAcceptRequest {
	int32 QuestId = 79;
}

// MessageId: 23709 (Response)
message RoleQuestAcceptResponse {
	int32 ErrorId = 193;
}

// MessageId: 18684 (Notify)
message RoleQuestStateNotify {
	int32 UnlockPoint = 249;
	int32 MaxUnlockPoint = 226;
	repeated int32 InProgress = 228;
	repeated int32 Unlock = 65;
	repeated int32 Over = 53;
	int64 LastAddPointTime = 211;
}

// MessageId: 19469 (Notify)
message RoleQuestNewUnlockNotify {
	repeated int32 QuestIds = 187;
}

// MessageId: 15899 (Request)
message RoleQuestPointStateRequest {
}

// MessageId: 24680 (Response)
message RoleQuestPointStateResponse {
	int32 CurrPoint = 132;
	int32 MaxPoint = 81;
	int64 LastAddPointTime = 24;
}

// MessageId: 19920 (Notify)
message DestroyQuestsNotify {
	repeated int32 QuestIds = 246;
}

// MessageId: 15066 (Notify)
message AutoQuestNotify {
	bool IsAuto = 232;
}

// MessageId: 28672 (Request)
message QuestRedDotRequest {
	int32 QuestId = 166;
	int32 Operate = 152;
}

// MessageId: 19598 (Response)
message QuestRedDotResponse {
	int32 ErrorId = 88;
}

// MessageId: 15835 (Notify)
message QuestRedDotNotify {
	repeated int32 QuestId = 183;
}

enum i6n {
	i6n_RangeEnter = 0;
	i6n_RangeLeave = 1;
}

// MessageId: 28245 (Request)
message Ags {
	int64 zWn = 150;
	repeated int64 HKs = 246;
	int32 i6n = 88;
}

// MessageId: 29744 (Response)
message Pgs {
	ErrorCode ErrorCode = 32;
}

// MessageId: 22323 (Request)
message Ugs {
	int64 zWn = 79;
	int32 i6n = 173;
}

// MessageId: 26135 (Response)
message wgs {
	ErrorCode ErrorCode = 154;
}

// MessageId: 20410 (Notify)
message xgs {
	int64 g2s = 6;
	repeated int64 HKs = 50;
	int32 i6n = 73;
}

// MessageId: 19640 (Notify)
message bgs {
	int64 g2s = 43;
	int32 f2s = 108;
	int32 i6n = 64;
}

enum p2s {
	p2s_Up = 0;
	p2s_Down = 1;
}

// MessageId: 26371 (Notify)
message Bgs {
	int64 v2s = 209;
	int32 p2s = 67;
}

// MessageId: 17009 (Request)
message qgs {
	int64 t6n = 108;
	int32 i6n = 24;
}

// MessageId: 29495 (Response)
message Ggs {
	ErrorCode ErrorCode = 76;
}

// MessageId: 20820 (Request)
message vDOLLARs {
	int64 zWn = 106;
	repeated int64 JKs = 254;
	bool zKs = 49;
}

// MessageId: 27229 (Response)
message pDOLLARs {
	ErrorCode ErrorCode = 67;
}

enum ApplyRechallengeReason {
	ApplyRechallengeReason_Settle = 0;
	ApplyRechallengeReason_Dead = 1;
}

enum hoh {
	hoh_Accept = 0;
	hoh_ActiveRefuse = 1;
	hoh_TimeOutRefuse = 2;
}

// MessageId: 22971 (Request)
message ApplyRechallengeRequest {
	int32 Reason = 67;
}

// MessageId: 28154 (Response)
message ApplyRechallengeResponse {
	ErrorCode ErrorCode = 130;
}

// MessageId: 25315 (Notify)
message ReceiveRechallengeNotify {
	int32 PlayerId = 40;
	int32 Result = 176;
}

// MessageId: 17713 (Request)
message ReceiveRechallengeRequest {
	int32 Result = 79;
}

// MessageId: 26885 (Response)
message ReceiveRechallengeResponse {
	ErrorCode ErrorCode = 203;
}

// MessageId: 18371 (Request)
message InviteRechallengeRequest {
}

// MessageId: 26702 (Response)
message InviteRechallengeResponse {
	ErrorCode ErrorCode = 225;
}

// MessageId: 24304 (Notify)
message InviteRechallengeNotify {
	int32 InviterPlayerId = 23;
}

// MessageId: 23633 (Notify)
message ReceiveRechallengePlayerIdsNotify {
	repeated int32 PlayerIds = 149;
}

// MessageId: 25650 (Notify)
message PlayerDeadNotify {
	int32 PlayerId = 134;
	int32 DelaySeconds = 60;
	bool IsAutoRevive = 197;
	int32 ReviveId = 36;
	bool IsLogin = 54;
	bool IsShowRevive = 218;
}

message ReviveRoleInformation {
	int64 EntityId = 1;
	GameplayAttributeData CurHpAttribute = 2;
}

// MessageId: 21917 (Notify)
message PlayerReviveNotify {
	int32 PlayerId = 105;
	int32 ReviveType = 223;
	Vector Location = 13;
	Rotator Rotator = 153;
	repeated ReviveRoleInformation ReviveRoleInfos = 85;
	bool NeedRollbackSubLevel = 86;
	repeated string RollbackSubLevel = 167;
	int32 TeleportId = 34;
	bool JCa = 234;
}

// MessageId: 17234 (Request)
message ReviveRequest {
	bool UseItem = 61;
}

// MessageId: 18435 (Response)
message ReviveResponse {
	ErrorCode ErrorCode = 120;
}

// MessageId: 16303 (Request)
message AddReviveRegionRequest {
	int32 ReviveId = 173;
}

// MessageId: 28758 (Response)
message AddReviveRegionResponse {
	ErrorCode ErrorCode = 2;
}

// MessageId: 15869 (Request)
message RemoveReviveRegionRequest {
	int32 ReviveId = 177;
}

// MessageId: 26607 (Response)
message RemoveReviveRegionResponse {
	ErrorCode ErrorCode = 13;
}

message hzs {
	int32 USs = 1;
	int32 LivingStatus = 2;
}

// MessageId: 20134 (Notify)
message w7s {
	int32 PlayerId = 78;
	repeated hzs azs = 86;
}

enum RogueConstVar {
	RogueConstVar_Zero = 0;
}

enum RoguelikeGainDataType {
	RoguelikeGainDataType_Unkonw = 0;
	RoguelikeGainDataType_txs = 1;
	RoguelikeGainDataType_Shop = 2;
	RoguelikeGainDataType_MUs = 3;
	RoguelikeGainDataType_CommonBuff = 4;
	RoguelikeGainDataType_RoleBuff = 5;
	RoguelikeGainDataType_Event = 6;
	RoguelikeGainDataType_BranchBuff = 7;
	RoguelikeGainDataType_Miraclecreation = 8;
}

message AffixEntry {
	int32 Flag = 1;
	bool IsUnlock = 2;
	map<int32, int32> ElementDict = 3;
}

message DiscountInfo {
	map<int32, int32> BuffPrice = 1;
	int32 Discounted = 2;
}

message RogueGainEntry {
	int32 type = 1;
	int32 index = 2;
	int32 ConfigId = 3;
	map<int32, int32> ElementDict = 4;
	repeated AffixEntry AffixEntryList = 5;
	DiscountInfo DiscountInfo = 6;
	bool IsSelect = 8;
	bool IsNew = 9;
	int32 Cost = 10;
	int32 IsSell = 11;
	bool IsValid = 12;
	oneof r8s {
		bool O2s = 7;
	}
}

// MessageId: 29314 (Notify)
message RoguelikeCurrencyNotify {
}

// MessageId: 25186 (Notify)
message RoguelikeCurrencyUpdateNotify {
}

// MessageId: 19374 (Notify)
message RoguelikeInfoNotify {
	RogueGainEntry RoleEntry = 194;
	repeated RogueGainEntry BuffEntryList = 73;
	map<int32, int32> ElementDict = 199;
	repeated RogueGainEntry PhantomEntry = 91;
	oneof u8s {
		RogueGainEntry j2s = 205;
	}
}

// MessageId: 23040 (Request)
message RoguelikeRefreshGainRequest {
	int32 BindId = 179;
	int32 Layer = 6;
}

// MessageId: 17380 (Response)
message RoguelikeRefreshGainResponse {
	ErrorCode ErrorCode = 14;
	repeated string ErrorParams = 44;
	RoguelikeChooseData RoguelikeChooseData = 147;
}

// MessageId: 18853 (Request)
message RoguelikeChooseDataRequest {
	int32 index = 239;
	int32 Layer = 83;
}

message RoguelikeChooseData {
	int32 index = 1;
	int32 type = 2;
	int32 MaxTime = 3;
	int32 UseTime = 4;
	int32 EventId = 5;
	repeated RogueGainEntry RogueGainEntryList = 6;
	int32 Layer = 7;
	bool IsSelect = 8;
	repeated o5s Z2s = 9;
}

// MessageId: 15877 (Response)
message RoguelikeChooseDataResponse {
	ErrorCode ErrorCode = 148;
	repeated string ErrorParams = 45;
	RoguelikeChooseData RoguelikeChooseData = 202;
}

// MessageId: 25793 (Notify)
message RoguelikeChooseDataNotify {
	repeated RoguelikeChooseData RoguelikeChooseDataList = 23;
}

// MessageId: 16693 (Request)
message RoguelikeChooseDataResultRequest {
	int32 BindId = 77;
	int32 index = 20;
	int32 Layer = 3;
}

// MessageId: 25723 (Response)
message RoguelikeChooseDataResultResponse {
	ErrorCode ErrorCode = 109;
	repeated string ErrorParams = 16;
	RoguelikeChooseDataNotify RoguelikeChooseDataNotify = 179;
	repeated RogueGainEntry RogueGainEntryList = 21;
	bool IsSelect = 211;
	repeated RogueGainEntry tqs = 57;
	DOLLARna DOLLARna = 166;
}

message DOLLARna {
	repeated Yna Wna = 1;
}

message Yna {
	Qna Qna = 1;
	repeated Qna Kna = 2;
}

message Qna {
	oneof Data {
		RoguelikeEventGainNotify RoguelikeEventGainNotify = 1;
		ItemObtainNotify ItemObtainNotify = 2;
	}

}

// MessageId: 19348 (Notify)
message RoguelikeEventGainNotify {
	repeated RogueGainEntry RogueGainEntryList = 1;
	repeated RogueGainEntry Xna = 48;
}

// MessageId: 17883 (Request)
message RoguelikeLastInfoRequest {
}

message RoguelikeLastInfo {
	int32 InstId = 2;
	int32 CurLayer = 3;
	int32 MaxLayer = 4;
}

// MessageId: 26736 (Response)
message RoguelikeLastInfoResponse {
	ErrorCode ErrorCode = 97;
	bool HasData = 224;
	repeated RoguelikeLastInfo RoguelikeLastInfos = 22;
}

// MessageId: 26279 (Request)
message Ogs {
	int32 InstId = 231;
	int32 SeasonId = 21;
}

// MessageId: 28249 (Response)
message kgs {
	ErrorCode ErrorCode = 238;
	sqs sqs = 167;
}

// MessageId: 27791 (Request)
message Ngs {
	int32 InstId = 52;
	repeated int32 BHn = 223;
	int32 SeasonId = 46;
}

// MessageId: 24673 (Response)
message Fgs {
	ErrorCode ErrorCode = 142;
}

message sqs {
	int32 InstId = 1;
	repeated int32 BHn = 2;
	int32 SeasonId = 3;
}

// MessageId: 25485 (Request)
message RoguelikeStartRequest {
	bool ContinueLastProgress = 49;
	int32 InstId = 169;
	repeated int32 RoleIds = 131;
	int32 SeasonId = 232;
}

// MessageId: 28390 (Response)
message RoguelikeStartResponse {
	ErrorCode ErrorCode = 97;
}

// MessageId: 26914 (Request)
message RoguelikeQuitRequest {
}

// MessageId: 26102 (Response)
message RoguelikeQuitResponse {
	ErrorCode ErrorCode = 8;
}

message RoguelikeResultInfo {
	oneof u8s {
		RogueGainEntry j2s = 10;
	}

	bool IsNewRecord = 1;
	uint32 Time = 2;
	int32 CurLayer = 3;
	int32 MaxLayer = 4;
	int32 KillEnemyCount = 5;
	int32 GetGainCount = 6;
	map<int32, int32> Rewards = 8;
	RogueGainEntry RoleEntry = 9;
	bool IsDeadTrigger = 11;
	int32 InstId = 12;
	int32 TotalCostTime = 13;
	int32 PhantomEntry = 14;
}

// MessageId: 29302 (Notify)
message RoguelikeResultNotify {
	RoguelikeResultInfo RoguelikeResultInfo = 108;
}

// MessageId: 21930 (Request)
message RoguelikeResultRequest {
	int32 InstId = 106;
}

// MessageId: 29652 (Response)
message RoguelikeResultResponse {
	ErrorCode ErrorCode = 179;
	RoguelikeResultInfo RoguelikeResultInfo = 237;
}

// MessageId: 25218 (Notify)
message RoguelikeSubLevelNotify {
	string LoadSubLevel = 96;
	string UnLoadSubLevel = 178;
	float X = 55;
	float Y = 219;
	float gqs = 223;
	float fqs = 175;
}

// MessageId: 29758 (Request)
message T_s {
}

// MessageId: 15045 (Response)
message L_s {
	ErrorCode ErrorCode = 120;
}

enum RoguelikeRoomType {
	RoguelikeRoomType_Normal = 0;
	RoguelikeRoomType_Special = 1;
	RoguelikeRoomType_Boss = 2;
}

// MessageId: 22698 (Notify)
message RoguelikeRoomInfoNotify {
	int32 CurLayer = 49;
	int32 MaxLayer = 175;
	int32 RoguelikeRoomTypeId = 168;
	int32 SkyBoxId = 95;
	int32 Prh = 19;
}

// MessageId: 17533 (Request)
message RoguelikeTalentInfoRequest {
	int32 SeasonId = 33;
}

enum m8s {
	m8s_CMs = 0;
	m8s_Active = 1;
}

// MessageId: 24694 (Response)
message RoguelikeTalentInfoResponse {
	ErrorCode ErrorCode = 116;
	map<int32, int32> TalentSkillDict = 246;
}

// MessageId: 26427 (Request)
message RoguelikeTalentLevelUpRequest {
	int32 SkillId = 127;
}

// MessageId: 15422 (Response)
message RoguelikeTalentLevelUpResponse {
	ErrorCode ErrorCode = 82;
	int32 Level = 138;
}

// MessageId: 18549 (Notify)
message RoguelikeTalentUnlockNotify {
	int32 SkillId = 106;
}

message RoguelikeToken {
	int32 Flag = 1;
	bool IsReceive = 2;
}

message SeasonReward {
	int32 Flag = 1;
	bool IsReceive = 2;
}

message SeasonData {
	int32 SeasonId = 1;
	int64 StartTime = 2;
	int64 EndTime = 3;
	repeated RoguelikeToken RoguelikeTokenList = 4;
	repeated SeasonReward SeasonRewardList = 5;
	int32 TokenItemCount = 6;
}

// MessageId: 16390 (Request)
message RoguelikeSeasonDataRequest {
	int32 SeasonId = 140;
}

// MessageId: 17989 (Response)
message RoguelikeSeasonDataResponse {
	ErrorCode ErrorCode = 187;
	SeasonData SeasonData = 150;
}

// MessageId: 18055 (Request)
message RoguelikeTokenReceiveRequest {
	int32 SeasonId = 72;
	int32 Flag = 43;
}

// MessageId: 19401 (Response)
message q_s {
	ErrorCode ErrorCode = 171;
	map<int32, int32> ItemMap = 241;
}

// MessageId: 17010 (Request)
message RoguelikeSeasonRewardReceiveRequest {
	int32 SeasonId = 67;
	repeated int32 index = 218;
}

// MessageId: 21722 (Response)
message O_s {
	ErrorCode ErrorCode = 29;
	map<int32, int32> ItemMap = 230;
}

// MessageId: 15751 (Request)
message RoguelikeGiveUpGainRequest {
	int32 BindId = 186;
	int32 Layer = 154;
}

// MessageId: 15764 (Response)
message RoguelikeGiveUpGainResponse {
	int32 BindId = 106;
	ErrorCode ErrorCode = 197;
	map<int32, int32> ItemMap = 69;
}

enum Tqs {
	Tqs_GainDataAdd = 0;
	Tqs_GainDataDelete = 1;
	Tqs_GainDataUpdate = 2;
}

// MessageId: 23086 (Notify)
message Tfs {
	int32 Tqs = 28;
	int32 index = 135;
	RogueGainEntry RogueGainEntry = 24;
}

// MessageId: 24608 (Request)
message Rfs {
	int32 SeasonId = 89;
	repeated int32 PHn = 61;
}

// MessageId: 22509 (Response)
message Dfs {
	ErrorCode ErrorCode = 223;
	repeated int32 Rqs = 224;
	int32 PJs = 52;
	int32 wJs = 214;
	int32 RoleLevel = 244;
	int32 WeaponLevel = 111;
}

// MessageId: 27518 (Notify)
message Dra {
	int32 index = 196;
	repeated int32 Pra = 233;
}

// MessageId: 20445 (Request)
message Ara {
	int32 index = 168;
	int32 Mra = 32;
}

// MessageId: 18663 (Response)
message Ura {
	ErrorCode ErrorCode = 21;
}

message Pqs {
	int32 SkillId = 1;
	repeated int64 Dqs = 2;
}

message f8s {
	int32 Aqs = 1;
	Pqs Pqs = 2;
}

message bqs {
	repeated Pqs Uqs = 1;
	repeated f8s wqs = 2;
}

message v8s {
	int32 xqs = 1;
	bqs bqs = 2;
}

message Gqs {
	bqs Bqs = 1;
	repeated v8s qqs = 2;
}

// MessageId: 25328 (Notify)
message Vgs {
	Gqs Gqs = 87;
}

// MessageId: 27242 (Request)
message Cms {
	int64 EntityId = 238;
}

// MessageId: 22188 (Response)
message gms {
	ErrorCode ErrorCode = 255;
}

enum SceneStepStatus {
	SceneStepStatus_Accepted = 0;
	SceneStepStatus_Finished = 1;
	SceneStepStatus_Failed = 2;
}

message M8s {
	int32 ConditionId = 1;
	int32 Oqs = 2;
}

message S8s {
	int32 PlayerId = 1;
	repeated M8s Progress = 2;
}

message E8s {
	int32 kqs = 1;
	int32 Status = 2;
	repeated M8s Progress = 3;
	repeated S8s Nqs = 4;
}

message y8s {
	int32 Fqs = 1;
	repeated E8s Vqs = 2;
}

// MessageId: 23058 (Notify)
message Ims {
	repeated y8s DOLLARqs = 165;
}

// MessageId: 21075 (Notify)
message Tms {
	int32 Fqs = 55;
	E8s Hqs = 129;
}

// MessageId: 16494 (Request)
message Lms {
	int64 EntityId = 81;
}

// MessageId: 19766 (Response)
message Rms {
	ErrorCode ErrorCode = 170;
}

// MessageId: 24959 (Request)
message Dms {
	int64 EntityId = 90;
	int64 I5n = 167;
}

// MessageId: 19365 (Response)
message Ams {
	ErrorCode ErrorCode = 87;
}

// MessageId: 18924 (Notify)
message Pms {
	int64 EntityId = 211;
	int32 jqs = 104;
}

// MessageId: 17147 (Notify)
message Ums {
	int64 EntityId = 221;
	int32 jqs = 229;
}

// MessageId: 27451 (Request)
message wms {
	int64 EntityId = 82;
}

// MessageId: 26500 (Response)
message xms {
	ErrorCode ErrorCode = 49;
}

message I8s {
	int32 Flag = 1;
	float M8n = 2;
	float S8n = 3;
	float E8n = 4;
	float y8n = 5;
	int32 I8n = 6;
	int32 T8n = 7;
}

// MessageId: 23399 (Notify)
message bms {
	repeated I8s v8n = 62;
}

// MessageId: 17765 (Request)
message Bms {
	repeated I8s v8n = 113;
}

// MessageId: 28703 (Response)
message qms {
	ErrorCode ErrorCode = 146;
}

// MessageId: 24990 (Request)
message Gms {
	int32 Language = 55;
}

// MessageId: 17062 (Response)
message Oms {
	ErrorCode ErrorCode = 108;
}

// MessageId: 29405 (Request)
message Teh {
	bool Bxa = 92;
}

// MessageId: 17805 (Response)
message Leh {
	ErrorCode ErrorCode = 236;
}

// MessageId: 28365 (Request)
message Reh {
}

// MessageId: 26745 (Response)
message Aeh {
	bool Bxa = 254;
}

message loh {
	repeated string hYa = 1;
}

message _oh {
	string dYa = 1;
	repeated string hYa = 2;
	int32 Version = 3;
}

message uoh {
	string CYa = 1;
	map<string, int32> Urh = 2;
	int32 Version = 3;
}

message qrh {
	string dYa = 1;
	repeated loh xrh = 2;
	int32 Version = 3;
}

message krh {
	string CYa = 1;
	repeated loh xrh = 2;
	int32 Version = 3;
}

enum coh {
	coh_Mouse = 0;
	coh_uVn = 1;
}

message iYa {
	repeated doh oYa = 1;
}

message doh {
	map<string, _oh> brha = 1;
	map<string, uoh> Brh = 2;
	map<string, qrh> qrh = 3;
	map<string, krh> krh = 4;
	int32 nYa = 5;
	string Sza = 6;
}

// MessageId: 22420 (Request)
message Lth {
}

// MessageId: 21403 (Response)
message Rth {
	iYa iYa = 84;
}

// MessageId: 27722 (Request)
message Ath {
	iYa iYa = 94;
}

// MessageId: 29049 (Response)
message Dth {
	ErrorCode ErrorCode = 240;
}

// MessageId: 16176 (Notify)
message wth {
	iYa iYa = 232;
}

message T8s {
	int32 Flag = 1;
	int32 BoughtCount = 2;
	int32 Lock = 3;
}

message ShoppMoneyInfo {
	int32 MoneyId = 1;
	int32 MoneyNum = 2;
}

message R8s {
	int32 ShopId = 1;
	int32 Flag = 2;
}

message ShopItemInfoNew {
	int32 Flag = 1;
	int32 BoughtCount = 2;
	bool Lock = 3;
	int32 ItemId = 4;
	int32 ItemNum = 5;
	string CondText = 6;
	repeated ShoppMoneyInfo MoneyList = 7;
	uint32 BeginTime = 8;
	uint32 EndTime = 9;
	int32 LimitNum = 10;
	repeated ShoppMoneyInfo OriginalMoneyList = 11;
	string Label = 12;
	string SwitchText = 13;
	string PurchaseText = 14;
}

message ShopInfo {
	int32 ShopId = 1;
	uint32 UpdateTime = 2;
	repeated ShopItemInfoNew ItemInfoList = 3;
}

// MessageId: 24570 (Request)
message ShopInfoRequest {
	string VersionStr = 120;
}

// MessageId: 20113 (Response)
message ShopInfoResponse {
	ErrorCode ErrorCode = 237;
	string VersionStr = 69;
	repeated ShopInfo ShopList = 78;
}

// MessageId: 29365 (Notify)
message ShopInfoNotify {
	string VersionStr = 53;
	repeated ShopInfo ShopList = 19;
}

// MessageId: 19048 (Request)
message ShopBuyRequest {
	string VersionStr = 149;
	int32 ShopId = 15;
	int32 Flag = 199;
	int32 Num = 77;
	int32 MoneyId = 185;
	int64 InteractEntityId = 221;
}

// MessageId: 29022 (Response)
message ShopBuyResponse {
	ErrorCode ErrorCode = 26;
	int32 ShopId = 70;
	int32 Flag = 254;
	int32 BoughtCount = 211;
}

// MessageId: 28779 (Request)
message ShopUpdateRequest {
	int32 ShopId = 250;
}

// MessageId: 26340 (Response)
message ShopUpdateResponse {
	ErrorCode ErrorCode = 206;
	ShopInfo Info = 74;
}

// MessageId: 23670 (Notify)
message Wms {
	repeated R8s ABs = 161;
}

enum SneakState {
	SneakState_Open = 0;
	SneakState_Close = 1;
}

enum SneakFinishType {
	SneakFinishType_SneakSuccess = 0;
	SneakFinishType_SneakFail = 1;
}

// MessageId: 15885 (Notify)
message Kms {
	int32 iGs = 228;
	int32 State = 18;
	repeated int64 EntityIds = 211;
}

// MessageId: 15802 (Request)
message Qms {
	int32 iGs = 171;
	int32 rGs = 94;
}

// MessageId: 18727 (Response)
message Xms {
	ErrorCode ErrorCode = 142;
}

// MessageId: 17686 (Notify)
message Yms {
	int32 oGs = 68;
}

// MessageId: 19541 (Request)
message SpecialItemEquipRequest {
	int32 ItemId = 156;
}

// MessageId: 16260 (Response)
message SpecialItemEquipResponse {
	ErrorCode ErrorCode = 88;
}

// MessageId: 26769 (Request)
message Zms {
}

// MessageId: 29696 (Response)
message eCs {
	ErrorCode ErrorCode = 135;
}

// MessageId: 23774 (Request)
message SynthesisInfoRequest {
}

// MessageId: 15197 (Response)
message SynthesisInfoResponse {
	int32 code = 52;
	repeated OneSynthesisInfo SynthesisInfoList = 103;
	repeated OneSynthesisConfig SynthesisConfigs = 106;
	SynthesisLevelInfo LevelInfo = 50;
	int64 LimitRefreshTime = 19;
}

message SynthesisLevelInfo {
	int32 Level = 1;
	int32 TotalProficiency = 2;
}

message OneSynthesisInfo {
	int32 Flag = 1;
	int32 count = 2;
	int32 LastRoleId = 3;
	int32 LimitCount = 4;
	int32 LimitSynthesisCount = 5;
	int64 LimitBeginTime = 6;
	int64 LimitEndTime = 7;
}

message OneSynthesisConfig {
	int32 Flag = 1;
	int64 LimitBeginTime = 2;
	int64 LimitEndTime = 3;
}

// MessageId: 20827 (Request)
message SynthesisItemRequest {
	int32 Flag = 76;
	int32 roleId = 227;
	int32 count = 164;
	int64 InteractEntityId = 30;
}

// MessageId: 23112 (Response)
message SynthesisItemResponse {
	int32 code = 112;
	int32 Flag = 74;
	repeated SingleItemInfo ItemInfos = 252;
	int32 ActiveSkillType = 166;
	repeated SingleItemInfo ExtraItemInfos = 207;
	int32 roleId = 94;
}

// MessageId: 26974 (Notify)
message SynthesisInfoUpdateNotify {
	repeated OneSynthesisInfo SynthesisInfoList = 101;
	repeated int32 HideSynthesisIdList = 214;
}

// MessageId: 16005 (Request)
message SynthesisLevelRewardRequest {
}

// MessageId: 18500 (Response)
message SynthesisLevelRewardResponse {
	int32 code = 31;
	SynthesisLevelInfo LevelInfo = 72;
}

// MessageId: 21367 (Notify)
message SynthesisLevelUpdateNotify {
	oneof B8s {
		SynthesisLevelInfo LevelInfo = 34;
	}

}

// MessageId: 15769 (Request)
message SynthesisFormulaUnlockRequest {
	int32 Flag = 196;
}

// MessageId: 25658 (Response)
message SynthesisFormulaUnlockResponse {
	int32 code = 103;
	int32 Flag = 171;
}

message TemporaryTeleportInfo {
	int32 MarkId = 1;
	int64 temporaryTeleportId = 2;
	int32 IsTrace = 3;
	int32 InstId = 4;
	Vector Pos = 5;
	Rotator Rot = 6;
	Vector PlayerTeleportPos = 7;
}

// MessageId: 25239 (Notify)
message TemporaryTeleportAllInfoNotify {
	repeated TemporaryTeleportInfo AllTemporaryTeleportInfo = 158;
}

// MessageId: 16811 (Notify)
message AddTemporaryTeleportInfoNotify {
	TemporaryTeleportInfo TemporaryTeleportInfo = 120;
}

// MessageId: 16069 (Notify)
message RemoveTemporaryTeleportNotify {
	int64 temporaryTeleportId = 196;
}

// MessageId: 16927 (Notify)
message TemporaryTeleportChangeNotify {
	TemporaryTeleportInfo TemporaryTeleportInfo = 117;
}

// MessageId: 27037 (Request)
message RemoveTemporaryTeleportRequest {
	int64 temporaryTeleportId = 21;
}

// MessageId: 20551 (Response)
message RemoveTemporaryTeleportResponse {
	int32 errCode = 34;
}

// MessageId: 17750 (Request)
message TeleportToTargetRequest {
	int64 temporaryTeleportId = 221;
	Rotator Rot = 38;
}

// MessageId: 22654 (Response)
message TeleportToTargetResponse {
	int32 errCode = 125;
}

// MessageId: 19382 (Notify)
message ThirdPartySharedNotify {
	repeated int32 SharedIds = 94;
}

// MessageId: 18370 (Request)
message ThirdPartyShareRequest {
	int32 SharedId = 143;
}

// MessageId: 17087 (Response)
message ThirdPartyShareResponse {
	ErrorCode ErrorCode = 7;
}

// MessageId: 19038 (Notify)
message h0a {
	int32 f0a = 202;
}

// MessageId: 15147 (Request)
message TimelineTraceStartRequest {
	int64 EntityId = 28;
	int32 index = 227;
}

message ControlPointData {
	int32 ControlPointIndex = 1;
	bool LeftEnable = 2;
	bool RightEnable = 3;
}

// MessageId: 23660 (Response)
message TimelineTraceStartResponse {
	int32 code = 217;
	int32 index = 254;
	int32 ControlPoint = 56;
	repeated int64 EntityIds = 41;
	repeated ControlPointData PointDatas = 201;
}

// MessageId: 18608 (Request)
message TimelineTraceControlRequest {
	int64 EntityId = 37;
	bool Forward = 156;
}

// MessageId: 24607 (Response)
message TimelineTraceControlResponse {
	int32 code = 183;
	int32 ControlPoint = 97;
}

// MessageId: 25003 (Request)
message TimelineTraceExitRequest {
	int64 EntityId = 229;
}

// MessageId: 25094 (Response)
message TimelineTraceExitResponse {
	int32 code = 161;
}

// MessageId: 22047 (Request)
message TimeCheckRequest {
	int64 ClientTime = 2;
	float Dilation = 166;
	float RDilation = 53;
}

// MessageId: 24114 (Notify)
message TimeCheckNotify {
	int64 ClientTime = 240;
	int64 ServerTime = 77;
	int64 ServerStopTime = 159;
	int64 SceneStopTime = 186;
	int64 Orh = 98;
}

// MessageId: 18582 (Response)
message TimeCheckResponse {
	int32 code = 251;
	int64 ClientTime = 60;
	int64 ServerTime = 211;
	int64 ServerStopTime = 111;
	int64 SceneStopTime = 224;
	int64 Orh = 219;
}

message TowerInfo {
	int32 CurrentSeason = 1;
	int32 DataSeason = 2;
	repeated TowerDifficultyPb TowerDifficulties = 3;
	int64 BeginTime = 4;
	int64 EndTime = 5;
}

message TowerDifficultyPb {
	int32 Difficulty = 1;
	repeated int32 RewardIndex = 2;
	repeated TowerAreaPb TowerAreas = 3;
	int32 MaxStar = 4;
}

message TowerAreaPb {
	int32 AreaNum = 1;
	repeated TowerFloorPb TowerFloors = 2;
}

message TowerFloorPb {
	int32 TowerConfigId = 1;
	int32 Star = 2;
	repeated TowerRolePb Formation = 4;
	repeated int32 AGs = 5;
}

message TowerRolePb {
	int32 roleId = 1;
	int32 LeaveSkillId = 2;
}

message TowerRecommendRole {
	int32 roleId = 1;
	int32 LeaveSkillId = 2;
	int32 Level = 3;
}

message TowerRecommendFormation {
	repeated TowerRecommendRole Formation = 1;
	int32 Usage = 2;
}

// MessageId: 27540 (Request)
message TowerRequest {
}

// MessageId: 28455 (Response)
message TowerResponse {
	TowerInfo TowerInfo = 86;
}

// MessageId: 26862 (Request)
message TowerSeasonUpdateRequest {
}

// MessageId: 18674 (Response)
message TowerSeasonUpdateResponse {
	oneof DOLLAR8s {
		TowerInfo TowerInfo = 222;
	}

	int32 MaxUnlockDifficulty = 240;
}

// MessageId: 27826 (Request)
message TowerFormationRecommendRequest {
	int32 TowerConfigId = 137;
}

// MessageId: 18994 (Response)
message TowerFormationRecommendResponse {
	ErrorCode ErrorCode = 224;
	bool NeedUpdateSeason = 137;
	int32 TowerConfigId = 139;
	repeated TowerRecommendFormation formations = 51;
}

// MessageId: 26784 (Request)
message TowerRewardRequest {
	int32 Difficulty = 105;
	int32 RewardIndex = 220;
}

// MessageId: 19757 (Response)
message TowerRewardResponse {
	ErrorCode ErrorCode = 77;
	bool NeedUpdateSeason = 234;
}

// MessageId: 20713 (Request)
message TowerStartRequest {
	int32 TowerConfigId = 66;
	repeated TowerRolePb Formation = 154;
}

// MessageId: 26788 (Response)
message TowerStartResponse {
	ErrorCode ErrorCode = 44;
	bool NeedUpdateSeason = 140;
}

// MessageId: 26370 (Request)
message TowerResetRequest {
	int32 TowerConfigId = 69;
}

// MessageId: 15999 (Response)
message TowerResetResponse {
	ErrorCode ErrorCode = 82;
	int32 TowerConfigId = 112;
	bool NeedUpdateSeason = 122;
}

// MessageId: 28507 (Request)
message TowerApplyFloorDataRequest {
	bool Apply = 152;
}

// MessageId: 27624 (Response)
message TowerApplyFloorDataResponse {
	ErrorCode ErrorCode = 72;
	bool NeedUpdateSeason = 112;
}

// MessageId: 23876 (Notify)
message TowerEndNotify {
	bool NeedUpdateSeason = 88;
	TowerFloorPb CurrentFloorData = 133;
	bool Success = 66;
}

// MessageId: 15839 (Notify)
message TowerFloorUpdateNotify {
	repeated TowerFloorPb TowerFloors = 214;
}

// MessageId: 29876 (Notify)
message TowerDifficultyUpdateNotify {
	repeated TowerDifficultyPb TowerDifficulties = 199;
}

// MessageId: 20342 (Notify)
message TowerInfoUpdateNotify {
	TowerInfo TowerInfo = 178;
}

// MessageId: 17313 (Request)
message TowerGuideActivityRewardRequest {
	int32 TowerGuideId = 199;
}

// MessageId: 28617 (Response)
message TowerGuideActivityRewardResponse {
	ErrorCode ErrorCode = 160;
}

// MessageId: 24090 (Request)
message TowerGuideActivityInfoRequest {
}

// MessageId: 25357 (Response)
message TowerGuideActivityInfoResponse {
	repeated int32 TowerGuideId = 116;
}

message DOLLARGs {
	int32 Level = 1;
	KGs BGs = 2;
}

message eDOLLARs {
	int32 Flag = 1;
	int32 Num = 2;
}

enum iOs {
	iOs_TrackMoonEntrust = 0;
	iOs_TrackMoonRole = 1;
	iOs_TrackMoonBuild = 2;
}

enum H8s {
	H8s_TrackMoonTargetRunning = 0;
	H8s_TrackMoonTargetFinish = 1;
	H8s_TrackMoonTargetTaken = 2;
}

message j8s {
	int32 Flag = 1;
	int32 Current = 2;
	int32 Target = 3;
	int32 Status = 4;
}

enum moh {
	moh_Bad = 0;
	moh_Normal = 1;
	moh_qGs = 2;
}

message W8s {
	int32 roleId = 1;
	int32 Result = 2;
}

message KGs {
	int32 roleId = 1;
	int32 GGs = 2;
	int32 OGs = 3;
	int32 kGs = 4;
	int32 Level = 5;
}

message HGs {
	int32 W6n = 1;
	int32 Level = 2;
	bool IsUnlock = 3;
}

message VGs {
	int32 X6n = 1;
	bool NGs = 2;
	int32 FGs = 3;
}

message rOs {
	oneof Data {
		VGs VGs = 1;
		DOLLARGs DOLLARGs = 2;
		HGs HGs = 3;
	}

}

// MessageId: 16160 (Request)
message Ygs {
	int32 roleId = 183;
	int32 Y6n = 59;
}

// MessageId: 16279 (Response)
message Jgs {
	ErrorCode ErrorCode = 216;
	bool Wua = 208;
}

// MessageId: 24117 (Request)
//message zgs {
//	int32 X6n = 154;
//	repeated int32 RoleIds = 71;
//}

// MessageId: 19139 (Response)
//message Zgs {
//	bool jGs = 130;
//	int32 WGs = 5;
//	repeated KGs KGs = 207;
//	repeated W8s QGs = 22;
//	int32 XGs = 84;
//	int32 YGs = 47;
//	int32 JGs = 115;
//	int32 zGs = 67;
//	VGs rla = 178;
//	ErrorCode ErrorCode = 179;
//}

// MessageId: 17124 (Request)
message efs {
	int32 X6n = 198;
	int32 Amount = 49;
}

// MessageId: 19337 (Response)
message tfs {
	ErrorCode ErrorCode = 250;
	int32 XGs = 192;
	bool Success = 33;
	int32 WGs = 61;
	repeated KGs KGs = 46;
	int32 JGs = 114;
	int32 Grh = 107;
}

// MessageId: 28121 (Request)
message ifs {
}

// MessageId: 23432 (Response)
message rfs {
	repeated VGs ZGs = 109;
}

// MessageId: 23674 (Request)
message ofs {
}

// MessageId: 22598 (Response)
message nfs {
	repeated DOLLARGs eOs = 21;
}

// MessageId: 18617 (Request)
message hfs {
}

// MessageId: 28197 (Response)
message lfs {
	repeated HGs tOs = 216;
}

// MessageId: 25997 (Request)
message Qgs {
	int32 W6n = 4;
}

// MessageId: 28871 (Response)
message Xgs {
	ErrorCode ErrorCode = 108;
	HGs HGs = 98;
	int32 DOLLARva = 90;
}

// MessageId: 20043 (Request)
message _fs {
	int32 W6n = 49;
}

// MessageId: 19440 (Response)
message ufs {
	ErrorCode ErrorCode = 20;
	int32 DOLLARva = 2;
}

// MessageId: 22999 (Notify)
message Sfs {
	int32 iOs = 98;
	rOs rOs = 57;
}

// MessageId: 21539 (Request)
message Wfs {
	int32 Flag = 162;
}

// MessageId: 26789 (Response)
message Kfs {
	ErrorCode ErrorCode = 253;
}

// MessageId: 25762 (Notify)
message Qfs {
	repeated j8s oOs = 200;
}

// MessageId: 16366 (Request)
//message b7s {
//}

// MessageId: 26476 (Response)
//message B7s {
//	ErrorCode ErrorCode = 96;
//	int32 j7s = 79;
//	int32 W7s = 143;
//	int32 Q7s = 241;
//	int32 K7s = 3;
//	eDOLLARs X7s = 167;
//	eDOLLARs Y7s = 53;
//	eDOLLARs J7s = 16;
//}

// MessageId: 16961 (Request)
message q7s {
	repeated int32 Ids = 228;
}

// MessageId: 18125 (Response)
message O7s {
	repeated int32 Ids = 116;
}

// MessageId: 16218 (Notify)
message k7s {
	repeated int32 Ids = 46;
}

// MessageId: 15167 (Notify)
message Wva {
	repeated DOLLARGs exs = 255;
}

// MessageId: 25983 (Request)
message ceh {
	int32 W6n = 179;
}

// MessageId: 19907 (Response)
message deh {
	ErrorCode ErrorCode = 248;
}

// MessageId: 17373 (Notify)
message Meh {
	int32 Nrh = 107;
}

// MessageId: 19734 (Request)
message MDOLLARs {
	int32 Flag = 61;
	int32 ActivityId = 80;
}

// MessageId: 16368 (Response)
message SDOLLARs {
	ErrorCode ErrorCode = 131;
}

// MessageId: 27822 (Request)
message TurntableCompleteRequest {
	int64 EntityId = 26;
}

// MessageId: 20893 (Response)
message TurntableCompleteResponse {
	int32 errCode = 59;
	int64 EntityId = 31;
}

message TutorialInfo {
	int32 Flag = 1;
	uint32 CreateTime = 2;
	bool GetAward = 3;
}

// MessageId: 21138 (Request)
message TutorialInfoRequest {
}

// MessageId: 24230 (Response)
message TutorialInfoResponse {
	repeated TutorialInfo UnLockList = 112;
}

// MessageId: 20918 (Notify)
message TutorialUnlockNotify {
	repeated TutorialInfo UnLockList = 233;
}

// MessageId: 27821 (Request)
message TutorialReceiveRequest {
	int32 Flag = 226;
}

// MessageId: 16749 (Response)
message TutorialReceiveResponse {
	ErrorCode ErrorCode = 168;
	repeated string ErrorParams = 62;
	map<int32, int32> ItemMap = 229;
}

// MessageId: 18457 (Request)
message TutorialUnlockRequest {
	int32 Flag = 143;
}

// MessageId: 19901 (Response)
message TutorialUnlockResponse {
	ErrorCode ErrorCode = 164;
	repeated string ErrorParams = 209;
	TutorialInfo aOs = 154;
}

message OneWeaponItemInfo {
	int32 IncId = 1;
	int32 WeaponLevel = 2;
	int32 WeaponExp = 3;
	int32 WeaponBreach = 4;
	int32 WeaponResonLevel = 5;
	int32 roleId = 6;
}

message WeaponConsumeItem {
	int32 IncId = 1;
	int32 count = 2;
	int32 ItemId = 3;
}

// MessageId: 29897 (Request)
message WeaponLevelUpRequest {
	int32 IncId = 98;
	repeated WeaponConsumeItem ConsumeList = 179;
}

// MessageId: 23392 (Response)
message WeaponLevelUpResponse {
	ErrorCode ErrorCode = 24;
	int32 IncId = 221;
	int32 WeaponLevel = 58;
	int32 WeaponExp = 13;
	map<int32, int32> ItemMap = 54;
}

// MessageId: 18438 (Request)
message WeaponBreachRequest {
	int32 IncId = 86;
}

// MessageId: 26039 (Response)
message WeaponBreachResponse {
	ErrorCode ErrorCode = 100;
	int32 IncId = 195;
	int32 WeaponBreach = 79;
}

// MessageId: 28258 (Request)
message WeaponResonUpRequest {
	int32 IncId = 159;
	repeated int32 ConsumeList = 7;
	repeated WeaponConsumeItem ConsumeItemList = 1;
}

// MessageId: 15909 (Response)
message WeaponResonUpResponse {
	ErrorCode ErrorCode = 169;
	int32 IncId = 77;
	int32 ReaonLevel = 153;
}

// MessageId: 28870 (Notify)
message WeaponAllInfoNotify {
	repeated OneWeaponItemInfo AllWeapon = 31;
}

// MessageId: 28849 (Notify)
message WeaponAddNotify {
	OneWeaponItemInfo WeaponInfo = 208;
}

// MessageId: 18601 (Notify)
message WeaponRemoveNotify {
	int32 IncId = 191;
}

// MessageId: 15404 (Request)
message WorldLevelDownRequest {
}

// MessageId: 22339 (Response)
message WorldLevelDownResponse {
	ErrorCode ErrorCode = 61;
	int32 OriginWorldLevel = 129;
	int32 CurWorldLevel = 253;
	int32 WorldLevelTimeStamp = 247;
}

// MessageId: 21519 (Request)
message WorldLevelRegainRequest {
}

// MessageId: 27076 (Response)
message WorldLevelRegainResponse {
	ErrorCode ErrorCode = 64;
	int32 OriginWorldLevel = 36;
	int32 CurWorldLevel = 198;
	int32 WorldLevelTimeStamp = 2;
}

enum WorldEnterPermission {
	WorldEnterPermission_ConfirmJoin = 0;
	WorldEnterPermission_DirectJoin = 1;
	WorldEnterPermission_ForbidJoin = 2;
	WorldEnterPermission_OnlyFriendJoin = 3;
}

enum WorldEnterWay {
	WorldEnterWay_LobbyJoin = 0;
	WorldEnterWay_QueryJoin = 1;
}

enum AgreeJoinWay {
	AgreeJoinWay_ClientActive = 0;
	AgreeJoinWay_ClientTimeOut = 1;
}

// MessageId: 22225 (Request)
message WorldEnterPermissionsRequest {
	int32 type = 188;
}

// MessageId: 22334 (Response)
message WorldEnterPermissionsResponse {
	ErrorCode ErrorCode = 212;
	int32 type = 149;
}

// MessageId: 19888 (Request)
message ApplyJoinWorldRequest {
	int32 PlayerId = 251;
	int32 Ways = 39;
}

// MessageId: 17470 (Response)
message ApplyJoinWorldResponse {
	ErrorCode ErrorCode = 16;
	repeated string ErrorParams = 170;
}

// MessageId: 20906 (Notify)
message ApplyJoinWorldNotify {
	int32 PlayerId = 209;
	int64 RefuseTimestamp = 185;
	string PlayerName = 113;
	int32 HeadId = 37;
	int32 Level = 120;
	string DOLLARxa = 150;
	string Vxa = 38;
	string hwa = 212;
}

// MessageId: 25027 (Request)
message AgreeJoinResultRequest {
	int32 PlayerId = 236;
	bool Result = 186;
	int32 Way = 196;
}

// MessageId: 28745 (Response)
message AgreeJoinResultResponse {
	ErrorCode ErrorCode = 204;
	string PlayerName = 199;
}

// MessageId: 23043 (Notify)
message AgreeJoinResultNotify {
	ErrorCode ErrorCode = 107;
	string PlayerName = 220;
}

// MessageId: 26711 (Notify)
message ApplyerEnterSceneNotify {
	ErrorCode ErrorCode = 58;
	int32 PlayerId = 174;
}

// MessageId: 28495 (Notify)
message AllApplyJoinNotify {
	repeated ApplyJoinWorldNotify ApplyList = 73;
}

// MessageId: 23440 (Request)
message LobbyListRequest {
	bool isFriend = 157;
}

// MessageId: 25284 (Response)
message LobbyListResponse {
	ErrorCode ErrorCode = 176;
	repeated PlayerDetails ItemList = 147;
}

// MessageId: 20343 (Request)
message LobbyQueryPlayersRequest {
	int32 PlayerId = 33;
}

// MessageId: 29363 (Response)
message LobbyQueryPlayersResponse {
	ErrorCode ErrorCode = 180;
	PlayerDetails Item = 11;
}

message WorldTeamPlayerInfo {
	int32 PlayerId = 1;
	string PlayerName = 2;
	int32 HeadId = 3;
	int32 Level = 4;
	string Signature = 5;
	WorldTeamPlayerFightInfo FightInfo = 6;
	int32 PingState = 7;
	PlayerDetails Item = 8;
}

enum WorldTeamLeaveReason {
	WorldTeamLeaveReason_Initiative = 0;
	WorldTeamLeaveReason_BeKick = 1;
	WorldTeamLeaveReason_Dissolve = 2;
	WorldTeamLeaveReason_Logout = 3;
	WorldTeamLeaveReason_ToOwnBigWorld = 4;
	WorldTeamLeaveReason_PSNAccountLogin = 5;
}

enum i7s {
	i7s_H8n = 0;
	i7s_Head = 1;
	i7s_F6n = 2;
	i7s_zVn = 3;
}

enum ENetPingState {
	ENetPingState_UNKNOWN = 0;
	ENetPingState_GREAT = 1;
	ENetPingState_GOOD = 2;
	ENetPingState_POOR = 3;
	ENetPingState_MAX = 4;
}

enum EPlayerTeleportState {
	EPlayerTeleportState_Default = 0;
	EPlayerTeleportState_Teleporting = 1;
	EPlayerTeleportState_TeleportTimeOut = 2;
}

// MessageId: 23096 (Notify)
message WorldTeamPlayerInfoChangeNotify {
	int32 PlayerId = 77;
	int32 ChangeType = 156;
	int32 IntValue = 169;
	string StringValue = 17;
}

// MessageId: 19189 (Notify)
message JoinWorldTeamNotify {
	int32 OwnerId = 168;
	repeated WorldTeamPlayerInfo PlayerInfos = 174;
}

// MessageId: 15309 (Notify)
message PlayerLeaveWorldTeamNotify {
	int32 PlayerId = 37;
	int32 Reason = 137;
}

// MessageId: 19414 (Notify)
message PlayerEnterWorldTeamNotify {
	WorldTeamPlayerInfo PlayerInfo = 169;
}

// MessageId: 21139 (Request)
message LeaveWorldTeamRequest {
	int32 PlayerId = 7;
}

// MessageId: 15568 (Response)
message LeaveWorldTeamResponse {
	ErrorCode ErrorCode = 82;
}

// MessageId: 26205 (Request)
message KickWorldTeamRequest {
	int32 PlayerId = 116;
}

// MessageId: 15961 (Response)
message KickWorldTeamResponse {
	ErrorCode ErrorCode = 246;
}

// MessageId: 25273 (Push)
message RobotDestinationPush {
	Vector Location = 111;
}

// MessageId: 23641 (Notify)
message RobotDestinationNotify {
	Vector Location = 145;
}

message WorldTeamRoleInfo {
	int32 roleId = 1;
	int32 RoleLevel = 2;
}

message WorldTeamPlayerFightInfo {
	int32 CurRoleId = 2;
	repeated WorldTeamRoleInfo RoleInfos = 3;
}

// MessageId: 25372 (Notify)
message UpdateWorldTeamPlayerFightInfoNotify {
	int32 PlayerId = 236;
	WorldTeamPlayerFightInfo FightInfo = 203;
}

// MessageId: 17110 (Push)
message PlayerNetStatePush {
	int32 W7n = 55;
}

// MessageId: 26184 (Notify)
message PlayerNetStateNotify {
	int32 PlayerId = 139;
	int32 PingState = 28;
}

// MessageId: 15702 (Notify)
message PlayerTeleportStateNotify {
	int32 PlayerId = 231;
	int32 TeleportState = 122;
	EntitySimplyMoveInfo CurRolePosInfo = 187;
}